
Old_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d428  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800d6f8  0800d6f8  0001d6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db10  0800db10  0001db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800db14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000440  240001d8  0800dcec  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000618  0800dcec  00020618  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020041  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003ef9  00000000  00000000  0004028a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001790  00000000  00000000  00044188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000122f  00000000  00000000  00045918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b0ca  00000000  00000000  00046b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002400f  00000000  00000000  00081c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ac89  00000000  00000000  000a5c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007268  00000000  00000000  002208ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  00227b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d6e0 	.word	0x0800d6e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800d6e0 	.word	0x0800d6e0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <IMU_send_cmd>:
#include "spi.h"
#include "usart.h"
#include "gpio.h"

HAL_StatusTypeDef IMU_send_cmd(IMU *IMU_struct, uint8_t TX[], uint8_t RX[], uint16_t length)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	807b      	strh	r3, [r7, #2]
	//Sends and Receives two bytes to the Sensor
	//HAL_SPI_Abort(&IMU_struct->SPI_handler);
	uint32_t Timeout = 3;
 80006ca:	2303      	movs	r3, #3
 80006cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(IMU_struct->GPIO_port, IMU_struct->GPIO_Pin, GPIO_PIN_RESET );
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	f003 fb8d 	bl	8003dfc <HAL_GPIO_WritePin>
	const HAL_StatusTypeDef return_Value = HAL_SPI_TransmitReceive(&IMU_struct->SPI_handler, TX, RX, length, Timeout);
 80006e2:	68f8      	ldr	r0, [r7, #12]
 80006e4:	887a      	ldrh	r2, [r7, #2]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	4613      	mov	r3, r2
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	f007 f86c 	bl	80077cc <HAL_SPI_TransmitReceive>
 80006f4:	4603      	mov	r3, r0
 80006f6:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(IMU_struct->GPIO_port, IMU_struct->GPIO_Pin, GPIO_PIN_SET );
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f003 fb78 	bl	8003dfc <HAL_GPIO_WritePin>

	return return_Value;
 800070c:	7cfb      	ldrb	r3, [r7, #19]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <IMU_struct_set_up>:
uint8_t IMU2_data_RX[IMU_byte_count] = {0};
uint8_t IMU1_new_data = 0;
uint8_t IMU2_new_data = 0;

void IMU_struct_set_up(IMU *IMU_struct, uint16_t accel_scale, uint16_t gyro_scale, uint16_t freq)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	4608      	mov	r0, r1
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	4603      	mov	r3, r0
 8000728:	817b      	strh	r3, [r7, #10]
 800072a:	460b      	mov	r3, r1
 800072c:	813b      	strh	r3, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	80fb      	strh	r3, [r7, #6]
	//For SPI communication
	//IMU_struct->SPI_handler = 0; IMU_struct->GPIO_port = 0;  IMU_struct->GPIO_Pin = 0;

	//Setting IMU data to zero
	for(int i=0; i>2; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e021      	b.n	800077c <IMU_struct_set_up+0x64>
	{
		IMU_struct->int_accel[i] = 0;
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3344      	adds	r3, #68	; 0x44
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	2200      	movs	r2, #0
 8000744:	80da      	strh	r2, [r3, #6]
		IMU_struct->int_gyro[i] = 0;
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3348      	adds	r3, #72	; 0x48
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	2200      	movs	r2, #0
 8000752:	809a      	strh	r2, [r3, #4]

		IMU_struct->float_accel[i] = 0;
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3328      	adds	r3, #40	; 0x28
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
		IMU_struct->float_gyro[i] = 0;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	332a      	adds	r3, #42	; 0x2a
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	3304      	adds	r3, #4
 8000770:	f04f 0200 	mov.w	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
	for(int i=0; i>2; i++)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	3301      	adds	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	2b02      	cmp	r3, #2
 8000780:	dcda      	bgt.n	8000738 <IMU_struct_set_up+0x20>
	}

	IMU_struct->int_temp = 0;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2200      	movs	r2, #0
 8000786:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	IMU_struct->float_temp = 25;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a69      	ldr	r2, [pc, #420]	; (8000934 <IMU_struct_set_up+0x21c>)
 800078e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	//New data indicator
	IMU_struct->new_data = 0;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2200      	movs	r2, #0
 8000796:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	//IMU scale values
	IMU_struct->scale_write_area = REG_accel_gyro_write_area;
 800079a:	22e0      	movs	r2, #224	; 0xe0
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	switch (accel_scale)
 80007a2:	897b      	ldrh	r3, [r7, #10]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d82e      	bhi.n	8000808 <IMU_struct_set_up+0xf0>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <IMU_struct_set_up+0x98>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007d3 	.word	0x080007d3
 80007b8:	080007e5 	.word	0x080007e5
 80007bc:	080007f7 	.word	0x080007f7
	{
	case scale_2g:
		IMU_struct->scale_accel = Scale_accel_2g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_2g; break;
 80007c0:	4a5d      	ldr	r2, [pc, #372]	; (8000938 <IMU_struct_set_up+0x220>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007c8:	2260      	movs	r2, #96	; 0x60
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80007d0:	e023      	b.n	800081a <IMU_struct_set_up+0x102>
	case scale_4g:
		IMU_struct->scale_accel = Scale_accel_4g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_4g; break;
 80007d2:	4a5a      	ldr	r2, [pc, #360]	; (800093c <IMU_struct_set_up+0x224>)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80007e2:	e01a      	b.n	800081a <IMU_struct_set_up+0x102>
	case scale_8g:
		IMU_struct->scale_accel = Scale_accel_8g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_8g; break;
 80007e4:	4a56      	ldr	r2, [pc, #344]	; (8000940 <IMU_struct_set_up+0x228>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007ec:	2220      	movs	r2, #32
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80007f4:	e011      	b.n	800081a <IMU_struct_set_up+0x102>
	case scale_16g:
		IMU_struct->scale_accel = Scale_accel_16g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_16g; break;
 80007f6:	4a53      	ldr	r2, [pc, #332]	; (8000944 <IMU_struct_set_up+0x22c>)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007fe:	2200      	movs	r2, #0
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8000806:	e008      	b.n	800081a <IMU_struct_set_up+0x102>
	default: IMU_struct->scale_accel = Scale_accel_16g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_16g; break;
 8000808:	4a4e      	ldr	r2, [pc, #312]	; (8000944 <IMU_struct_set_up+0x22c>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000810:	2200      	movs	r2, #0
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8000818:	bf00      	nop
	}

	switch (gyro_scale)
 800081a:	893b      	ldrh	r3, [r7, #8]
 800081c:	3b01      	subs	r3, #1
 800081e:	2b04      	cmp	r3, #4
 8000820:	d839      	bhi.n	8000896 <IMU_struct_set_up+0x17e>
 8000822:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <IMU_struct_set_up+0x110>)
 8000824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000828:	0800083d 	.word	0x0800083d
 800082c:	0800084f 	.word	0x0800084f
 8000830:	08000861 	.word	0x08000861
 8000834:	08000873 	.word	0x08000873
 8000838:	08000885 	.word	0x08000885
	{
	case scale_15dps:
		IMU_struct->scale_gyro = Scale_gyro_15dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_15dps; break;
 800083c:	4a42      	ldr	r2, [pc, #264]	; (8000948 <IMU_struct_set_up+0x230>)
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000844:	22e0      	movs	r2, #224	; 0xe0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800084c:	e02c      	b.n	80008a8 <IMU_struct_set_up+0x190>
	case scale_62dps:
		IMU_struct->scale_gyro = Scale_gyro_62dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_62dps; break;
 800084e:	4a3f      	ldr	r2, [pc, #252]	; (800094c <IMU_struct_set_up+0x234>)
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000856:	22a0      	movs	r2, #160	; 0xa0
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800085e:	e023      	b.n	80008a8 <IMU_struct_set_up+0x190>
	case scale_250dps:
		IMU_struct->scale_gyro = Scale_gyro_250dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_250dps; break;
 8000860:	4a3b      	ldr	r2, [pc, #236]	; (8000950 <IMU_struct_set_up+0x238>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000868:	2260      	movs	r2, #96	; 0x60
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000870:	e01a      	b.n	80008a8 <IMU_struct_set_up+0x190>
	case scale_1000dps:
		IMU_struct->scale_gyro = Scale_gyro_1000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_1000dps; break;
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <IMU_struct_set_up+0x23c>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800087a:	2220      	movs	r2, #32
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000882:	e011      	b.n	80008a8 <IMU_struct_set_up+0x190>
	case scale_2000dps:
		IMU_struct->scale_gyro = Scale_gyro_2000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_2000dps; break;
 8000884:	4a34      	ldr	r2, [pc, #208]	; (8000958 <IMU_struct_set_up+0x240>)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800088c:	2200      	movs	r2, #0
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000894:	e008      	b.n	80008a8 <IMU_struct_set_up+0x190>
	default: IMU_struct->scale_gyro = Scale_gyro_2000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_2000dps; break;
 8000896:	4a30      	ldr	r2, [pc, #192]	; (8000958 <IMU_struct_set_up+0x240>)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800089e:	2200      	movs	r2, #0
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80008a6:	bf00      	nop
	}
	IMU_struct->scale_temp = Scale_temp;
 80008a8:	4a2c      	ldr	r2, [pc, #176]	; (800095c <IMU_struct_set_up+0x244>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	switch (freq)
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d82f      	bhi.n	8000918 <IMU_struct_set_up+0x200>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <IMU_struct_set_up+0x1a8>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	080008d1 	.word	0x080008d1
 80008c4:	080008e3 	.word	0x080008e3
 80008c8:	080008f5 	.word	0x080008f5
 80008cc:	08000907 	.word	0x08000907
	{
	case freq_1kHz:
		IMU_struct->freq = 1./1000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_1kHz; break;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <IMU_struct_set_up+0x248>)
 80008d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80008d8:	2206      	movs	r2, #6
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80008e0:	e01a      	b.n	8000918 <IMU_struct_set_up+0x200>
	case freq_4kHz:
		IMU_struct->freq = 1./4000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_4kHz; break;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4a1f      	ldr	r2, [pc, #124]	; (8000964 <IMU_struct_set_up+0x24c>)
 80008e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80008ea:	2204      	movs	r2, #4
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80008f2:	e011      	b.n	8000918 <IMU_struct_set_up+0x200>
	case freq_16kHz:
		IMU_struct->freq = 1./16000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_16kHz; break;
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <IMU_struct_set_up+0x250>)
 80008f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80008fc:	2203      	movs	r2, #3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8000904:	e008      	b.n	8000918 <IMU_struct_set_up+0x200>
	case freq_32kHz:
		IMU_struct->freq = 1./32000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_32kHz; break;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <IMU_struct_set_up+0x254>)
 800090a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800090e:	2201      	movs	r2, #1
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8000916:	bf00      	nop
	}

	IMU_struct->freq_write_area =  REG_odr_write_area;
 8000918:	220f      	movs	r2, #15
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5

	//Other data
	IMU_struct->timestamp = 0;//in micro seconds
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8000928:	bf00      	nop
 800092a:	371c      	adds	r7, #28
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	41c80000 	.word	0x41c80000
 8000938:	3f194800 	.word	0x3f194800
 800093c:	3f994800 	.word	0x3f994800
 8000940:	40195196 	.word	0x40195196
 8000944:	40994800 	.word	0x40994800
 8000948:	39f9fe89 	.word	0x39f9fe89
 800094c:	3af9fe89 	.word	0x3af9fe89
 8000950:	3bfa232d 	.word	0x3bfa232d
 8000954:	3cf9c190 	.word	0x3cf9c190
 8000958:	3d79c190 	.word	0x3d79c190
 800095c:	3bf757cf 	.word	0x3bf757cf
 8000960:	3a83126f 	.word	0x3a83126f
 8000964:	3983126f 	.word	0x3983126f
 8000968:	3883126f 	.word	0x3883126f
 800096c:	3803126f 	.word	0x3803126f

08000970 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2224      	movs	r2, #36	; 0x24
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00a fe3a 	bl	800b5f6 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_ADC3_Init+0xd0>)
 8000984:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <MX_ADC3_Init+0xd4>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_ADC3_Init+0xd0>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_ADC3_Init+0xd0>)
 8000990:	2208      	movs	r2, #8
 8000992:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_ADC3_Init+0xd0>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_ADC3_Init+0xd0>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009f4:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_ADC3_Init+0xd0>)
 80009f6:	f001 fb7d 	bl	80020f4 <HAL_ADC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000a00:	f000 fb7a 	bl	80010f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_ADC3_Init+0xd8>)
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a16:	2304      	movs	r3, #4
 8000a18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_ADC3_Init+0xd0>)
 8000a28:	f001 fd6c 	bl	8002504 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000a32:	f000 fb61 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	240001f4 	.word	0x240001f4
 8000a44:	58026000 	.word	0x58026000
 8000a48:	c7520000 	.word	0xc7520000

08000a4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_ADC_MspInit+0x3c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10e      	bne.n	8000a7c <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_ADC_MspInit+0x40>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <HAL_ADC_MspInit+0x40>)
 8000a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <HAL_ADC_MspInit+0x40>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	58026000 	.word	0x58026000
 8000a8c:	58024400 	.word	0x58024400

08000a90 <MX_CORDIC_Init>:

/* USER CODE END 0 */

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_Init 0 */

  /* USER CODE END CORDIC_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_CORDIC_Init+0x30>)
 8000a98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a9c:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <MX_CORDIC_Init+0x30>)
 8000a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_CORDIC_Init+0x30>)
 8000aa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <MX_DTS_Init>:

DTS_HandleTypeDef hdts;

/* DTS init function */
void MX_DTS_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_DTS_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_15_CYCLE;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000ae2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000ae6:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_DTS_Init+0x4c>)
 8000afc:	f002 fe72 	bl	80037e4 <HAL_DTS_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 faf7 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	24000264 	.word	0x24000264
 8000b14:	58006800 	.word	0x58006800

08000b18 <HAL_DTS_MspInit>:

void HAL_DTS_MspInit(DTS_HandleTypeDef* dtsHandle)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  if(dtsHandle->Instance==DTS)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_DTS_MspInit+0x3c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10e      	bne.n	8000b48 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* DTS clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_DTS_MspInit+0x40>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_DTS_MspInit+0x40>)
 8000b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <HAL_DTS_MspInit+0x40>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	58006800 	.word	0x58006800
 8000b58:	58024400 	.word	0x58024400

08000b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a4e      	ldr	r2, [pc, #312]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	4a47      	ldr	r2, [pc, #284]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba0:	4b44      	ldr	r3, [pc, #272]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b41      	ldr	r3, [pc, #260]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	4a3f      	ldr	r2, [pc, #252]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <MX_GPIO_Init+0x158>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	482a      	ldr	r0, [pc, #168]	; (8000cb8 <MX_GPIO_Init+0x15c>)
 8000c0e:	f003 f8f5 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO2_NSS_GPIO_Port, GYRO2_NSS_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c18:	4828      	ldr	r0, [pc, #160]	; (8000cbc <MX_GPIO_Init+0x160>)
 8000c1a:	f003 f8ef 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Druck_INT_Pin;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Druck_INT_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4822      	ldr	r0, [pc, #136]	; (8000cbc <MX_GPIO_Init+0x160>)
 8000c34:	f002 ff3a 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	481c      	ldr	r0, [pc, #112]	; (8000cc0 <MX_GPIO_Init+0x164>)
 8000c4e:	f002 ff2d 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO1_NSS_Pin;
 8000c52:	2310      	movs	r3, #16
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_GPIO_Init+0x15c>)
 8000c6a:	f002 ff1f 	bl	8003aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO2_NSS_Pin;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_GPIO_Init+0x160>)
 8000c88:	f002 ff10 	bl	8003aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	200a      	movs	r0, #10
 8000c92:	f002 fb2c 	bl	80032ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c96:	200a      	movs	r0, #10
 8000c98:	f002 fb43 	bl	8003322 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2017      	movs	r0, #23
 8000ca2:	f002 fb24 	bl	80032ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ca6:	2017      	movs	r0, #23
 8000ca8:	f002 fb3b 	bl	8003322 <HAL_NVIC_EnableIRQ>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020000 	.word	0x58020000
 8000cbc:	58020400 	.word	0x58020400
 8000cc0:	58020800 	.word	0x58020800

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0fe      	sub	sp, #504	; 0x1f8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 ff17 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f90f 	bl	8000ef0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000cd2:	f000 f97d 	bl	8000fd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f7ff ff41 	bl	8000b5c <MX_GPIO_Init>
  MX_CORDIC_Init();
 8000cda:	f7ff fed9 	bl	8000a90 <MX_CORDIC_Init>
  MX_UART4_Init();
 8000cde:	f000 fe2d 	bl	800193c <MX_UART4_Init>
  MX_SPI2_Init();
 8000ce2:	f000 fa65 	bl	80011b0 <MX_SPI2_Init>
  MX_TIM4_Init();
 8000ce6:	f000 fd35 	bl	8001754 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000cea:	f000 fce5 	bl	80016b8 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000cee:	f7ff fe3f 	bl	8000970 <MX_ADC3_Init>
  MX_DTS_Init();
 8000cf2:	f7ff fee7 	bl	8000ac4 <MX_DTS_Init>
  MX_SPI1_Init();
 8000cf6:	f000 fa05 	bl	8001104 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //UART Debuging prep
  uint8_t buffer[50];
  memset(buffer, 0, sizeof(buffer));
 8000cfa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000cfe:	2232      	movs	r2, #50	; 0x32
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00a fc77 	bl	800b5f6 <memset>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start USER LED
 8000d08:	2100      	movs	r1, #0
 8000d0a:	486d      	ldr	r0, [pc, #436]	; (8000ec0 <main+0x1fc>)
 8000d0c:	f007 fb36 	bl	800837c <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 6874; // f = 2Hz
 8000d10:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <main+0x200>)
 8000d12:	f641 22da 	movw	r2, #6874	; 0x1ada
 8000d16:	635a      	str	r2, [r3, #52]	; 0x34

  //Starten des empfangens einer UART Nachricht
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuffer, sizeof(rxbuffer));

  HAL_DTS_Start(&hdts);//Starts the digital tempreture sensor
 8000d18:	486b      	ldr	r0, [pc, #428]	; (8000ec8 <main+0x204>)
 8000d1a:	f002 fdfd 	bl	8003918 <HAL_DTS_Start>

  //Initialisation of the IMU structs
  IMU IMU1_data;
  IMU_struct_set_up(&IMU1_data, IMU1_accel_scale, IMU1_gyro_scale, IMU1_freq);
 8000d1e:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8000d22:	2302      	movs	r3, #2
 8000d24:	2201      	movs	r2, #1
 8000d26:	2102      	movs	r1, #2
 8000d28:	f7ff fcf6 	bl	8000718 <IMU_struct_set_up>
  IMU1_data.SPI_handler = hspi1;
 8000d2c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d34:	4a65      	ldr	r2, [pc, #404]	; (8000ecc <main+0x208>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	4611      	mov	r1, r2
 8000d3a:	2388      	movs	r3, #136	; 0x88
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f00a fcda 	bl	800b6f6 <memcpy>
  IMU1_data.GPIO_port = GYRO1_NSS_GPIO_Port;
 8000d42:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d46:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d4a:	4a61      	ldr	r2, [pc, #388]	; (8000ed0 <main+0x20c>)
 8000d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  IMU1_data.GPIO_Pin = GYRO1_NSS_Pin;
 8000d50:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d58:	2210      	movs	r2, #16
 8000d5a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

  IMU IMU2_data;
  IMU_struct_set_up(&IMU2_data, IMU2_accel_scale, IMU2_gyro_scale, IMU2_freq);
 8000d5e:	f107 0008 	add.w	r0, r7, #8
 8000d62:	2302      	movs	r3, #2
 8000d64:	2205      	movs	r2, #5
 8000d66:	2104      	movs	r1, #4
 8000d68:	f7ff fcd6 	bl	8000718 <IMU_struct_set_up>
  IMU2_data.SPI_handler = hspi2;
 8000d6c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d70:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000d74:	4a57      	ldr	r2, [pc, #348]	; (8000ed4 <main+0x210>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	4611      	mov	r1, r2
 8000d7a:	2388      	movs	r3, #136	; 0x88
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	f00a fcba 	bl	800b6f6 <memcpy>
  IMU2_data.GPIO_port = GYRO2_NSS_GPIO_Port;
 8000d82:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d86:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000d8a:	4a53      	ldr	r2, [pc, #332]	; (8000ed8 <main+0x214>)
 8000d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  IMU2_data.GPIO_Pin = GYRO2_NSS_Pin;
 8000d90:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000d94:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	uint16_t length = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
	uint8_t TXData[2] = {117 | 0x80, 0}; // 0x80 results in a Read-operation
 8000da6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000daa:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000dae:	22f5      	movs	r2, #245	; 0xf5
 8000db0:	801a      	strh	r2, [r3, #0]
	uint8_t RXData[2] = {0, 111};
 8000db2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000db6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000dba:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8000dbe:	801a      	strh	r2, [r3, #0]

	uint8_t ERROR_NOTICE = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	uint32_t SPI1_ERROR_COUNT = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	uint32_t SPI2_ERROR_COUNT = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

	HAL_Delay(50);
 8000dd2:	2032      	movs	r0, #50	; 0x32
 8000dd4:	f000 ff24 	bl	8001c20 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RXData[1] = 0;
 8000dd8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000ddc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000de0:	2200      	movs	r2, #0
 8000de2:	705a      	strb	r2, [r3, #1]

	  if(IMU_send_cmd(&IMU1_data, TXData, RXData, length) != HAL_OK)
 8000de4:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 8000de8:	463a      	mov	r2, r7
 8000dea:	1d39      	adds	r1, r7, #4
 8000dec:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8000df0:	f7ff fc64 	bl	80006bc <IMU_send_cmd>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <main+0x13c>
	  {
		  HAL_Delay(50);
 8000dfa:	2032      	movs	r0, #50	; 0x32
 8000dfc:	f000 ff10 	bl	8001c20 <HAL_Delay>
	  }
	  debug_uart4_write_text("WHO AM I (1): ");debug_uart4_write_int((int)RXData[1]);
 8000e00:	4836      	ldr	r0, [pc, #216]	; (8000edc <main+0x218>)
 8000e02:	f000 f95d 	bl	80010c0 <debug_uart4_write_text>
 8000e06:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000e0a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e0e:	785b      	ldrb	r3, [r3, #1]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f92b 	bl	800106c <debug_uart4_write_int>

	  if(RXData[1] == 0)
 8000e16:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000e1a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d107      	bne.n	8000e34 <main+0x170>
	  {
		  SPI1_ERROR_COUNT++;
 8000e24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e28:	3301      	adds	r3, #1
 8000e2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
		  ERROR_NOTICE = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	  }

	  RXData[1] = 0;
 8000e34:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000e38:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	705a      	strb	r2, [r3, #1]
	  IMU_send_cmd(&IMU2_data, TXData, RXData, length);
 8000e40:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	; 0x1ea
 8000e44:	463a      	mov	r2, r7
 8000e46:	1d39      	adds	r1, r7, #4
 8000e48:	f107 0008 	add.w	r0, r7, #8
 8000e4c:	f7ff fc36 	bl	80006bc <IMU_send_cmd>
	  debug_uart4_write_text("; WHO AM I (2): ");debug_uart4_write_int((int)RXData[1]);
 8000e50:	4823      	ldr	r0, [pc, #140]	; (8000ee0 <main+0x21c>)
 8000e52:	f000 f935 	bl	80010c0 <debug_uart4_write_text>
 8000e56:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000e5a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 f903 	bl	800106c <debug_uart4_write_int>

	  if(RXData[1] == 0)
 8000e66:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000e6a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d107      	bne.n	8000e84 <main+0x1c0>
	  {
		  SPI2_ERROR_COUNT++;
 8000e74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e78:	3301      	adds	r3, #1
 8000e7a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		  ERROR_NOTICE = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	  }

	  if(ERROR_NOTICE == 1)
 8000e84:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d112      	bne.n	8000eb2 <main+0x1ee>
	  {
		  debug_uart4_write_text("  ");debug_uart4_write_int((int)SPI1_ERROR_COUNT);debug_uart4_write_text(" SPI1 errors, ");debug_uart4_write_int((int)SPI2_ERROR_COUNT);debug_uart4_write_text(" SPI2 errors");
 8000e8c:	4815      	ldr	r0, [pc, #84]	; (8000ee4 <main+0x220>)
 8000e8e:	f000 f917 	bl	80010c0 <debug_uart4_write_text>
 8000e92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f8e8 	bl	800106c <debug_uart4_write_int>
 8000e9c:	4812      	ldr	r0, [pc, #72]	; (8000ee8 <main+0x224>)
 8000e9e:	f000 f90f 	bl	80010c0 <debug_uart4_write_text>
 8000ea2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f8e0 	bl	800106c <debug_uart4_write_int>
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <main+0x228>)
 8000eae:	f000 f907 	bl	80010c0 <debug_uart4_write_text>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Debug_send_Tempreture();
 8000eb2:	f000 f8bf 	bl	8001034 <Debug_send_Tempreture>
	  HAL_Delay(100);
 8000eb6:	2064      	movs	r0, #100	; 0x64
 8000eb8:	f000 feb2 	bl	8001c20 <HAL_Delay>
	  RXData[1] = 0;
 8000ebc:	e78c      	b.n	8000dd8 <main+0x114>
 8000ebe:	bf00      	nop
 8000ec0:	240003e8 	.word	0x240003e8
 8000ec4:	40000800 	.word	0x40000800
 8000ec8:	24000264 	.word	0x24000264
 8000ecc:	24000288 	.word	0x24000288
 8000ed0:	58020000 	.word	0x58020000
 8000ed4:	24000310 	.word	0x24000310
 8000ed8:	58020400 	.word	0x58020400
 8000edc:	0800d6f8 	.word	0x0800d6f8
 8000ee0:	0800d708 	.word	0x0800d708
 8000ee4:	0800d71c 	.word	0x0800d71c
 8000ee8:	0800d720 	.word	0x0800d720
 8000eec:	0800d730 	.word	0x0800d730

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	224c      	movs	r2, #76	; 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fb79 	bl	800b5f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00a fb73 	bl	800b5f6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f10:	2002      	movs	r0, #2
 8000f12:	f002 ffb1 	bl	8003e78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f22:	4a2a      	ldr	r2, [pc, #168]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f28:	6193      	str	r3, [r2, #24]
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f36:	bf00      	nop
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f44:	d1f8      	bne.n	8000f38 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	2302      	movs	r3, #2
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000f5c:	2325      	movs	r3, #37	; 0x25
 8000f5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f64:	2305      	movs	r3, #5
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ffb4 	bl	8003eec <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 f8b5 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	233f      	movs	r3, #63	; 0x3f
 8000f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2303      	movs	r3, #3
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fb73 	bl	80046a0 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fc0:	f000 f89a 	bl	80010f8 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3770      	adds	r7, #112	; 0x70
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024800 	.word	0x58024800

08000fd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ae      	sub	sp, #184	; 0xb8
 8000fd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	22b8      	movs	r2, #184	; 0xb8
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00a fb0a 	bl	800b5f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 8000fe2:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000ff2:	2318      	movs	r3, #24
 8000ff4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001002:	23c0      	movs	r3, #192	; 0xc0
 8001004:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	463b      	mov	r3, r7
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fecb 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001028:	f000 f866 	bl	80010f8 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	37b8      	adds	r7, #184	; 0xb8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <Debug_send_Tempreture>:

/* USER CODE BEGIN 4 */
void Debug_send_Tempreture(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	//Digital temperature sensor has to be enabeled before call
	int32_t Temperature;
	  debug_uart4_write_text("\nMCU temp: ");
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <Debug_send_Tempreture+0x2c>)
 800103c:	f000 f840 	bl	80010c0 <debug_uart4_write_text>
	  HAL_DTS_GetTemperature(&hdts, &Temperature);//acquires a sensor reading
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <Debug_send_Tempreture+0x30>)
 8001046:	f002 fcb4 	bl	80039b2 <HAL_DTS_GetTemperature>
	  debug_uart4_write_int((int)Temperature);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f80d 	bl	800106c <debug_uart4_write_int>
	  debug_uart4_write_text("° \n");
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <Debug_send_Tempreture+0x34>)
 8001054:	f000 f834 	bl	80010c0 <debug_uart4_write_text>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800d740 	.word	0x0800d740
 8001064:	24000264 	.word	0x24000264
 8001068:	0800d74c 	.word	0x0800d74c

0800106c <debug_uart4_write_int>:

HAL_StatusTypeDef debug_uart4_write_int(int number)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	//Sends a number over UART
	char temp[15] = {0};
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(temp, "%d", number );
 8001086:	f107 0308 	add.w	r3, r7, #8
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	490a      	ldr	r1, [pc, #40]	; (80010b8 <debug_uart4_write_int+0x4c>)
 800108e:	4618      	mov	r0, r3
 8001090:	f00a fa4e 	bl	800b530 <siprintf>
	if (HAL_UART_Transmit(&huart4, temp, 10, 10000) != HAL_OK)
 8001094:	f107 0108 	add.w	r1, r7, #8
 8001098:	f242 7310 	movw	r3, #10000	; 0x2710
 800109c:	220a      	movs	r2, #10
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <debug_uart4_write_int+0x50>)
 80010a0:	f008 fb30 	bl	8009704 <HAL_UART_Transmit>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <debug_uart4_write_int+0x42>
	  {
	    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <debug_uart4_write_int+0x44>
	  }
	return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	0800d754 	.word	0x0800d754
 80010bc:	24000434 	.word	0x24000434

080010c0 <debug_uart4_write_text>:

HAL_StatusTypeDef debug_uart4_write_text(char *pData)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	//Sends a text message over UART
	if (HAL_UART_Transmit(&huart4, pData, strlen(pData), 10000) != HAL_OK)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff f971 	bl	80003b0 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <debug_uart4_write_text+0x34>)
 80010da:	f008 fb13 	bl	8009704 <HAL_UART_Transmit>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <debug_uart4_write_text+0x28>
	{
	  return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <debug_uart4_write_text+0x2a>
	}
	return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	24000434 	.word	0x24000434

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <Error_Handler+0x8>
	...

08001104 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <MX_SPI1_Init+0xa8>)
 800110c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001110:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800111e:	2207      	movs	r2, #7
 8001120:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001128:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800112c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001134:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800115a:	2200      	movs	r2, #0
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001160:	2200      	movs	r2, #0
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001166:	2200      	movs	r2, #0
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800116c:	2200      	movs	r2, #0
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001178:	2200      	movs	r2, #0
 800117a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800117e:	2200      	movs	r2, #0
 8001180:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001184:	2200      	movs	r2, #0
 8001186:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_SPI1_Init+0xa4>)
 800118a:	2200      	movs	r2, #0
 800118c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001190:	2200      	movs	r2, #0
 8001192:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <MX_SPI1_Init+0xa4>)
 8001196:	f006 f9f5 	bl	8007584 <HAL_SPI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80011a0:	f7ff ffaa 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	24000288 	.word	0x24000288
 80011ac:	40013000 	.word	0x40013000

080011b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011b6:	4a28      	ldr	r2, [pc, #160]	; (8001258 <MX_SPI2_Init+0xa8>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011ca:	2207      	movs	r2, #7
 80011cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011de:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f8:	4b16      	ldr	r3, [pc, #88]	; (8001254 <MX_SPI2_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001206:	2200      	movs	r2, #0
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_SPI2_Init+0xa4>)
 800120c:	2200      	movs	r2, #0
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_SPI2_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_SPI2_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_SPI2_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_SPI2_Init+0xa4>)
 8001242:	f006 f99f 	bl	8007584 <HAL_SPI_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800124c:	f7ff ff54 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000310 	.word	0x24000310
 8001258:	40003800 	.word	0x40003800

0800125c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <HAL_SPI_MspInit+0x100>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12e      	bne.n	80012dc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_SPI_MspInit+0x104>)
 8001280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001284:	4a36      	ldr	r2, [pc, #216]	; (8001360 <HAL_SPI_MspInit+0x104>)
 8001286:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_SPI_MspInit+0x104>)
 8001290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_SPI_MspInit+0x104>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_SPI_MspInit+0x104>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ac:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <HAL_SPI_MspInit+0x104>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GYRO1_SCK_Pin|GYRO1_MISO_Pin|GYRO1_MOSI_Pin;
 80012ba:	23e0      	movs	r3, #224	; 0xe0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4823      	ldr	r0, [pc, #140]	; (8001364 <HAL_SPI_MspInit+0x108>)
 80012d6:	f002 fbe9 	bl	8003aac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012da:	e03b      	b.n	8001354 <HAL_SPI_MspInit+0xf8>
  else if(spiHandle->Instance==SPI2)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_SPI_MspInit+0x10c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d136      	bne.n	8001354 <HAL_SPI_MspInit+0xf8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_SPI_MspInit+0x104>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_SPI_MspInit+0x104>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_SPI_MspInit+0x104>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_SPI_MspInit+0x104>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_SPI_MspInit+0x104>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_SPI_MspInit+0x104>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO2_MOSI_Pin|GYRO2_MISO_Pin|GYRO2_SCK_Pin;
 8001322:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001334:	2305      	movs	r3, #5
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <HAL_SPI_MspInit+0x110>)
 8001340:	f002 fbb4 	bl	8003aac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2024      	movs	r0, #36	; 0x24
 800134a:	f001 ffd0 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800134e:	2024      	movs	r0, #36	; 0x24
 8001350:	f001 ffe7 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40013000 	.word	0x40013000
 8001360:	58024400 	.word	0x58024400
 8001364:	58020000 	.word	0x58020000
 8001368:	40003800 	.word	0x40003800
 800136c:	58020400 	.word	0x58020400

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x30>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x30>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58024400 	.word	0x58024400

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 fbf6 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Druck_INT_Pin);
 80013fc:	2010      	movs	r0, #16
 80013fe:	f002 fd16 	bl	8003e2e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT1_Pin);
 800140a:	2080      	movs	r0, #128	; 0x80
 800140c:	f002 fd0f 	bl	8003e2e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <TIM4_IRQHandler+0x10>)
 800141a:	f007 f8cb 	bl	80085b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	240003e8 	.word	0x240003e8

08001428 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800142c:	4802      	ldr	r0, [pc, #8]	; (8001438 <SPI2_IRQHandler+0x10>)
 800142e:	f006 fbe9 	bl	8007c04 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	24000310 	.word	0x24000310

0800143c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_kill>:

int _kill(int pid, int sig)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001456:	f00a f921 	bl	800b69c <__errno>
 800145a:	4603      	mov	r3, r0
 800145c:	2216      	movs	r2, #22
 800145e:	601a      	str	r2, [r3, #0]
  return -1;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_exit>:

void _exit (int status)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ffe7 	bl	800144c <_kill>
  while (1) {}    /* Make sure we hang here */
 800147e:	e7fe      	b.n	800147e <_exit+0x12>

08001480 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
  }

  return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x12>
  }
  return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_close>:

int _close(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	605a      	str	r2, [r3, #4]
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f00a f886 	bl	800b69c <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	24050000 	.word	0x24050000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	24000398 	.word	0x24000398
 80015c4:	24000618 	.word	0x24000618

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <SystemInit+0xd0>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a31      	ldr	r2, [pc, #196]	; (8001698 <SystemInit+0xd0>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <SystemInit+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d807      	bhi.n	80015f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015e8:	4b2c      	ldr	r3, [pc, #176]	; (800169c <SystemInit+0xd4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 030f 	bic.w	r3, r3, #15
 80015f0:	4a2a      	ldr	r2, [pc, #168]	; (800169c <SystemInit+0xd4>)
 80015f2:	f043 0307 	orr.w	r3, r3, #7
 80015f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SystemInit+0xd8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <SystemInit+0xd8>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <SystemInit+0xd8>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <SystemInit+0xd8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <SystemInit+0xd8>)
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <SystemInit+0xdc>)
 8001612:	4013      	ands	r3, r2
 8001614:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <SystemInit+0xd4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <SystemInit+0xd4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 030f 	bic.w	r3, r3, #15
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <SystemInit+0xd4>)
 800162c:	f043 0307 	orr.w	r3, r3, #7
 8001630:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <SystemInit+0xd8>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <SystemInit+0xd8>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <SystemInit+0xd8>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <SystemInit+0xd8>)
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <SystemInit+0xe0>)
 8001648:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <SystemInit+0xd8>)
 800164c:	4a17      	ldr	r2, [pc, #92]	; (80016ac <SystemInit+0xe4>)
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <SystemInit+0xd8>)
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <SystemInit+0xe8>)
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <SystemInit+0xd8>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <SystemInit+0xd8>)
 800165e:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <SystemInit+0xe8>)
 8001660:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <SystemInit+0xd8>)
 8001664:	2200      	movs	r2, #0
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <SystemInit+0xd8>)
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <SystemInit+0xe8>)
 800166c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <SystemInit+0xd8>)
 8001670:	2200      	movs	r2, #0
 8001672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SystemInit+0xd8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <SystemInit+0xd8>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <SystemInit+0xd8>)
 8001682:	2200      	movs	r2, #0
 8001684:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <SystemInit+0xec>)
 8001688:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800168c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00
 800169c:	52002000 	.word	0x52002000
 80016a0:	58024400 	.word	0x58024400
 80016a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80016a8:	02020200 	.word	0x02020200
 80016ac:	01ff0000 	.word	0x01ff0000
 80016b0:	01010280 	.word	0x01010280
 80016b4:	52004000 	.word	0x52004000

080016b8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_TIM3_Init+0x94>)
 80016d8:	4a1d      	ldr	r2, [pc, #116]	; (8001750 <MX_TIM3_Init+0x98>)
 80016da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_TIM3_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_TIM3_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8593;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_TIM3_Init+0x94>)
 80016ea:	f242 1291 	movw	r2, #8593	; 0x2191
 80016ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_TIM3_Init+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_TIM3_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016fc:	4813      	ldr	r0, [pc, #76]	; (800174c <MX_TIM3_Init+0x94>)
 80016fe:	f006 fd84 	bl	800820a <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001708:	f7ff fcf6 	bl	80010f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_TIM3_Init+0x94>)
 800171a:	f007 f97f 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001724:	f7ff fce8 	bl	80010f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_TIM3_Init+0x94>)
 8001736:	f007 fedb 	bl	80094f0 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001740:	f7ff fcda 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2400039c 	.word	0x2400039c
 8001750:	40000400 	.word	0x40000400

08001754 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001774:	463b      	mov	r3, r7
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM4_Init+0xe8>)
 8001788:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <MX_TIM4_Init+0xec>)
 800178a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM4_Init+0xe8>)
 800178e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001792:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <MX_TIM4_Init+0xe8>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 13749;
 800179a:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM4_Init+0xe8>)
 800179c:	f243 52b5 	movw	r2, #13749	; 0x35b5
 80017a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM4_Init+0xe8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <MX_TIM4_Init+0xe8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ae:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_TIM4_Init+0xe8>)
 80017b0:	f006 fd2b 	bl	800820a <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80017ba:	f7ff fc9d 	bl	80010f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_TIM4_Init+0xe8>)
 80017cc:	f007 f926 	bl	8008a1c <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80017d6:	f7ff fc8f 	bl	80010f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017da:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM4_Init+0xe8>)
 80017dc:	f006 fd6c 	bl	80082b8 <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80017e6:	f7ff fc87 	bl	80010f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_TIM4_Init+0xe8>)
 80017fa:	f007 fe79 	bl	80094f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001804:	f7ff fc78 	bl	80010f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM4_Init+0xe8>)
 8001820:	f006 ffe8 	bl	80087f4 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800182a:	f7ff fc65 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM4_Init+0xe8>)
 8001830:	f000 f848 	bl	80018c4 <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	240003e8 	.word	0x240003e8
 8001840:	40000800 	.word	0x40000800

08001844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_TIM_Base_MspInit+0x74>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10f      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 8001868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001874:	e01b      	b.n	80018ae <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM4)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <HAL_TIM_Base_MspInit+0x7c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d116      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 8001882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_TIM_Base_MspInit+0x78>)
 8001892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201e      	movs	r0, #30
 80018a4:	f001 fd23 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018a8:	201e      	movs	r0, #30
 80018aa:	f001 fd3a 	bl	8003322 <HAL_NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40000400 	.word	0x40000400
 80018bc:	58024400 	.word	0x58024400
 80018c0:	40000800 	.word	0x40000800

080018c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_TIM_MspPostInit+0x6c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d11f      	bne.n	8001926 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_TIM_MspPostInit+0x70>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0x70>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_TIM_MspPostInit+0x70>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = USER_LED_Pin;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_TIM_MspPostInit+0x74>)
 8001922:	f002 f8c3 	bl	8003aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40000800 	.word	0x40000800
 8001934:	58024400 	.word	0x58024400
 8001938:	58020c00 	.word	0x58020c00

0800193c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <MX_UART4_Init+0x90>)
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <MX_UART4_Init+0x94>)
 8001944:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <MX_UART4_Init+0x90>)
 8001948:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <MX_UART4_Init+0x98>)
 800194a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <MX_UART4_Init+0x90>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <MX_UART4_Init+0x90>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <MX_UART4_Init+0x90>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <MX_UART4_Init+0x90>)
 8001960:	220c      	movs	r2, #12
 8001962:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <MX_UART4_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <MX_UART4_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <MX_UART4_Init+0x90>)
 8001972:	2200      	movs	r2, #0
 8001974:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <MX_UART4_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <MX_UART4_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001982:	4812      	ldr	r0, [pc, #72]	; (80019cc <MX_UART4_Init+0x90>)
 8001984:	f007 fe6e 	bl	8009664 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 800198e:	f7ff fbb3 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001992:	2100      	movs	r1, #0
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_UART4_Init+0x90>)
 8001996:	f009 f802 	bl	800a99e <HAL_UARTEx_SetTxFifoThreshold>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 80019a0:	f7ff fbaa 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <MX_UART4_Init+0x90>)
 80019a8:	f009 f837 	bl	800aa1a <HAL_UARTEx_SetRxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 80019b2:	f7ff fba1 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_UART4_Init+0x90>)
 80019b8:	f008 ffb8 	bl	800a92c <HAL_UARTEx_DisableFifoMode>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 80019c2:	f7ff fb99 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	24000434 	.word	0x24000434
 80019d0:	40004c00 	.word	0x40004c00
 80019d4:	0007a120 	.word	0x0007a120

080019d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0b8      	sub	sp, #224	; 0xe0
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	22b8      	movs	r2, #184	; 0xb8
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f009 fdfc 	bl	800b5f6 <memset>
  if(uartHandle->Instance==UART4)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_UART_MspInit+0xc4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d145      	bne.n	8001a94 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a08:	f04f 0202 	mov.w	r2, #2
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 f9ca 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a2a:	f7ff fb65 	bl	80010f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a34:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a54:	f043 0308 	orr.w	r3, r3, #8
 8001a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0xc8>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a82:	2308      	movs	r3, #8
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_UART_MspInit+0xcc>)
 8001a90:	f002 f80c 	bl	8003aac <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a94:	bf00      	nop
 8001a96:	37e0      	adds	r7, #224	; 0xe0
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40004c00 	.word	0x40004c00
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	58020c00 	.word	0x58020c00

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aac:	f7ff fd8c 	bl	80015c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f009 fde7 	bl	800b6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7ff f8f3 	bl	8000cc4 <main>
  bx  lr
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ae4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ae8:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001aec:	0800db14 	.word	0x0800db14
  ldr r2, =_sbss
 8001af0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001af4:	24000618 	.word	0x24000618

08001af8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC3_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b02:	2003      	movs	r0, #3
 8001b04:	f001 fbe8 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b08:	f002 ff80 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_Init+0x68>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4913      	ldr	r1, [pc, #76]	; (8001b68 <HAL_Init+0x6c>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_Init+0x68>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_Init+0x6c>)
 8001b30:	5cd3      	ldrb	r3, [r2, r3]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <HAL_Init+0x70>)
 8001b3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <HAL_Init+0x74>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f814 	bl	8001b74 <HAL_InitTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e002      	b.n	8001b5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b56:	f7ff fc0b 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58024400 	.word	0x58024400
 8001b68:	0800d75c 	.word	0x0800d75c
 8001b6c:	24000004 	.word	0x24000004
 8001b70:	24000000 	.word	0x24000000

08001b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_InitTick+0x60>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e021      	b.n	8001bcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_InitTick+0x64>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_InitTick+0x60>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fbcd 	bl	800333e <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f001 fb97 	bl	80032ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <HAL_InitTick+0x68>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2400000c 	.word	0x2400000c
 8001bd8:	24000000 	.word	0x24000000
 8001bdc:	24000008 	.word	0x24000008

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2400000c 	.word	0x2400000c
 8001c04:	240004c8 	.word	0x240004c8

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	240004c8 	.word	0x240004c8

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2400000c 	.word	0x2400000c

08001c68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3360      	adds	r3, #96	; 0x60
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <LL_ADC_SetOffset+0x60>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10b      	bne.n	8001d0c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d0a:	e00b      	b.n	8001d24 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	58026000 	.word	0x58026000

08001d34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3360      	adds	r3, #96	; 0x60
 8001d42:	461a      	mov	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	611a      	str	r2, [r3, #16]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3360      	adds	r3, #96	; 0x60
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	58026000 	.word	0x58026000

08001dd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <LL_ADC_SetOffsetSaturation+0x40>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d10e      	bne.n	8001e0a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3360      	adds	r3, #96	; 0x60
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	58026000 	.word	0x58026000

08001e1c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <LL_ADC_SetOffsetSign+0x40>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10e      	bne.n	8001e4e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3360      	adds	r3, #96	; 0x60
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	58026000 	.word	0x58026000

08001e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3360      	adds	r3, #96	; 0x60
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <LL_ADC_SetOffsetState+0x50>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001e92:	e007      	b.n	8001ea4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	601a      	str	r2, [r3, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	58026000 	.word	0x58026000

08001eb4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3330      	adds	r3, #48	; 0x30
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	4413      	add	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	211f      	movs	r1, #31
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	f003 011f 	and.w	r1, r3, #31
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	431a      	orrs	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f00:	bf00      	nop
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0e5b      	lsrs	r3, r3, #25
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	0d1b      	lsrs	r3, r3, #20
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2107      	movs	r1, #7
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	0d1b      	lsrs	r3, r3, #20
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f56:	bf00      	nop
 8001f58:	371c      	adds	r7, #28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <LL_ADC_SetChannelSingleDiff+0x78>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d115      	bne.n	8001fa4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0318 	and.w	r3, r3, #24
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	400b      	ands	r3, r1
 8001f96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001fa2:	e014      	b.n	8001fce <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0318 	and.w	r3, r3, #24
 8001fba:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001fbc:	40d9      	lsrs	r1, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	400b      	ands	r3, r1
 8001fc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	58026000 	.word	0x58026000
 8001fe0:	000fffff 	.word	0x000fffff

08001fe4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6093      	str	r3, [r2, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	5fffffc0 	.word	0x5fffffc0

08002008 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d101      	bne.n	8002022 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <LL_ADC_EnableInternalRegulator+0x24>)
 800203e:	4013      	ands	r3, r2
 8002040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	6fffffc0 	.word	0x6fffffc0

08002058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800206c:	d101      	bne.n	8002072 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <LL_ADC_IsEnabled+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_IsEnabled+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d101      	bne.n	80020be <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d101      	bne.n	80020e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1ee      	b.n	80024ec <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7fe fc95 	bl	8000a4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff67 	bl	8002008 <LL_ADC_IsDeepPowerDownEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff4d 	bl	8001fe4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff82 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d114      	bne.n	8002184 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff66 	bl	8002030 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002164:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <HAL_ADC_Init+0x2ac>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	4a8e      	ldr	r2, [pc, #568]	; (80023a4 <HAL_ADC_Init+0x2b0>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002176:	e002      	b.n	800217e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff65 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff76 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 80021ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 8188 	bne.w	80024da <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 8184 	bne.w	80024da <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff4a 	bl	8002080 <LL_ADC_IsEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d136      	bne.n	8002260 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6c      	ldr	r2, [pc, #432]	; (80023a8 <HAL_ADC_Init+0x2b4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d004      	beq.n	8002206 <HAL_ADC_Init+0x112>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_ADC_Init+0x2b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10e      	bne.n	8002224 <HAL_ADC_Init+0x130>
 8002206:	4868      	ldr	r0, [pc, #416]	; (80023a8 <HAL_ADC_Init+0x2b4>)
 8002208:	f7ff ff3a 	bl	8002080 <LL_ADC_IsEnabled>
 800220c:	4604      	mov	r4, r0
 800220e:	4867      	ldr	r0, [pc, #412]	; (80023ac <HAL_ADC_Init+0x2b8>)
 8002210:	f7ff ff36 	bl	8002080 <LL_ADC_IsEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	4323      	orrs	r3, r4
 8002218:	2b00      	cmp	r3, #0
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e008      	b.n	8002236 <HAL_ADC_Init+0x142>
 8002224:	4862      	ldr	r0, [pc, #392]	; (80023b0 <HAL_ADC_Init+0x2bc>)
 8002226:	f7ff ff2b 	bl	8002080 <LL_ADC_IsEnabled>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a5a      	ldr	r2, [pc, #360]	; (80023a8 <HAL_ADC_Init+0x2b4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_Init+0x15a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_ADC_Init+0x2b8>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x15e>
 800224e:	4a59      	ldr	r2, [pc, #356]	; (80023b4 <HAL_ADC_Init+0x2c0>)
 8002250:	e000      	b.n	8002254 <HAL_ADC_Init+0x160>
 8002252:	4a59      	ldr	r2, [pc, #356]	; (80023b8 <HAL_ADC_Init+0x2c4>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f7ff fd04 	bl	8001c68 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_ADC_Init+0x2bc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d129      	bne.n	80022be <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002274:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800227a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b08      	cmp	r3, #8
 8002282:	d013      	beq.n	80022ac <HAL_ADC_Init+0x1b8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	d00d      	beq.n	80022a8 <HAL_ADC_Init+0x1b4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b1c      	cmp	r3, #28
 8002292:	d007      	beq.n	80022a4 <HAL_ADC_Init+0x1b0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b18      	cmp	r3, #24
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_Init+0x1ac>
 800229c:	2318      	movs	r3, #24
 800229e:	e006      	b.n	80022ae <HAL_ADC_Init+0x1ba>
 80022a0:	2300      	movs	r3, #0
 80022a2:	e004      	b.n	80022ae <HAL_ADC_Init+0x1ba>
 80022a4:	2310      	movs	r3, #16
 80022a6:	e002      	b.n	80022ae <HAL_ADC_Init+0x1ba>
 80022a8:	2308      	movs	r3, #8
 80022aa:	e000      	b.n	80022ae <HAL_ADC_Init+0x1ba>
 80022ac:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80022ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	e00e      	b.n	80022dc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7e5b      	ldrb	r3, [r3, #25]
 80022c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80022ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	3b01      	subs	r3, #1
 80022ec:	045b      	lsls	r3, r3, #17
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_ADC_Init+0x2bc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d115      	bne.n	8002346 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_ADC_Init+0x2c8>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	611a      	str	r2, [r3, #16]
 8002344:	e009      	b.n	800235a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_ADC_Init+0x2cc>)
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	430b      	orrs	r3, r1
 8002358:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fea1 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 8002364:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff feae 	bl	80020cc <LL_ADC_INJ_IsConversionOngoing>
 8002370:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 808e 	bne.w	8002496 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 808a 	bne.w	8002496 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_ADC_Init+0x2bc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d11b      	bne.n	80023c4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e1b      	ldrb	r3, [r3, #24]
 8002390:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002398:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e018      	b.n	80023d2 <HAL_ADC_Init+0x2de>
 80023a0:	24000000 	.word	0x24000000
 80023a4:	053e2d63 	.word	0x053e2d63
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022100 	.word	0x40022100
 80023b0:	58026000 	.word	0x58026000
 80023b4:	40022300 	.word	0x40022300
 80023b8:	58026300 	.word	0x58026300
 80023bc:	fff04007 	.word	0xfff04007
 80023c0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7e1b      	ldrb	r3, [r3, #24]
 80023c8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_ADC_Init+0x400>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	69b9      	ldr	r1, [r7, #24]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d137      	bne.n	8002460 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <HAL_ADC_Init+0x404>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d116      	bne.n	800242e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_ADC_Init+0x408>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800241e:	430a      	orrs	r2, r1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	e020      	b.n	8002470 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_ADC_Init+0x40c>)
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800243c:	3a01      	subs	r2, #1
 800243e:	0411      	lsls	r1, r2, #16
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002450:	430a      	orrs	r2, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0201 	orr.w	r2, r2, #1
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	e007      	b.n	8002470 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_ADC_Init+0x404>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d002      	beq.n	8002496 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fd63 	bl	8002f5c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10c      	bne.n	80024b8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	f023 010f 	bic.w	r1, r3, #15
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
 80024b6:	e007      	b.n	80024c8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 020f 	bic.w	r2, r2, #15
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	f023 0303 	bic.w	r3, r3, #3
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	661a      	str	r2, [r3, #96]	; 0x60
 80024d8:	e007      	b.n	80024ea <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	ffffbffc 	.word	0xffffbffc
 80024f8:	58026000 	.word	0x58026000
 80024fc:	fc00f81f 	.word	0xfc00f81f
 8002500:	fc00f81e 	.word	0xfc00f81e

08002504 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b0b9      	sub	sp, #228	; 0xe4
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800251e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4aa9      	ldr	r2, [pc, #676]	; (80027cc <HAL_ADC_ConfigChannel+0x2c8>)
 8002526:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d102      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x34>
 8002532:	2302      	movs	r3, #2
 8002534:	f000 bcfa 	b.w	8002f2c <HAL_ADC_ConfigChannel+0xa28>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fdae 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 84de 	bne.w	8002f0e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a9e      	ldr	r2, [pc, #632]	; (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d033      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <HAL_ADC_ConfigChannel+0x76>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	e01d      	b.n	80025b6 <HAL_ADC_ConfigChannel+0xb2>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800258e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e004      	b.n	80025ac <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80025a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	69d1      	ldr	r1, [r2, #28]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	f7ff fc6f 	bl	8001eb4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd63 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 80025e0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fd6f 	bl	80020cc <LL_ADC_INJ_IsConversionOngoing>
 80025ee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8270 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 826b 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6819      	ldr	r1, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	461a      	mov	r2, r3
 8002614:	f7ff fc7a 	bl	8001f0c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10d      	bne.n	800263e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800263c:	e032      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x160>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	e01d      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x19c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_ADC_ConfigChannel+0x186>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	e00a      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x19c>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d048      	beq.n	800273e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026bc:	f7ff fb08 	bl	8001cd0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a42      	ldr	r2, [pc, #264]	; (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d119      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6919      	ldr	r1, [r3, #16]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f7ff fba0 	bl	8001e1c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1f0>
 80026ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x1f2>
 80026f4:	2300      	movs	r3, #0
 80026f6:	461a      	mov	r2, r3
 80026f8:	f7ff fb6e 	bl	8001dd8 <LL_ADC_SetOffsetSaturation>
 80026fc:	e1ee      	b.n	8002adc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6919      	ldr	r1, [r3, #16]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800270c:	2b01      	cmp	r3, #1
 800270e:	d102      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x212>
 8002710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002714:	e000      	b.n	8002718 <HAL_ADC_ConfigChannel+0x214>
 8002716:	2300      	movs	r3, #0
 8002718:	461a      	mov	r2, r3
 800271a:	f7ff fb3b 	bl	8001d94 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7e1b      	ldrb	r3, [r3, #24]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x230>
 800272e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002732:	e000      	b.n	8002736 <HAL_ADC_ConfigChannel+0x232>
 8002734:	2300      	movs	r3, #0
 8002736:	461a      	mov	r2, r3
 8002738:	f7ff fb12 	bl	8001d60 <LL_ADC_SetDataRightShift>
 800273c:	e1ce      	b.n	8002adc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	f040 8181 	bne.w	8002a4c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff faef 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x272>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fae4 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	e01e      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x2b0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fad9 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800279c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e004      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80027a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x2d4>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	e01e      	b.n	800280a <HAL_ADC_ConfigChannel+0x306>
 80027cc:	47ff0000 	.word	0x47ff0000
 80027d0:	58026000 	.word	0x58026000
 80027d4:	5c001000 	.word	0x5c001000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80027ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80027f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e004      	b.n	800280a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fb22 	bl	8001e60 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fa86 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 8002828:	4603      	mov	r3, r0
 800282a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x344>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa7b 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	f003 021f 	and.w	r2, r3, #31
 8002846:	e01e      	b.n	8002886 <HAL_ADC_ConfigChannel+0x382>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa70 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800286a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800286e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e004      	b.n	8002884 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800287a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_ADC_ConfigChannel+0x39a>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	e018      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x3cc>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80028b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80028ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e004      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80028c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d106      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2200      	movs	r2, #0
 80028da:	2101      	movs	r1, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fabf 	bl	8001e60 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2102      	movs	r1, #2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fa23 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <HAL_ADC_ConfigChannel+0x40a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2102      	movs	r1, #2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fa18 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	0e9b      	lsrs	r3, r3, #26
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	e01e      	b.n	800294c <HAL_ADC_ConfigChannel+0x448>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fa0d 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800292c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e004      	b.n	800294a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x460>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	e014      	b.n	800298e <HAL_ADC_ConfigChannel+0x48a>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e004      	b.n	800298e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	2102      	movs	r1, #2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fa60 	bl	8001e60 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2103      	movs	r1, #3
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f9c4 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x4c8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2103      	movs	r1, #3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f9b9 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	e017      	b.n	80029fc <HAL_ADC_ConfigChannel+0x4f8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2103      	movs	r1, #3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f9ae 	bl	8001d34 <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80029e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029ee:	2320      	movs	r3, #32
 80029f0:	e003      	b.n	80029fa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x510>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	e011      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x534>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a24:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002a30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d14f      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2103      	movs	r1, #3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fa0b 	bl	8001e60 <LL_ADC_SetOffsetState>
 8002a4a:	e047      	b.n	8002adc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a6e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a92:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	069b      	lsls	r3, r3, #26
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d107      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ab6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	069b      	lsls	r3, r3, #26
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d107      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ada:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff facd 	bl	8002080 <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 8219 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f7ff fa32 	bl	8001f64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4aa1      	ldr	r2, [pc, #644]	; (8002d8c <HAL_ADC_ConfigChannel+0x888>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	f040 812e 	bne.w	8002d68 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x630>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	3301      	adds	r3, #1
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	bf94      	ite	ls
 8002b2c:	2301      	movls	r3, #1
 8002b2e:	2300      	movhi	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e019      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x664>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	bf94      	ite	ls
 8002b62:	2301      	movls	r3, #1
 8002b64:	2300      	movhi	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d079      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x684>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	069b      	lsls	r3, r3, #26
 8002b82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b86:	e015      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x6b0>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b98:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	e003      	b.n	8002bac <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	069b      	lsls	r3, r3, #26
 8002bb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x6d0>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2101      	movs	r1, #1
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	e017      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x700>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x726>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	051b      	lsls	r3, r3, #20
 8002c28:	e018      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x758>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e003      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	e07e      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x778>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	3301      	adds	r3, #1
 8002c74:	069b      	lsls	r3, r3, #26
 8002c76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	e015      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x7a4>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002c94:	2320      	movs	r3, #32
 8002c96:	e003      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x7c4>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	e017      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x7f4>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa93 f3a3 	rbit	r3, r3
 8002cd4:	61bb      	str	r3, [r7, #24]
  return result;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e003      	b.n	8002cec <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	3301      	adds	r3, #1
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x820>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b1e      	subs	r3, #30
 8002d1c:	051b      	lsls	r3, r3, #20
 8002d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d22:	e01b      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x858>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	60fb      	str	r3, [r7, #12]
  return result;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	e003      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 021f 	and.w	r2, r3, #31
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	3b1e      	subs	r3, #30
 8002d56:	051b      	lsls	r3, r3, #20
 8002d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	4619      	mov	r1, r3
 8002d64:	f7ff f8d2 	bl	8001f0c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f280 80d7 	bge.w	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_ADC_ConfigChannel+0x88c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_ADC_ConfigChannel+0x882>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_ADC_ConfigChannel+0x890>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x898>
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_ADC_ConfigChannel+0x894>)
 8002d88:	e009      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x89a>
 8002d8a:	bf00      	nop
 8002d8c:	47ff0000 	.word	0x47ff0000
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022100 	.word	0x40022100
 8002d98:	40022300 	.word	0x40022300
 8002d9c:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_ADC_ConfigChannel+0xa30>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe ff88 	bl	8001cb4 <LL_ADC_GetCommonPathInternalCh>
 8002da4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a62      	ldr	r2, [pc, #392]	; (8002f38 <HAL_ADC_ConfigChannel+0xa34>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_ADC_ConfigChannel+0x8b8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_ADC_ConfigChannel+0xa38>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d10e      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x8d6>
 8002dbc:	485e      	ldr	r0, [pc, #376]	; (8002f38 <HAL_ADC_ConfigChannel+0xa34>)
 8002dbe:	f7ff f95f 	bl	8002080 <LL_ADC_IsEnabled>
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	485d      	ldr	r0, [pc, #372]	; (8002f3c <HAL_ADC_ConfigChannel+0xa38>)
 8002dc6:	f7ff f95b 	bl	8002080 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4323      	orrs	r3, r4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	e008      	b.n	8002dec <HAL_ADC_ConfigChannel+0x8e8>
 8002dda:	4859      	ldr	r0, [pc, #356]	; (8002f40 <HAL_ADC_ConfigChannel+0xa3c>)
 8002ddc:	f7ff f950 	bl	8002080 <LL_ADC_IsEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8084 	beq.w	8002efa <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a53      	ldr	r2, [pc, #332]	; (8002f44 <HAL_ADC_ConfigChannel+0xa40>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d132      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x95e>
 8002dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12c      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4c      	ldr	r2, [pc, #304]	; (8002f40 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f040 8086 	bne.w	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a47      	ldr	r2, [pc, #284]	; (8002f38 <HAL_ADC_ConfigChannel+0xa34>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x924>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_ADC_ConfigChannel+0xa38>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x928>
 8002e28:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <HAL_ADC_ConfigChannel+0xa44>)
 8002e2a:	e000      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x92a>
 8002e2c:	4a41      	ldr	r2, [pc, #260]	; (8002f34 <HAL_ADC_ConfigChannel+0xa30>)
 8002e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7fe ff28 	bl	8001c8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_ADC_ConfigChannel+0xa48>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	4a42      	ldr	r2, [pc, #264]	; (8002f50 <HAL_ADC_ConfigChannel+0xa4c>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e52:	e002      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f9      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e60:	e05e      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <HAL_ADC_ConfigChannel+0xa50>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d120      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x9aa>
 8002e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11a      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a30      	ldr	r2, [pc, #192]	; (8002f40 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d14e      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a2c      	ldr	r2, [pc, #176]	; (8002f38 <HAL_ADC_ConfigChannel+0xa34>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_ADC_ConfigChannel+0x992>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <HAL_ADC_ConfigChannel+0xa38>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x996>
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_ADC_ConfigChannel+0xa44>)
 8002e98:	e000      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x998>
 8002e9a:	4a26      	ldr	r2, [pc, #152]	; (8002f34 <HAL_ADC_ConfigChannel+0xa30>)
 8002e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f7fe fef1 	bl	8001c8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eac:	e038      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_ADC_ConfigChannel+0xa54>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d133      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
 8002eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d12d      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <HAL_ADC_ConfigChannel+0xa3c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d128      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_ADC_ConfigChannel+0xa34>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x9de>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_ADC_ConfigChannel+0xa38>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADC_ConfigChannel+0x9e2>
 8002ee2:	4a19      	ldr	r2, [pc, #100]	; (8002f48 <HAL_ADC_ConfigChannel+0xa44>)
 8002ee4:	e000      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x9e4>
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_ADC_ConfigChannel+0xa30>)
 8002ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7fe fecb 	bl	8001c8e <LL_ADC_SetCommonPathInternalCh>
 8002ef8:	e012      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	f043 0220 	orr.w	r2, r3, #32
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002f0c:	e008      	b.n	8002f20 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002f28:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	37e4      	adds	r7, #228	; 0xe4
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd90      	pop	{r4, r7, pc}
 8002f34:	58026300 	.word	0x58026300
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40022100 	.word	0x40022100
 8002f40:	58026000 	.word	0x58026000
 8002f44:	c7520000 	.word	0xc7520000
 8002f48:	40022300 	.word	0x40022300
 8002f4c:	24000000 	.word	0x24000000
 8002f50:	053e2d63 	.word	0x053e2d63
 8002f54:	c3210000 	.word	0xc3210000
 8002f58:	cb840000 	.word	0xcb840000

08002f5c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6c      	ldr	r2, [pc, #432]	; (800311c <ADC_ConfigureBoostMode+0x1c0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <ADC_ConfigureBoostMode+0x1c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6b      	ldr	r2, [pc, #428]	; (8003120 <ADC_ConfigureBoostMode+0x1c4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d109      	bne.n	8002f8c <ADC_ConfigureBoostMode+0x30>
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <ADC_ConfigureBoostMode+0x1c8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e008      	b.n	8002f9e <ADC_ConfigureBoostMode+0x42>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <ADC_ConfigureBoostMode+0x1cc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01c      	beq.n	8002fdc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fa2:	f001 fead 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8002fa6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb0:	d010      	beq.n	8002fd4 <ADC_ConfigureBoostMode+0x78>
 8002fb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb6:	d873      	bhi.n	80030a0 <ADC_ConfigureBoostMode+0x144>
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d002      	beq.n	8002fc4 <ADC_ConfigureBoostMode+0x68>
 8002fbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc2:	d16d      	bne.n	80030a0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
        break;
 8002fd2:	e068      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	60fb      	str	r3, [r7, #12]
        break;
 8002fda:	e064      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fdc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	f003 f888 	bl	80060f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fe8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ff2:	d051      	beq.n	8003098 <ADC_ConfigureBoostMode+0x13c>
 8002ff4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ff8:	d854      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 8002ffa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002ffe:	d047      	beq.n	8003090 <ADC_ConfigureBoostMode+0x134>
 8003000:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003004:	d84e      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 8003006:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800300a:	d03d      	beq.n	8003088 <ADC_ConfigureBoostMode+0x12c>
 800300c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003010:	d848      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 8003012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003016:	d033      	beq.n	8003080 <ADC_ConfigureBoostMode+0x124>
 8003018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301c:	d842      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 800301e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003022:	d029      	beq.n	8003078 <ADC_ConfigureBoostMode+0x11c>
 8003024:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003028:	d83c      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 800302a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800302e:	d01a      	beq.n	8003066 <ADC_ConfigureBoostMode+0x10a>
 8003030:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003034:	d836      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 8003036:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800303a:	d014      	beq.n	8003066 <ADC_ConfigureBoostMode+0x10a>
 800303c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003040:	d830      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d00e      	beq.n	8003066 <ADC_ConfigureBoostMode+0x10a>
 8003048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304c:	d82a      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 800304e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003052:	d008      	beq.n	8003066 <ADC_ConfigureBoostMode+0x10a>
 8003054:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003058:	d824      	bhi.n	80030a4 <ADC_ConfigureBoostMode+0x148>
 800305a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305e:	d002      	beq.n	8003066 <ADC_ConfigureBoostMode+0x10a>
 8003060:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003064:	d11e      	bne.n	80030a4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	60fb      	str	r3, [r7, #12]
        break;
 8003076:	e016      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	60fb      	str	r3, [r7, #12]
        break;
 800307e:	e012      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	60fb      	str	r3, [r7, #12]
        break;
 8003086:	e00e      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	60fb      	str	r3, [r7, #12]
        break;
 800308e:	e00a      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	09db      	lsrs	r3, r3, #7
 8003094:	60fb      	str	r3, [r7, #12]
        break;
 8003096:	e006      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	60fb      	str	r3, [r7, #12]
        break;
 800309e:	e002      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80030a4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a1f      	ldr	r2, [pc, #124]	; (800312c <ADC_ConfigureBoostMode+0x1d0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d808      	bhi.n	80030c6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80030c4:	e025      	b.n	8003112 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a19      	ldr	r2, [pc, #100]	; (8003130 <ADC_ConfigureBoostMode+0x1d4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d80a      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	e016      	b.n	8003112 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <ADC_ConfigureBoostMode+0x1d8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d80a      	bhi.n	8003102 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	609a      	str	r2, [r3, #8]
}
 8003100:	e007      	b.n	8003112 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003110:	609a      	str	r2, [r3, #8]
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40022100 	.word	0x40022100
 8003124:	40022300 	.word	0x40022300
 8003128:	58026300 	.word	0x58026300
 800312c:	005f5e10 	.word	0x005f5e10
 8003130:	00bebc20 	.word	0x00bebc20
 8003134:	017d7840 	.word	0x017d7840

08003138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <__NVIC_SetPriorityGrouping+0x40>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <__NVIC_SetPriorityGrouping+0x44>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x40>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00
 800317c:	05fa0000 	.word	0x05fa0000

08003180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003184:	4b04      	ldr	r3, [pc, #16]	; (8003198 <__NVIC_GetPriorityGrouping+0x18>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	0a1b      	lsrs	r3, r3, #8
 800318a:	f003 0307 	and.w	r3, r3, #7
}
 800318e:	4618      	mov	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db0b      	blt.n	80031c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	f003 021f 	and.w	r2, r3, #31
 80031b4:	4907      	ldr	r1, [pc, #28]	; (80031d4 <__NVIC_EnableIRQ+0x38>)
 80031b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2001      	movs	r0, #1
 80031be:	fa00 f202 	lsl.w	r2, r0, r2
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000e100 	.word	0xe000e100

080031d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	6039      	str	r1, [r7, #0]
 80031e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db0a      	blt.n	8003202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	490c      	ldr	r1, [pc, #48]	; (8003224 <__NVIC_SetPriority+0x4c>)
 80031f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f6:	0112      	lsls	r2, r2, #4
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	440b      	add	r3, r1
 80031fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003200:	e00a      	b.n	8003218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4908      	ldr	r1, [pc, #32]	; (8003228 <__NVIC_SetPriority+0x50>)
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	3b04      	subs	r3, #4
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	440b      	add	r3, r1
 8003216:	761a      	strb	r2, [r3, #24]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322c:	b480      	push	{r7}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f1c3 0307 	rsb	r3, r3, #7
 8003246:	2b04      	cmp	r3, #4
 8003248:	bf28      	it	cs
 800324a:	2304      	movcs	r3, #4
 800324c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3304      	adds	r3, #4
 8003252:	2b06      	cmp	r3, #6
 8003254:	d902      	bls.n	800325c <NVIC_EncodePriority+0x30>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3b03      	subs	r3, #3
 800325a:	e000      	b.n	800325e <NVIC_EncodePriority+0x32>
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	f04f 32ff 	mov.w	r2, #4294967295
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	401a      	ands	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003274:	f04f 31ff 	mov.w	r1, #4294967295
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	43d9      	mvns	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	4313      	orrs	r3, r2
         );
}
 8003286:	4618      	mov	r0, r3
 8003288:	3724      	adds	r7, #36	; 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f7ff ff8e 	bl	80031d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff29 	bl	8003138 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff40 	bl	8003180 <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff90 	bl	800322c <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5f 	bl	80031d8 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff33 	bl	800319c <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa4 	bl	8003294 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e237      	b.n	80037da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d004      	beq.n	8003380 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e22c      	b.n	80037da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a5c      	ldr	r2, [pc, #368]	; (80034f8 <HAL_DMA_Abort_IT+0x1a0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d04a      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a5b      	ldr	r2, [pc, #364]	; (80034fc <HAL_DMA_Abort_IT+0x1a4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d045      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a59      	ldr	r2, [pc, #356]	; (8003500 <HAL_DMA_Abort_IT+0x1a8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d040      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_DMA_Abort_IT+0x1ac>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d03b      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_DMA_Abort_IT+0x1b0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d036      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_DMA_Abort_IT+0x1b4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d031      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a53      	ldr	r2, [pc, #332]	; (8003510 <HAL_DMA_Abort_IT+0x1b8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02c      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a52      	ldr	r2, [pc, #328]	; (8003514 <HAL_DMA_Abort_IT+0x1bc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d027      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a50      	ldr	r2, [pc, #320]	; (8003518 <HAL_DMA_Abort_IT+0x1c0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d022      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a4f      	ldr	r2, [pc, #316]	; (800351c <HAL_DMA_Abort_IT+0x1c4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d01d      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_DMA_Abort_IT+0x1c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d018      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_DMA_Abort_IT+0x1cc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d013      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <HAL_DMA_Abort_IT+0x1d0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00e      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a49      	ldr	r2, [pc, #292]	; (800352c <HAL_DMA_Abort_IT+0x1d4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a47      	ldr	r2, [pc, #284]	; (8003530 <HAL_DMA_Abort_IT+0x1d8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_DMA_Abort_IT+0xc8>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a46      	ldr	r2, [pc, #280]	; (8003534 <HAL_DMA_Abort_IT+0x1dc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_DMA_Abort_IT+0xcc>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_DMA_Abort_IT+0xce>
 8003424:	2300      	movs	r3, #0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8086 	beq.w	8003538 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2204      	movs	r2, #4
 8003430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <HAL_DMA_Abort_IT+0x1a0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2e      	ldr	r2, [pc, #184]	; (80034fc <HAL_DMA_Abort_IT+0x1a4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <HAL_DMA_Abort_IT+0x1a8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_DMA_Abort_IT+0x1ac>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_DMA_Abort_IT+0x1b0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_DMA_Abort_IT+0x1b4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a26      	ldr	r2, [pc, #152]	; (8003510 <HAL_DMA_Abort_IT+0x1b8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a25      	ldr	r2, [pc, #148]	; (8003514 <HAL_DMA_Abort_IT+0x1bc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a23      	ldr	r2, [pc, #140]	; (8003518 <HAL_DMA_Abort_IT+0x1c0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_DMA_Abort_IT+0x1c4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a20      	ldr	r2, [pc, #128]	; (8003520 <HAL_DMA_Abort_IT+0x1c8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_DMA_Abort_IT+0x1cc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_DMA_Abort_IT+0x1d0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_DMA_Abort_IT+0x1d4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_DMA_Abort_IT+0x1d8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_Abort_IT+0x17c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a19      	ldr	r2, [pc, #100]	; (8003534 <HAL_DMA_Abort_IT+0x1dc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <HAL_DMA_Abort_IT+0x18e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e178      	b.n	80037d8 <HAL_DMA_Abort_IT+0x480>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e16f      	b.n	80037d8 <HAL_DMA_Abort_IT+0x480>
 80034f8:	40020010 	.word	0x40020010
 80034fc:	40020028 	.word	0x40020028
 8003500:	40020040 	.word	0x40020040
 8003504:	40020058 	.word	0x40020058
 8003508:	40020070 	.word	0x40020070
 800350c:	40020088 	.word	0x40020088
 8003510:	400200a0 	.word	0x400200a0
 8003514:	400200b8 	.word	0x400200b8
 8003518:	40020410 	.word	0x40020410
 800351c:	40020428 	.word	0x40020428
 8003520:	40020440 	.word	0x40020440
 8003524:	40020458 	.word	0x40020458
 8003528:	40020470 	.word	0x40020470
 800352c:	40020488 	.word	0x40020488
 8003530:	400204a0 	.word	0x400204a0
 8003534:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020e 	bic.w	r2, r2, #14
 8003546:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6c      	ldr	r2, [pc, #432]	; (8003700 <HAL_DMA_Abort_IT+0x3a8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04a      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6b      	ldr	r2, [pc, #428]	; (8003704 <HAL_DMA_Abort_IT+0x3ac>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d045      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a69      	ldr	r2, [pc, #420]	; (8003708 <HAL_DMA_Abort_IT+0x3b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d040      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a68      	ldr	r2, [pc, #416]	; (800370c <HAL_DMA_Abort_IT+0x3b4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d03b      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a66      	ldr	r2, [pc, #408]	; (8003710 <HAL_DMA_Abort_IT+0x3b8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d036      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a65      	ldr	r2, [pc, #404]	; (8003714 <HAL_DMA_Abort_IT+0x3bc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d031      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a63      	ldr	r2, [pc, #396]	; (8003718 <HAL_DMA_Abort_IT+0x3c0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02c      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a62      	ldr	r2, [pc, #392]	; (800371c <HAL_DMA_Abort_IT+0x3c4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d027      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_DMA_Abort_IT+0x3c8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5f      	ldr	r2, [pc, #380]	; (8003724 <HAL_DMA_Abort_IT+0x3cc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01d      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a5d      	ldr	r2, [pc, #372]	; (8003728 <HAL_DMA_Abort_IT+0x3d0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a5c      	ldr	r2, [pc, #368]	; (800372c <HAL_DMA_Abort_IT+0x3d4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_DMA_Abort_IT+0x3d8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_DMA_Abort_IT+0x3dc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a57      	ldr	r2, [pc, #348]	; (8003738 <HAL_DMA_Abort_IT+0x3e0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_Abort_IT+0x290>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_DMA_Abort_IT+0x3e4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <HAL_DMA_Abort_IT+0x2a2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e007      	b.n	800360a <HAL_DMA_Abort_IT+0x2b2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a3c      	ldr	r2, [pc, #240]	; (8003700 <HAL_DMA_Abort_IT+0x3a8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d072      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <HAL_DMA_Abort_IT+0x3ac>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d06d      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a39      	ldr	r2, [pc, #228]	; (8003708 <HAL_DMA_Abort_IT+0x3b0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d068      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a37      	ldr	r2, [pc, #220]	; (800370c <HAL_DMA_Abort_IT+0x3b4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d063      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a36      	ldr	r2, [pc, #216]	; (8003710 <HAL_DMA_Abort_IT+0x3b8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d05e      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_DMA_Abort_IT+0x3bc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d059      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_DMA_Abort_IT+0x3c0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d054      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_DMA_Abort_IT+0x3c4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d04f      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <HAL_DMA_Abort_IT+0x3c8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04a      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <HAL_DMA_Abort_IT+0x3cc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d045      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <HAL_DMA_Abort_IT+0x3d0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_DMA_Abort_IT+0x3d4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03b      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_DMA_Abort_IT+0x3d8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d036      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_DMA_Abort_IT+0x3dc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d031      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_DMA_Abort_IT+0x3e0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d02c      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMA_Abort_IT+0x3e4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_DMA_Abort_IT+0x3e8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMA_Abort_IT+0x3ec>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_DMA_Abort_IT+0x3f0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMA_Abort_IT+0x3f4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_DMA_Abort_IT+0x3f8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMA_Abort_IT+0x3fc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_DMA_Abort_IT+0x400>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_Abort_IT+0x3a2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMA_Abort_IT+0x404>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d132      	bne.n	8003760 <HAL_DMA_Abort_IT+0x408>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e031      	b.n	8003762 <HAL_DMA_Abort_IT+0x40a>
 80036fe:	bf00      	nop
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	58025408 	.word	0x58025408
 8003744:	5802541c 	.word	0x5802541c
 8003748:	58025430 	.word	0x58025430
 800374c:	58025444 	.word	0x58025444
 8003750:	58025458 	.word	0x58025458
 8003754:	5802546c 	.word	0x5802546c
 8003758:	58025480 	.word	0x58025480
 800375c:	58025494 	.word	0x58025494
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d028      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003794:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop

080037e4 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e089      	b.n	800390a <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f988 	bl	8000b18 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e075      	b.n	800390a <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e06e      	b.n	800390a <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d108      	bne.n	8003846 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	e00e      	b.n	8003864 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800384e:	d001      	beq.n	8003854 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e05a      	b.n	800390a <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800386c:	d108      	bne.n	8003880 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800388e:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	061a      	lsls	r2, r3, #24
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	b299      	uxth	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	041a      	lsls	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <HAL_DTS_Init+0x130>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	69d1      	ldr	r1, [r2, #28]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	ffff0000 	.word	0xffff0000

08003918 <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03f      	b.n	80039aa <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d138      	bne.n	80039a8 <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 800394e:	f7fe f95b 	bl	8001c08 <HAL_GetTick>
 8003952:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 8003956:	f7fe f957 	bl	8001c08 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d901      	bls.n	8003968 <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e020      	b.n	80039aa <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d1ee      	bne.n	8003956 <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0210 	orr.w	r2, r2, #16
 8003994:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 8003996:	2005      	movs	r0, #5
 8003998:	f7fe f942 	bl	8001c20 <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_DTS_GetTemperature>:
  * @param  Temperature  Temperature in deg C
  * @note This function retrieves latest available measure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_GetTemperature(DTS_HandleTypeDef *hdts, int32_t *Temperature)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  uint32_t samples;
  uint32_t t0_temp;
  uint32_t t0_freq;
  uint32_t ramp_coeff;

  if (hdts->State == HAL_DTS_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d16c      	bne.n	8003aa2 <HAL_DTS_GetTemperature+0xf0>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get the total number of samples */
    samples = (hdts->Instance->DR & DTS_DR_TS1_MFREQ);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	617b      	str	r3, [r7, #20]

    if ((hdts->Init.SamplingTime == 0UL) || (samples == 0UL))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d002      	beq.n	80039e8 <HAL_DTS_GetTemperature+0x36>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_DTS_GetTemperature+0x42>
    {
      hdts->State = HAL_DTS_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e057      	b.n	8003aa4 <HAL_DTS_GetTemperature+0xf2>
    }

    if ((hdts->Init.RefClock) == DTS_REFCLKSEL_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fc:	d108      	bne.n	8003a10 <HAL_DTS_GetTemperature+0x5e>
    {
      freq_meas = (LSE_VALUE * samples) / (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos); /* On Hz */
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	03da      	lsls	r2, r3, #15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e00b      	b.n	8003a28 <HAL_DTS_GetTemperature+0x76>
    }
    else
    {
      freq_meas = (HAL_RCCEx_GetD3PCLK1Freq() * (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos)) / samples; /* On Hz */
 8003a10:	f003 f844 	bl	8006a9c <HAL_RCCEx_GetD3PCLK1Freq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	fb03 f202 	mul.w	r2, r3, r2
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	61fb      	str	r3, [r7, #28]
    }

    /* Read factory settings */
    t0_temp = hdts->Instance->T0VALR1 >> DTS_T0VALR1_TS1_T0_Pos;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	61bb      	str	r3, [r7, #24]

    if (t0_temp == 0UL)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <HAL_DTS_GetTemperature+0x8c>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE1; /* 30 deg C */
 8003a38:	231e      	movs	r3, #30
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e00b      	b.n	8003a56 <HAL_DTS_GetTemperature+0xa4>
    }
    else if (t0_temp == 1UL)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <HAL_DTS_GetTemperature+0x98>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE2; /* 130 deg C */
 8003a44:	2382      	movs	r3, #130	; 0x82
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	e005      	b.n	8003a56 <HAL_DTS_GetTemperature+0xa4>
    }
    else
    {
      hdts->State = HAL_DTS_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e026      	b.n	8003aa4 <HAL_DTS_GetTemperature+0xf2>
    }

    t0_freq = (hdts->Instance->T0VALR1 & DTS_T0VALR1_TS1_FMT0) * 100UL; /* Hz */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2264      	movs	r2, #100	; 0x64
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	613b      	str	r3, [r7, #16]

    ramp_coeff = hdts->Instance->RAMPVALR & DTS_RAMPVALR_TS1_RAMP_COEFF; /* deg C/Hz */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (ramp_coeff == 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <HAL_DTS_GetTemperature+0xd0>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e010      	b.n	8003aa4 <HAL_DTS_GetTemperature+0xf2>
    }

    /* Figure out the temperature deg C */
    *Temperature = (int32_t)t0_temp + (((int32_t)freq_meas - (int32_t)t0_freq) / (int32_t)ramp_coeff);
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	fb92 f2f3 	sdiv	r2, r2, r3
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	441a      	add	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e000      	b.n	8003aa4 <HAL_DTS_GetTemperature+0xf2>
    return HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	; 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003aba:	4b86      	ldr	r3, [pc, #536]	; (8003cd4 <HAL_GPIO_Init+0x228>)
 8003abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003abe:	e18c      	b.n	8003dda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 817e 	beq.w	8003dd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d005      	beq.n	8003af0 <HAL_GPIO_Init+0x44>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d130      	bne.n	8003b52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b26:	2201      	movs	r2, #1
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0201 	and.w	r2, r3, #1
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d017      	beq.n	8003b8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d123      	bne.n	8003be2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	08da      	lsrs	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3208      	adds	r2, #8
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 0203 	and.w	r2, r3, #3
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80d8 	beq.w	8003dd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c24:	4b2c      	ldr	r3, [pc, #176]	; (8003cd8 <HAL_GPIO_Init+0x22c>)
 8003c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c2a:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <HAL_GPIO_Init+0x22c>)
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_GPIO_Init+0x22c>)
 8003c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_GPIO_Init+0x230>)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	3302      	adds	r3, #2
 8003c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	220f      	movs	r2, #15
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <HAL_GPIO_Init+0x234>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04a      	beq.n	8003d04 <HAL_GPIO_Init+0x258>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <HAL_GPIO_Init+0x238>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d02b      	beq.n	8003cce <HAL_GPIO_Init+0x222>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <HAL_GPIO_Init+0x23c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d025      	beq.n	8003cca <HAL_GPIO_Init+0x21e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1a      	ldr	r2, [pc, #104]	; (8003cec <HAL_GPIO_Init+0x240>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <HAL_GPIO_Init+0x21a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_GPIO_Init+0x244>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x216>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_GPIO_Init+0x248>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x212>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <HAL_GPIO_Init+0x24c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x20e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a16      	ldr	r2, [pc, #88]	; (8003cfc <HAL_GPIO_Init+0x250>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x20a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_GPIO_Init+0x254>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x206>
 8003cae:	2309      	movs	r3, #9
 8003cb0:	e029      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	e027      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e025      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cba:	2306      	movs	r3, #6
 8003cbc:	e023      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	e021      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e01f      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e01d      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e01b      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e019      	b.n	8003d06 <HAL_GPIO_Init+0x25a>
 8003cd2:	bf00      	nop
 8003cd4:	58000080 	.word	0x58000080
 8003cd8:	58024400 	.word	0x58024400
 8003cdc:	58000400 	.word	0x58000400
 8003ce0:	58020000 	.word	0x58020000
 8003ce4:	58020400 	.word	0x58020400
 8003ce8:	58020800 	.word	0x58020800
 8003cec:	58020c00 	.word	0x58020c00
 8003cf0:	58021000 	.word	0x58021000
 8003cf4:	58021400 	.word	0x58021400
 8003cf8:	58021800 	.word	0x58021800
 8003cfc:	58021c00 	.word	0x58021c00
 8003d00:	58022400 	.word	0x58022400
 8003d04:	2300      	movs	r3, #0
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	f002 0203 	and.w	r2, r2, #3
 8003d0c:	0092      	lsls	r2, r2, #2
 8003d0e:	4093      	lsls	r3, r2
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d16:	4938      	ldr	r1, [pc, #224]	; (8003df8 <HAL_GPIO_Init+0x34c>)
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	089b      	lsrs	r3, r3, #2
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f ae6b 	bne.w	8003ac0 <HAL_GPIO_Init+0x14>
  }
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3724      	adds	r7, #36	; 0x24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	58000400 	.word	0x58000400

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e40:	88fb      	ldrh	r3, [r7, #6]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f804 	bl	8003e62 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e01f      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e01d      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	490f      	ldr	r1, [pc, #60]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eb2:	f7fd fea9 	bl	8001c08 <HAL_GetTick>
 8003eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eb8:	e009      	b.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eba:	f7fd fea5 	bl	8001c08 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec8:	d901      	bls.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e007      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d1ee      	bne.n	8003eba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024800 	.word	0x58024800

08003eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e3c8      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8087 	beq.w	800401a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f16:	4b86      	ldr	r3, [pc, #536]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d007      	beq.n	8003f32 <HAL_RCC_OscConfig+0x46>
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	2b18      	cmp	r3, #24
 8003f26:	d110      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5e>
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d10b      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d06c      	beq.n	8004018 <HAL_RCC_OscConfig+0x12c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d168      	bne.n	8004018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e3a2      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x76>
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e02e      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x98>
 8003f6a:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6d      	ldr	r2, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xbc>
 8003f8e:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a67      	ldr	r2, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a64      	ldr	r2, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a60      	ldr	r2, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fe1e 	bl	8001c08 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd fe1a 	bl	8001c08 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e356      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe4>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fe0a 	bl	8001c08 <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd fe06 	bl	8001c08 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e342      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x10c>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 808c 	beq.w	8004140 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004030:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_RCC_OscConfig+0x162>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b18      	cmp	r3, #24
 8004042:	d137      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c8>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d132      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x17a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e314      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0219 	bic.w	r2, r3, #25
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	492f      	ldr	r1, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fd fdc6 	bl	8001c08 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7fd fdc2 	bl	8001c08 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e2fe      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4920      	ldr	r1, [pc, #128]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b2:	e045      	b.n	8004140 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d026      	beq.n	800410a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 0219 	bic.w	r2, r3, #25
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4919      	ldr	r1, [pc, #100]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fd9b 	bl	8001c08 <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fd fd97 	bl	8001c08 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e2d3      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
 8004108:	e01a      	b.n	8004140 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fd fd77 	bl	8001c08 <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800411e:	f7fd fd73 	bl	8001c08 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d903      	bls.n	8004134 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e2af      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
 8004130:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004134:	4b96      	ldr	r3, [pc, #600]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d06a      	beq.n	8004222 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004154:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004156:	4b8e      	ldr	r3, [pc, #568]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b08      	cmp	r3, #8
 8004160:	d007      	beq.n	8004172 <HAL_RCC_OscConfig+0x286>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b18      	cmp	r3, #24
 8004166:	d11b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x2b4>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004172:	4b87      	ldr	r3, [pc, #540]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x29e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e282      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800418a:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	497d      	ldr	r1, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800419e:	e040      	b.n	8004222 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d023      	beq.n	80041f0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041a8:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a78      	ldr	r2, [pc, #480]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fd28 	bl	8001c08 <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041bc:	f7fd fd24 	bl	8001c08 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e260      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ce:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	4969      	ldr	r1, [pc, #420]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
 80041ee:	e018      	b.n	8004222 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a66      	ldr	r2, [pc, #408]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fd04 	bl	8001c08 <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004204:	f7fd fd00 	bl	8001c08 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e23c      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4a55      	ldr	r2, [pc, #340]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fd fce1 	bl	8001c08 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd fcdd 	bl	8001c08 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e219      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x35e>
 8004268:	e018      	b.n	800429c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	4a48      	ldr	r2, [pc, #288]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd fcc7 	bl	8001c08 <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd fcc3 	bl	8001c08 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1ff      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004290:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d036      	beq.n	8004316 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a36      	ldr	r2, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042bc:	f7fd fca4 	bl	8001c08 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c4:	f7fd fca0 	bl	8001c08 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1dc      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x3d8>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042f0:	f7fd fc8a 	bl	8001c08 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042f8:	f7fd fc86 	bl	8001c08 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1c2      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8086 	beq.w	8004430 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004330:	f7fd fc6a 	bl	8001c08 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fd fc66 	bl	8001c08 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1a2      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_RCC_OscConfig+0x480>
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e032      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x4ac>
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a05      	ldr	r2, [pc, #20]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a02      	ldr	r2, [pc, #8]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e021      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
 8004394:	58024800 	.word	0x58024800
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x4ce>
 80043a0:	4b83      	ldr	r3, [pc, #524]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a82      	ldr	r2, [pc, #520]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b80      	ldr	r3, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a7f      	ldr	r2, [pc, #508]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 80043ba:	4b7d      	ldr	r3, [pc, #500]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a7c      	ldr	r2, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a79      	ldr	r2, [pc, #484]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fd fc15 	bl	8001c08 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fd fc11 	bl	8001c08 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e14b      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x4f6>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fd fbff 	bl	8001c08 <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fd fbfb 	bl	8001c08 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e135      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004424:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 812a 	beq.w	800468e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004442:	2b18      	cmp	r3, #24
 8004444:	f000 80ba 	beq.w	80045bc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b02      	cmp	r3, #2
 800444e:	f040 8095 	bne.w	800457c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b57      	ldr	r3, [pc, #348]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a56      	ldr	r2, [pc, #344]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd fbd3 	bl	8001c08 <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fbcf 	bl	8001c08 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e10b      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004478:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004488:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x6c8>)
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	430a      	orrs	r2, r1
 8004498:	4945      	ldr	r1, [pc, #276]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	628b      	str	r3, [r1, #40]	; 0x28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	3b01      	subs	r3, #1
 80044ae:	025b      	lsls	r3, r3, #9
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	3b01      	subs	r3, #1
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	3b01      	subs	r3, #1
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044ce:	4938      	ldr	r1, [pc, #224]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x6cc>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ec:	00d2      	lsls	r2, r2, #3
 80044ee:	4930      	ldr	r1, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f023 020c 	bic.w	r2, r3, #12
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	492b      	ldr	r1, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	f023 0202 	bic.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4927      	ldr	r1, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fd fb58 	bl	8001c08 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fb54 	bl	8001c08 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e090      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x670>
 800457a:	e088      	b.n	800468e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fb3e 	bl	8001c08 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004590:	f7fd fb3a 	bl	8001c08 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e076      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045a2:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a4>
 80045ae:	e06e      	b.n	800468e <HAL_RCC_OscConfig+0x7a2>
 80045b0:	58024400 	.word	0x58024400
 80045b4:	fffffc0c 	.word	0xfffffc0c
 80045b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045bc:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045c2:	4b35      	ldr	r3, [pc, #212]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d031      	beq.n	8004634 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d12a      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d122      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d11a      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d111      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d108      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e02b      	b.n	8004690 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004638:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004642:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d01f      	beq.n	800468e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800465a:	f7fd fad5 	bl	8001c08 <HAL_GetTick>
 800465e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004660:	bf00      	nop
 8004662:	f7fd fad1 	bl	8001c08 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	4293      	cmp	r3, r2
 800466c:	d0f9      	beq.n	8004662 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 8004670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_OscConfig+0x7b0>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800467a:	00d2      	lsls	r2, r2, #3
 800467c:	4906      	ldr	r1, [pc, #24]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 800467e:	4313      	orrs	r3, r2
 8004680:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a04      	ldr	r2, [pc, #16]	; (8004698 <HAL_RCC_OscConfig+0x7ac>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3730      	adds	r7, #48	; 0x30
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	58024400 	.word	0x58024400
 800469c:	ffff0007 	.word	0xffff0007

080046a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e19c      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b8a      	ldr	r3, [pc, #552]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b87      	ldr	r3, [pc, #540]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	4985      	ldr	r1, [pc, #532]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b83      	ldr	r3, [pc, #524]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e184      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d908      	bls.n	8004712 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004700:	4b78      	ldr	r3, [pc, #480]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	4975      	ldr	r1, [pc, #468]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800470e:	4313      	orrs	r3, r2
 8004710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	4b70      	ldr	r3, [pc, #448]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800472a:	429a      	cmp	r2, r3
 800472c:	d908      	bls.n	8004740 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800472e:	4b6d      	ldr	r3, [pc, #436]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	496a      	ldr	r1, [pc, #424]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800473c:	4313      	orrs	r3, r2
 800473e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	4b64      	ldr	r3, [pc, #400]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004758:	429a      	cmp	r2, r3
 800475a:	d908      	bls.n	800476e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800475c:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	495e      	ldr	r1, [pc, #376]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800476a:	4313      	orrs	r3, r2
 800476c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d908      	bls.n	800479c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4953      	ldr	r1, [pc, #332]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004798:	4313      	orrs	r3, r2
 800479a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4b4d      	ldr	r3, [pc, #308]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d908      	bls.n	80047ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b4a      	ldr	r3, [pc, #296]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f023 020f 	bic.w	r2, r3, #15
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4947      	ldr	r1, [pc, #284]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d055      	beq.n	8004882 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047d6:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4940      	ldr	r1, [pc, #256]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f0:	4b3c      	ldr	r3, [pc, #240]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d121      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0f6      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d107      	bne.n	8004818 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004808:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d115      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0ea      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d107      	bne.n	8004830 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004820:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d109      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0de      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004830:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0d6      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f023 0207 	bic.w	r2, r3, #7
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4925      	ldr	r1, [pc, #148]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 800484e:	4313      	orrs	r3, r2
 8004850:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fd f9d9 	bl	8001c08 <HAL_GetTick>
 8004856:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004858:	e00a      	b.n	8004870 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485a:	f7fd f9d5 	bl	8001c08 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0be      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004870:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	429a      	cmp	r2, r3
 8004880:	d1eb      	bne.n	800485a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d010      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	429a      	cmp	r2, r3
 800489c:	d208      	bcs.n	80048b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f023 020f 	bic.w	r2, r3, #15
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	490e      	ldr	r1, [pc, #56]	; (80048e4 <HAL_RCC_ClockConfig+0x244>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d214      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 020f 	bic.w	r2, r3, #15
 80048c6:	4906      	ldr	r1, [pc, #24]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RCC_ClockConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e086      	b.n	80049ee <HAL_RCC_ClockConfig+0x34e>
 80048e0:	52002000 	.word	0x52002000
 80048e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	4b3f      	ldr	r3, [pc, #252]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004900:	429a      	cmp	r2, r3
 8004902:	d208      	bcs.n	8004916 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004904:	4b3c      	ldr	r3, [pc, #240]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4939      	ldr	r1, [pc, #228]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004912:	4313      	orrs	r3, r2
 8004914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800492e:	429a      	cmp	r2, r3
 8004930:	d208      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004932:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	492e      	ldr	r1, [pc, #184]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004940:	4313      	orrs	r3, r2
 8004942:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800495c:	429a      	cmp	r2, r3
 800495e:	d208      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004960:	4b25      	ldr	r3, [pc, #148]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4922      	ldr	r1, [pc, #136]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 800496e:	4313      	orrs	r3, r2
 8004970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800498a:	429a      	cmp	r2, r3
 800498c:	d208      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800498e:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4917      	ldr	r1, [pc, #92]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 800499c:	4313      	orrs	r3, r2
 800499e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049a0:	f000 f834 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	4912      	ldr	r1, [pc, #72]	; (80049fc <HAL_RCC_ClockConfig+0x35c>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	f003 031f 	and.w	r3, r3, #31
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_RCC_ClockConfig+0x358>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <HAL_RCC_ClockConfig+0x35c>)
 80049c8:	5cd3      	ldrb	r3, [r2, r3]
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <HAL_RCC_ClockConfig+0x360>)
 80049d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <HAL_RCC_ClockConfig+0x364>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCC_ClockConfig+0x368>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd f8c6 	bl	8001b74 <HAL_InitTick>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	58024400 	.word	0x58024400
 80049fc:	0800d75c 	.word	0x0800d75c
 8004a00:	24000004 	.word	0x24000004
 8004a04:	24000000 	.word	0x24000000
 8004a08:	24000008 	.word	0x24000008

08004a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b089      	sub	sp, #36	; 0x24
 8004a10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a12:	4bb3      	ldr	r3, [pc, #716]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	2b18      	cmp	r3, #24
 8004a1c:	f200 8155 	bhi.w	8004cca <HAL_RCC_GetSysClockFreq+0x2be>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004ccb 	.word	0x08004ccb
 8004a30:	08004ccb 	.word	0x08004ccb
 8004a34:	08004ccb 	.word	0x08004ccb
 8004a38:	08004ccb 	.word	0x08004ccb
 8004a3c:	08004ccb 	.word	0x08004ccb
 8004a40:	08004ccb 	.word	0x08004ccb
 8004a44:	08004ccb 	.word	0x08004ccb
 8004a48:	08004ab3 	.word	0x08004ab3
 8004a4c:	08004ccb 	.word	0x08004ccb
 8004a50:	08004ccb 	.word	0x08004ccb
 8004a54:	08004ccb 	.word	0x08004ccb
 8004a58:	08004ccb 	.word	0x08004ccb
 8004a5c:	08004ccb 	.word	0x08004ccb
 8004a60:	08004ccb 	.word	0x08004ccb
 8004a64:	08004ccb 	.word	0x08004ccb
 8004a68:	08004ab9 	.word	0x08004ab9
 8004a6c:	08004ccb 	.word	0x08004ccb
 8004a70:	08004ccb 	.word	0x08004ccb
 8004a74:	08004ccb 	.word	0x08004ccb
 8004a78:	08004ccb 	.word	0x08004ccb
 8004a7c:	08004ccb 	.word	0x08004ccb
 8004a80:	08004ccb 	.word	0x08004ccb
 8004a84:	08004ccb 	.word	0x08004ccb
 8004a88:	08004abf 	.word	0x08004abf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a8c:	4b94      	ldr	r3, [pc, #592]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a98:	4b91      	ldr	r3, [pc, #580]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	08db      	lsrs	r3, r3, #3
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	4a90      	ldr	r2, [pc, #576]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004aaa:	e111      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004aac:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004aae:	61bb      	str	r3, [r7, #24]
      break;
 8004ab0:	e10e      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ab2:	4b8d      	ldr	r3, [pc, #564]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ab4:	61bb      	str	r3, [r7, #24]
      break;
 8004ab6:	e10b      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004ab8:	4b8c      	ldr	r3, [pc, #560]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004aba:	61bb      	str	r3, [r7, #24]
      break;
 8004abc:	e108      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004abe:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ac8:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ad4:	4b82      	ldr	r3, [pc, #520]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ade:	4b80      	ldr	r3, [pc, #512]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80e1 	beq.w	8004cc4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f000 8083 	beq.w	8004c10 <HAL_RCC_GetSysClockFreq+0x204>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x248>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x114>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d056      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004b1e:	e099      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b20:	4b6f      	ldr	r3, [pc, #444]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02d      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	4a6b      	ldr	r2, [pc, #428]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b62      	ldr	r3, [pc, #392]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b6a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004cf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b86:	e087      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004cf4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bae:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004cf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bca:	e065      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004cf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b40      	ldr	r3, [pc, #256]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bf2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004cf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c0e:	e043      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b2f      	ldr	r3, [pc, #188]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c36:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004cf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c52:	e021      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004cf8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c7a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004cf0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c96:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c98:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 3a90 	vmov	r3, s15
 8004cc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61bb      	str	r3, [r7, #24]
      break;
 8004cc8:	e002      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004cca:	4b07      	ldr	r3, [pc, #28]	; (8004ce8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ccc:	61bb      	str	r3, [r7, #24]
      break;
 8004cce:	bf00      	nop
  }

  return sysclockfreq;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	03d09000 	.word	0x03d09000
 8004ce8:	003d0900 	.word	0x003d0900
 8004cec:	007a1200 	.word	0x007a1200
 8004cf0:	46000000 	.word	0x46000000
 8004cf4:	4c742400 	.word	0x4c742400
 8004cf8:	4a742400 	.word	0x4a742400
 8004cfc:	4af42400 	.word	0x4af42400

08004d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d06:	f7ff fe81 	bl	8004a0c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	490f      	ldr	r1, [pc, #60]	; (8004d54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d18:	5ccb      	ldrb	r3, [r1, r3]
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d2e:	5cd3      	ldrb	r3, [r2, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3a:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d3c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	58024400 	.word	0x58024400
 8004d54:	0800d75c 	.word	0x0800d75c
 8004d58:	24000004 	.word	0x24000004
 8004d5c:	24000000 	.word	0x24000000

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d64:	f7ff ffcc 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4904      	ldr	r1, [pc, #16]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	f003 031f 	and.w	r3, r3, #31
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58024400 	.word	0x58024400
 8004d88:	0800d75c 	.word	0x0800d75c

08004d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d90:	f7ff ffb6 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4904      	ldr	r1, [pc, #16]	; (8004db4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58024400 	.word	0x58024400
 8004db4:	0800d75c 	.word	0x0800d75c

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dbc:	b0c6      	sub	sp, #280	; 0x118
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004ddc:	2500      	movs	r5, #0
 8004dde:	ea54 0305 	orrs.w	r3, r4, r5
 8004de2:	d049      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dee:	d02f      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004df0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004df4:	d828      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfa:	d01a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e00:	d822      	bhi.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d007      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e0c:	e01c      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0e:	4bab      	ldr	r3, [pc, #684]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4aaa      	ldr	r2, [pc, #680]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e1a:	e01a      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e20:	3308      	adds	r3, #8
 8004e22:	2102      	movs	r1, #2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f002 fa49 	bl	80072bc <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e30:	e00f      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e36:	3328      	adds	r3, #40	; 0x28
 8004e38:	2102      	movs	r1, #2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 faf0 	bl	8007420 <RCCEx_PLL3_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004e46:	e004      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e5a:	4b98      	ldr	r3, [pc, #608]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e68:	4a94      	ldr	r2, [pc, #592]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6513      	str	r3, [r2, #80]	; 0x50
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004e84:	f04f 0900 	mov.w	r9, #0
 8004e88:	ea58 0309 	orrs.w	r3, r8, r9
 8004e8c:	d047      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d82a      	bhi.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e98:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9e:	bf00      	nop
 8004ea0:	08004eb5 	.word	0x08004eb5
 8004ea4:	08004ec3 	.word	0x08004ec3
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ef7 	.word	0x08004ef7
 8004eb0:	08004ef7 	.word	0x08004ef7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb4:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a80      	ldr	r2, [pc, #512]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec0:	e01a      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 f9f6 	bl	80072bc <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ed6:	e00f      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004edc:	3328      	adds	r3, #40	; 0x28
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 fa9d 	bl	8007420 <RCCEx_PLL3_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eec:	e004      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10a      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f00:	4b6e      	ldr	r3, [pc, #440]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	f023 0107 	bic.w	r1, r3, #7
 8004f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0e:	4a6b      	ldr	r2, [pc, #428]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6513      	str	r3, [r2, #80]	; 0x50
 8004f14:	e003      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004f2a:	f04f 0b00 	mov.w	fp, #0
 8004f2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004f32:	d05b      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f3c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004f40:	d03b      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004f42:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004f46:	d834      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f4c:	d037      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f52:	d82e      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f58:	d033      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004f5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f5e:	d828      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f64:	d01a      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6a:	d822      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f74:	d007      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004f76:	e01c      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f78:	4b50      	ldr	r3, [pc, #320]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a4f      	ldr	r2, [pc, #316]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f84:	e01e      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f002 f994 	bl	80072bc <RCCEx_PLL2_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f9a:	e013      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa0:	3328      	adds	r3, #40	; 0x28
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fa3b 	bl	8007420 <RCCEx_PLL3_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004fba:	bf00      	nop
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fdc:	4a37      	ldr	r2, [pc, #220]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe2:	e003      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fe8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005002:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d05d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005010:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005014:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005018:	d03b      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800501a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800501e:	d834      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005024:	d037      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502a:	d82e      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800502c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005030:	d033      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005036:	d828      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800503c:	d01a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800503e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005042:	d822      	bhi.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800504c:	d007      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800504e:	e01c      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a19      	ldr	r2, [pc, #100]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800505a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800505c:	e01e      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005062:	3308      	adds	r3, #8
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f002 f928 	bl	80072bc <RCCEx_PLL2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005072:	e013      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005078:	3328      	adds	r3, #40	; 0x28
 800507a:	2100      	movs	r1, #0
 800507c:	4618      	mov	r0, r3
 800507e:	f002 f9cf 	bl	8007420 <RCCEx_PLL3_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005088:	e008      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005092:	bf00      	nop
 8005094:	e002      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005096:	bf00      	nop
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800509a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050b4:	4a01      	ldr	r2, [pc, #4]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80050b6:	430b      	orrs	r3, r1
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ba:	e005      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80050bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80050d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050d8:	2300      	movs	r3, #0
 80050da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050de:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4313      	orrs	r3, r2
 80050e6:	d03a      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80050e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	2b30      	cmp	r3, #48	; 0x30
 80050f0:	d01f      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80050f2:	2b30      	cmp	r3, #48	; 0x30
 80050f4:	d819      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d00c      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d815      	bhi.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d019      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005102:	2b10      	cmp	r3, #16
 8005104:	d111      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005106:	4baa      	ldr	r3, [pc, #680]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	4aa9      	ldr	r2, [pc, #676]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800510c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005110:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005112:	e011      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005118:	3308      	adds	r3, #8
 800511a:	2102      	movs	r1, #2
 800511c:	4618      	mov	r0, r3
 800511e:	f002 f8cd 	bl	80072bc <RCCEx_PLL2_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005128:	e006      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005130:	e002      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005140:	4b9b      	ldr	r3, [pc, #620]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005144:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	4a98      	ldr	r2, [pc, #608]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005150:	430b      	orrs	r3, r1
 8005152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005154:	e003      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005156:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800515a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800515e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800516a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800516e:	2300      	movs	r3, #0
 8005170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005174:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d051      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800517e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005188:	d035      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800518a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518e:	d82e      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005194:	d031      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800519a:	d828      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d01a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d822      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b0:	d007      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80051b2:	e01c      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b7e      	ldr	r3, [pc, #504]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a7d      	ldr	r2, [pc, #500]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051c0:	e01c      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c6:	3308      	adds	r3, #8
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 f876 	bl	80072bc <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051d6:	e011      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051dc:	3328      	adds	r3, #40	; 0x28
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 f91d 	bl	8007420 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80051ec:	e006      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80051fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10a      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005204:	4b6a      	ldr	r3, [pc, #424]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800520c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	4a67      	ldr	r2, [pc, #412]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005214:	430b      	orrs	r3, r1
 8005216:	6513      	str	r3, [r2, #80]	; 0x50
 8005218:	e003      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800521e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800522e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005238:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800523c:	460b      	mov	r3, r1
 800523e:	4313      	orrs	r3, r2
 8005240:	d053      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800524c:	d033      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800524e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005252:	d82c      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005258:	d02f      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x502>
 800525a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800525e:	d826      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005260:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005264:	d02b      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005266:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800526a:	d820      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800526c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005270:	d012      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005276:	d81a      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d022      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d115      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005286:	3308      	adds	r3, #8
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f002 f816 	bl	80072bc <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005296:	e015      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800529c:	3328      	adds	r3, #40	; 0x28
 800529e:	2101      	movs	r1, #1
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 f8bd 	bl	8007420 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80052ac:	e00a      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052b4:	e006      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80052b6:	bf00      	nop
 80052b8:	e004      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80052ba:	bf00      	nop
 80052bc:	e002      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80052c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80052cc:	4b38      	ldr	r3, [pc, #224]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80052d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052da:	4a35      	ldr	r2, [pc, #212]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80052dc:	430b      	orrs	r3, r1
 80052de:	6513      	str	r3, [r2, #80]	; 0x50
 80052e0:	e003      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80052f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052fa:	2300      	movs	r3, #0
 80052fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005300:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005304:	460b      	mov	r3, r1
 8005306:	4313      	orrs	r3, r2
 8005308:	d058      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005316:	d033      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800531c:	d82c      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d02f      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005328:	d826      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800532a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800532e:	d02b      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005330:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005334:	d820      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800533a:	d012      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d81a      	bhi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d022      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534a:	d115      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005350:	3308      	adds	r3, #8
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f001 ffb1 	bl	80072bc <RCCEx_PLL2_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005360:	e015      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005366:	3328      	adds	r3, #40	; 0x28
 8005368:	2101      	movs	r1, #1
 800536a:	4618      	mov	r0, r3
 800536c:	f002 f858 	bl	8007420 <RCCEx_PLL3_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005376:	e00a      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800537e:	e006      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005380:	bf00      	nop
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005384:	bf00      	nop
 8005386:	e002      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800538c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10e      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a6:	4a02      	ldr	r2, [pc, #8]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6593      	str	r3, [r2, #88]	; 0x58
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80053c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80053d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d037      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e6:	d00e      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80053e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ec:	d816      	bhi.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d111      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053f8:	4bc4      	ldr	r3, [pc, #784]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	4ac3      	ldr	r2, [pc, #780]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005404:	e00f      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540a:	3308      	adds	r3, #8
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f001 ff54 	bl	80072bc <RCCEx_PLL2_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800541a:	e004      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005422:	e000      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005426:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800542e:	4bb7      	ldr	r3, [pc, #732]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005432:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543c:	4ab3      	ldr	r2, [pc, #716]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800543e:	430b      	orrs	r3, r1
 8005440:	6513      	str	r3, [r2, #80]	; 0x50
 8005442:	e003      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005444:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005448:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800544c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800545c:	2300      	movs	r3, #0
 800545e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005462:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005466:	460b      	mov	r3, r1
 8005468:	4313      	orrs	r3, r2
 800546a:	d039      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	2b03      	cmp	r3, #3
 8005474:	d81c      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054b9 	.word	0x080054b9
 8005480:	0800548d 	.word	0x0800548d
 8005484:	0800549b 	.word	0x0800549b
 8005488:	080054b9 	.word	0x080054b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548c:	4b9f      	ldr	r3, [pc, #636]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a9e      	ldr	r2, [pc, #632]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005496:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005498:	e00f      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	3308      	adds	r3, #8
 80054a0:	2102      	movs	r1, #2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 ff0a 	bl	80072bc <RCCEx_PLL2_Config>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80054ae:	e004      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80054b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80054c2:	4b92      	ldr	r3, [pc, #584]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	f023 0103 	bic.w	r1, r3, #3
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d0:	4a8e      	ldr	r2, [pc, #568]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d6:	e003      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80054ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f000 8099 	beq.w	8005634 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005502:	4b83      	ldr	r3, [pc, #524]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a82      	ldr	r2, [pc, #520]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800550e:	f7fc fb7b 	bl	8001c08 <HAL_GetTick>
 8005512:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005516:	e00b      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005518:	f7fc fb76 	bl	8001c08 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b64      	cmp	r3, #100	; 0x64
 8005526:	d903      	bls.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800552e:	e005      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005530:	4b77      	ldr	r3, [pc, #476]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005538:	2b00      	cmp	r3, #0
 800553a:	d0ed      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800553c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005540:	2b00      	cmp	r3, #0
 8005542:	d173      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005544:	4b71      	ldr	r3, [pc, #452]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005550:	4053      	eors	r3, r2
 8005552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d015      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800555a:	4b6c      	ldr	r3, [pc, #432]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005562:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005566:	4b69      	ldr	r3, [pc, #420]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a68      	ldr	r2, [pc, #416]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005572:	4b66      	ldr	r3, [pc, #408]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a65      	ldr	r2, [pc, #404]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800557e:	4a63      	ldr	r2, [pc, #396]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800558a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d118      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fc fb38 	bl	8001c08 <HAL_GetTick>
 8005598:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800559c:	e00d      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fc fb33 	bl	8001c08 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d903      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80055b8:	e005      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055ba:	4b54      	ldr	r3, [pc, #336]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0eb      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80055c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d129      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055de:	d10e      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80055e0:	4b4a      	ldr	r3, [pc, #296]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055f0:	091a      	lsrs	r2, r3, #4
 80055f2:	4b48      	ldr	r3, [pc, #288]	; (8005714 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	4a45      	ldr	r2, [pc, #276]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055f8:	430b      	orrs	r3, r1
 80055fa:	6113      	str	r3, [r2, #16]
 80055fc:	e005      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80055fe:	4b43      	ldr	r3, [pc, #268]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	4a42      	ldr	r2, [pc, #264]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005604:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005608:	6113      	str	r3, [r2, #16]
 800560a:	4b40      	ldr	r3, [pc, #256]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800560c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	4a3c      	ldr	r2, [pc, #240]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800561c:	430b      	orrs	r3, r1
 800561e:	6713      	str	r3, [r2, #112]	; 0x70
 8005620:	e008      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005626:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005630:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 0301 	and.w	r3, r2, #1
 8005640:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800564a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	f000 808f 	beq.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565c:	2b28      	cmp	r3, #40	; 0x28
 800565e:	d871      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	0800574d 	.word	0x0800574d
 800566c:	08005745 	.word	0x08005745
 8005670:	08005745 	.word	0x08005745
 8005674:	08005745 	.word	0x08005745
 8005678:	08005745 	.word	0x08005745
 800567c:	08005745 	.word	0x08005745
 8005680:	08005745 	.word	0x08005745
 8005684:	08005745 	.word	0x08005745
 8005688:	08005719 	.word	0x08005719
 800568c:	08005745 	.word	0x08005745
 8005690:	08005745 	.word	0x08005745
 8005694:	08005745 	.word	0x08005745
 8005698:	08005745 	.word	0x08005745
 800569c:	08005745 	.word	0x08005745
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	0800572f 	.word	0x0800572f
 80056ac:	08005745 	.word	0x08005745
 80056b0:	08005745 	.word	0x08005745
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	08005745 	.word	0x08005745
 80056d0:	08005745 	.word	0x08005745
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005745 	.word	0x08005745
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005745 	.word	0x08005745
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	0800574d 	.word	0x0800574d
 800570c:	58024400 	.word	0x58024400
 8005710:	58024800 	.word	0x58024800
 8005714:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	3308      	adds	r3, #8
 800571e:	2101      	movs	r1, #1
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fdcb 	bl	80072bc <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800572c:	e00f      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005732:	3328      	adds	r3, #40	; 0x28
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fe72 	bl	8007420 <RCCEx_PLL3_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800574c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005756:	4bbf      	ldr	r3, [pc, #764]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005764:	4abb      	ldr	r2, [pc, #748]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005766:	430b      	orrs	r3, r1
 8005768:	6553      	str	r3, [r2, #84]	; 0x54
 800576a:	e003      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577c:	f002 0302 	and.w	r3, r2, #2
 8005780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800578a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800578e:	460b      	mov	r3, r1
 8005790:	4313      	orrs	r3, r2
 8005792:	d041      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579a:	2b05      	cmp	r3, #5
 800579c:	d824      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057f1 	.word	0x080057f1
 80057a8:	080057bd 	.word	0x080057bd
 80057ac:	080057d3 	.word	0x080057d3
 80057b0:	080057f1 	.word	0x080057f1
 80057b4:	080057f1 	.word	0x080057f1
 80057b8:	080057f1 	.word	0x080057f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c0:	3308      	adds	r3, #8
 80057c2:	2101      	movs	r1, #1
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fd79 	bl	80072bc <RCCEx_PLL2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057d0:	e00f      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d6:	3328      	adds	r3, #40	; 0x28
 80057d8:	2101      	movs	r1, #1
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fe20 	bl	8007420 <RCCEx_PLL3_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80057e6:	e004      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057ee:	e000      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80057f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80057fa:	4b96      	ldr	r3, [pc, #600]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	f023 0107 	bic.w	r1, r3, #7
 8005802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005808:	4a92      	ldr	r2, [pc, #584]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800580a:	430b      	orrs	r3, r1
 800580c:	6553      	str	r3, [r2, #84]	; 0x54
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005814:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f002 0304 	and.w	r3, r2, #4
 8005824:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d044      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005840:	2b05      	cmp	r3, #5
 8005842:	d825      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005899 	.word	0x08005899
 8005850:	08005865 	.word	0x08005865
 8005854:	0800587b 	.word	0x0800587b
 8005858:	08005899 	.word	0x08005899
 800585c:	08005899 	.word	0x08005899
 8005860:	08005899 	.word	0x08005899
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005868:	3308      	adds	r3, #8
 800586a:	2101      	movs	r1, #1
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fd25 	bl	80072bc <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005878:	e00f      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587e:	3328      	adds	r3, #40	; 0x28
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f001 fdcc 	bl	8007420 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800588e:	e004      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058a2:	4b6c      	ldr	r3, [pc, #432]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	f023 0107 	bic.w	r1, r3, #7
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	4a68      	ldr	r2, [pc, #416]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6593      	str	r3, [r2, #88]	; 0x58
 80058b8:	e003      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f002 0320 	and.w	r3, r2, #32
 80058ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058d2:	2300      	movs	r3, #0
 80058d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80058dc:	460b      	mov	r3, r1
 80058de:	4313      	orrs	r3, r2
 80058e0:	d055      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058ee:	d033      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80058f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f4:	d82c      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d02f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d826      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005906:	d02b      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005908:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800590c:	d820      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800590e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005912:	d012      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005918:	d81a      	bhi.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d022      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800591e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005922:	d115      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	3308      	adds	r3, #8
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f001 fcc5 	bl	80072bc <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005938:	e015      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	3328      	adds	r3, #40	; 0x28
 8005940:	2102      	movs	r1, #2
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fd6c 	bl	8007420 <RCCEx_PLL3_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800594e:	e00a      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005956:	e006      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005958:	bf00      	nop
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597e:	4a35      	ldr	r2, [pc, #212]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6553      	str	r3, [r2, #84]	; 0x54
 8005984:	e003      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800598a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005996:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800599a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800599e:	2300      	movs	r3, #0
 80059a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80059a8:	460b      	mov	r3, r1
 80059aa:	4313      	orrs	r3, r2
 80059ac:	d058      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059ba:	d033      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80059bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059c0:	d82c      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	d02f      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80059c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059cc:	d826      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80059ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d2:	d02b      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80059d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d8:	d820      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80059da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059de:	d012      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80059e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e4:	d81a      	bhi.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d022      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d115      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f4:	3308      	adds	r3, #8
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fc5f 	bl	80072bc <RCCEx_PLL2_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a04:	e015      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	3328      	adds	r3, #40	; 0x28
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fd06 	bl	8007420 <RCCEx_PLL3_Config>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005a1a:	e00a      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a22:	e006      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005a24:	bf00      	nop
 8005a26:	e004      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005a28:	bf00      	nop
 8005a2a:	e002      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005a2c:	bf00      	nop
 8005a2e:	e000      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10e      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a4a:	4a02      	ldr	r2, [pc, #8]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8005a50:	e006      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005a52:	bf00      	nop
 8005a54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a70:	2300      	movs	r3, #0
 8005a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d055      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a8c:	d033      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005a8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a92:	d82c      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	d02f      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9e:	d826      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005aa0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005aa4:	d02b      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005aa6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005aaa:	d820      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab0:	d012      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab6:	d81a      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d022      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac0:	d115      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fbf6 	bl	80072bc <RCCEx_PLL2_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ad6:	e015      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	3328      	adds	r3, #40	; 0x28
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fc9d 	bl	8007420 <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005aec:	e00a      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005af4:	e006      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b0c:	4ba0      	ldr	r3, [pc, #640]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b1c:	4a9c      	ldr	r2, [pc, #624]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	6593      	str	r3, [r2, #88]	; 0x58
 8005b22:	e003      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f002 0308 	and.w	r3, r2, #8
 8005b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b42:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d01e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5e:	3328      	adds	r3, #40	; 0x28
 8005b60:	2102      	movs	r1, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 fc5c 	bl	8007420 <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005b74:	4b86      	ldr	r3, [pc, #536]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b84:	4a82      	ldr	r2, [pc, #520]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f002 0310 	and.w	r3, r2, #16
 8005b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ba0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	d01e      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	3328      	adds	r3, #40	; 0x28
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fc2d 	bl	8007420 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bd2:	4b6f      	ldr	r3, [pc, #444]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	4a6b      	ldr	r2, [pc, #428]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bfa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4313      	orrs	r3, r2
 8005c02:	d03e      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c10:	d022      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c16:	d81b      	bhi.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d00b      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005c22:	e015      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c28:	3308      	adds	r3, #8
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fb45 	bl	80072bc <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c38:	e00f      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	3328      	adds	r3, #40	; 0x28
 8005c40:	2102      	movs	r1, #2
 8005c42:	4618      	mov	r0, r3
 8005c44:	f001 fbec 	bl	8007420 <RCCEx_PLL3_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005c4e:	e004      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c62:	4b4b      	ldr	r3, [pc, #300]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c72:	4a47      	ldr	r2, [pc, #284]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6593      	str	r3, [r2, #88]	; 0x58
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c90:	2300      	movs	r3, #0
 8005c92:	677b      	str	r3, [r7, #116]	; 0x74
 8005c94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	d03b      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005caa:	d01f      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005cac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cb0:	d818      	bhi.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cbc:	d007      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005cbe:	e011      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc0:	4b33      	ldr	r3, [pc, #204]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4a32      	ldr	r2, [pc, #200]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ccc:	e00f      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd2:	3328      	adds	r3, #40	; 0x28
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fba2 	bl	8007420 <RCCEx_PLL3_Config>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cf6:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d06:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6553      	str	r3, [r2, #84]	; 0x54
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d24:	2300      	movs	r3, #0
 8005d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d28:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	d034      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d007      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005d42:	e011      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a11      	ldr	r2, [pc, #68]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d50:	e00e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d56:	3308      	adds	r3, #8
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 faae 	bl	80072bc <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d66:	e003      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10d      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	4a02      	ldr	r2, [pc, #8]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d8c:	e006      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005d8e:	bf00      	nop
 8005d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005da8:	663b      	str	r3, [r7, #96]	; 0x60
 8005daa:	2300      	movs	r3, #0
 8005dac:	667b      	str	r3, [r7, #100]	; 0x64
 8005dae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d00c      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbc:	3328      	adds	r3, #40	; 0x28
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fb2d 	bl	8007420 <RCCEx_PLL3_Config>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8005de0:	2300      	movs	r3, #0
 8005de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005de4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005de8:	460b      	mov	r3, r1
 8005dea:	4313      	orrs	r3, r2
 8005dec:	d036      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df8:	d018      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dfe:	d811      	bhi.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e04:	d014      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0a:	d80b      	bhi.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e14:	d106      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e16:	4bb7      	ldr	r3, [pc, #732]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	4ab6      	ldr	r2, [pc, #728]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e2a:	e004      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005e2c:	bf00      	nop
 8005e2e:	e002      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005e30:	bf00      	nop
 8005e32:	e000      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e3e:	4bad      	ldr	r3, [pc, #692]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e4c:	4aa9      	ldr	r2, [pc, #676]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6553      	str	r3, [r2, #84]	; 0x54
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005e68:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005e6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005e72:	460b      	mov	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e78:	4b9e      	ldr	r3, [pc, #632]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	4a9b      	ldr	r2, [pc, #620]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e9e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ea8:	4b92      	ldr	r3, [pc, #584]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eac:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eb6:	4a8f      	ldr	r2, [pc, #572]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eca:	2300      	movs	r3, #0
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ece:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	d00e      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ed8:	4b86      	ldr	r3, [pc, #536]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	4a85      	ldr	r2, [pc, #532]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ede:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ee2:	6113      	str	r3, [r2, #16]
 8005ee4:	4b83      	ldr	r3, [pc, #524]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ee6:	6919      	ldr	r1, [r3, #16]
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ef0:	4a80      	ldr	r2, [pc, #512]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f04:	2300      	movs	r3, #0
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f08:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005f12:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f20:	4a74      	ldr	r2, [pc, #464]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
 8005f34:	2300      	movs	r3, #0
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
 8005f38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f42:	4b6c      	ldr	r3, [pc, #432]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	4a68      	ldr	r2, [pc, #416]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	2100      	movs	r1, #0
 8005f62:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4313      	orrs	r3, r2
 8005f72:	d011      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f78:	3308      	adds	r3, #8
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f99d 	bl	80072bc <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005f88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	6239      	str	r1, [r7, #32]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005faa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	d011      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fb8:	3308      	adds	r3, #8
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f001 f97d 	bl	80072bc <RCCEx_PLL2_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	61b9      	str	r1, [r7, #24]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	d011      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	3308      	adds	r3, #8
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 f95d 	bl	80072bc <RCCEx_PLL2_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006008:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006014:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	2100      	movs	r1, #0
 8006022:	6139      	str	r1, [r7, #16]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d011      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006038:	3328      	adds	r3, #40	; 0x28
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f9ef 	bl	8007420 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006048:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006054:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	2100      	movs	r1, #0
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800606e:	460b      	mov	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	d011      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006078:	3328      	adds	r3, #40	; 0x28
 800607a:	2101      	movs	r1, #1
 800607c:	4618      	mov	r0, r3
 800607e:	f001 f9cf 	bl	8007420 <RCCEx_PLL3_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006088:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006090:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006094:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	2100      	movs	r1, #0
 80060a2:	6039      	str	r1, [r7, #0]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d011      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	3328      	adds	r3, #40	; 0x28
 80060ba:	2102      	movs	r1, #2
 80060bc:	4618      	mov	r0, r3
 80060be:	f001 f9af 	bl	8007420 <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80060c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80060d8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	e000      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f2:	bf00      	nop
 80060f4:	58024400 	.word	0x58024400

080060f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006106:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800610a:	430b      	orrs	r3, r1
 800610c:	f040 8094 	bne.w	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006110:	4b9b      	ldr	r3, [pc, #620]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b04      	cmp	r3, #4
 800611e:	f200 8087 	bhi.w	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006122:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006128:	0800613d 	.word	0x0800613d
 800612c:	08006165 	.word	0x08006165
 8006130:	0800618d 	.word	0x0800618d
 8006134:	08006229 	.word	0x08006229
 8006138:	080061b5 	.word	0x080061b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800613c:	4b90      	ldr	r3, [pc, #576]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006148:	d108      	bne.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800614a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 ff62 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006158:	f000 bc93 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006160:	f000 bc8f 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006164:	4b86      	ldr	r3, [pc, #536]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800616c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006170:	d108      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006172:	f107 0318 	add.w	r3, r7, #24
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fca6 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006180:	f000 bc7f 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006188:	f000 bc7b 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800618c:	4b7c      	ldr	r3, [pc, #496]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006198:	d108      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fde6 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061a8:	f000 bc6b 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b0:	f000 bc67 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80061b4:	4b72      	ldr	r3, [pc, #456]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061be:	4b70      	ldr	r3, [pc, #448]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d10c      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061d0:	4b6b      	ldr	r3, [pc, #428]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	4a6a      	ldr	r2, [pc, #424]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e2:	e01f      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061e4:	4b66      	ldr	r3, [pc, #408]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f0:	d106      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80061f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061f8:	d102      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80061fa:	4b63      	ldr	r3, [pc, #396]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fe:	e011      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006200:	4b5f      	ldr	r3, [pc, #380]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800620c:	d106      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006214:	d102      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006216:	4b5d      	ldr	r3, [pc, #372]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621a:	e003      	b.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006220:	f000 bc2f 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006224:	f000 bc2d 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006228:	4b59      	ldr	r3, [pc, #356]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800622c:	f000 bc29 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006234:	f000 bc25 	b.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006240:	430b      	orrs	r3, r1
 8006242:	f040 80a7 	bne.w	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006246:	4b4e      	ldr	r3, [pc, #312]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800624e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006256:	d054      	beq.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625e:	f200 808b 	bhi.w	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006268:	f000 8083 	beq.w	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006272:	f200 8081 	bhi.w	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627c:	d02f      	beq.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006284:	d878      	bhi.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006292:	d012      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006294:	e070      	b.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006296:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062a2:	d107      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 feb5 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062b2:	e3e6      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b8:	e3e3      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c6:	d107      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062c8:	f107 0318 	add.w	r3, r7, #24
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fbfb 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062d6:	e3d4      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062dc:	e3d1      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062de:	4b28      	ldr	r3, [pc, #160]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ea:	d107      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd3d 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80062fa:	e3c2      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80062fc:	2300      	movs	r3, #0
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006300:	e3bf      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006302:	4b1f      	ldr	r3, [pc, #124]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800630a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800630c:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b04      	cmp	r3, #4
 8006316:	d10c      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	08db      	lsrs	r3, r3, #3
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	4a16      	ldr	r2, [pc, #88]	; (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800632a:	fa22 f303 	lsr.w	r3, r2, r3
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006330:	e01e      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800633a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633e:	d106      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006346:	d102      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	e010      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006356:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800635a:	d106      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800635c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006362:	d102      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006368:	e002      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800636e:	e388      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006370:	e387      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006376:	e384      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800637c:	e381      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800637e:	bf00      	nop
 8006380:	58024400 	.word	0x58024400
 8006384:	03d09000 	.word	0x03d09000
 8006388:	003d0900 	.word	0x003d0900
 800638c:	007a1200 	.word	0x007a1200
 8006390:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006398:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800639c:	430b      	orrs	r3, r1
 800639e:	f040 809c 	bne.w	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80063a2:	4b9e      	ldr	r3, [pc, #632]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80063a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b2:	d054      	beq.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ba:	f200 808b 	bhi.w	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063c4:	f000 8083 	beq.w	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ce:	f200 8081 	bhi.w	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063d8:	d02f      	beq.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063e0:	d878      	bhi.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063ee:	d012      	beq.n	8006416 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80063f0:	e070      	b.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063f2:	4b8a      	ldr	r3, [pc, #552]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fe:	d107      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fe07 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800640e:	e338      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006414:	e335      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006416:	4b81      	ldr	r3, [pc, #516]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800641e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006422:	d107      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006424:	f107 0318 	add.w	r3, r7, #24
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fb4d 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006432:	e326      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006438:	e323      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800643a:	4b78      	ldr	r3, [pc, #480]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006446:	d107      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006448:	f107 030c 	add.w	r3, r7, #12
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fc8f 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006456:	e314      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006458:	2300      	movs	r3, #0
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645c:	e311      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800645e:	4b6f      	ldr	r3, [pc, #444]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006466:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006468:	4b6c      	ldr	r3, [pc, #432]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b04      	cmp	r3, #4
 8006472:	d10c      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800647a:	4b68      	ldr	r3, [pc, #416]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	4a66      	ldr	r2, [pc, #408]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800648c:	e01e      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800648e:	4b63      	ldr	r3, [pc, #396]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649a:	d106      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a2:	d102      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80064a4:	4b5f      	ldr	r3, [pc, #380]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a8:	e010      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064aa:	4b5c      	ldr	r3, [pc, #368]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b6:	d106      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064be:	d102      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80064c0:	4b59      	ldr	r3, [pc, #356]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064c4:	e002      	b.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80064ca:	e2da      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80064cc:	e2d9      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80064ce:	4b57      	ldr	r3, [pc, #348]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d2:	e2d6      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064d8:	e2d3      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80064da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064de:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80064e2:	430b      	orrs	r3, r1
 80064e4:	f040 80a7 	bne.w	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80064e8:	4b4c      	ldr	r3, [pc, #304]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80064f0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f8:	d055      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006500:	f200 8096 	bhi.w	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800650a:	f000 8084 	beq.w	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006514:	f200 808c 	bhi.w	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651e:	d030      	beq.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006526:	f200 8083 	bhi.w	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006536:	d012      	beq.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006538:	e07a      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fd63 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006556:	e294      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800655c:	e291      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800655e:	4b2f      	ldr	r3, [pc, #188]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800656a:	d107      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800656c:	f107 0318 	add.w	r3, r7, #24
 8006570:	4618      	mov	r0, r3
 8006572:	f000 faa9 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800657a:	e282      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006580:	e27f      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658e:	d107      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006590:	f107 030c 	add.w	r3, r7, #12
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fbeb 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800659e:	e270      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a4:	e26d      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d10c      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	4a14      	ldr	r2, [pc, #80]	; (8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d4:	e01e      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065d6:	4b11      	ldr	r3, [pc, #68]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d106      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80065e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ea:	d102      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f0:	e010      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065fe:	d106      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d102      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006608:	4b07      	ldr	r3, [pc, #28]	; (8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006612:	e236      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006614:	e235      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661a:	e232      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800661c:	58024400 	.word	0x58024400
 8006620:	03d09000 	.word	0x03d09000
 8006624:	003d0900 	.word	0x003d0900
 8006628:	007a1200 	.word	0x007a1200
 800662c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006634:	e225      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800663a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800663e:	430b      	orrs	r3, r1
 8006640:	f040 8085 	bne.w	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006644:	4b9c      	ldr	r3, [pc, #624]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006648:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006654:	d06b      	beq.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800665c:	d874      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006664:	d056      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800666c:	d86c      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006674:	d03b      	beq.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800667c:	d864      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006684:	d021      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800668c:	d85c      	bhi.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669a:	d004      	beq.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800669c:	e054      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800669e:	f7fe fb5f 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 80066a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066a4:	e1ed      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066a6:	4b84      	ldr	r3, [pc, #528]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b2:	d107      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b4:	f107 0318 	add.w	r3, r7, #24
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fa05 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066c2:	e1de      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c8:	e1db      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066ca:	4b7b      	ldr	r3, [pc, #492]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d6:	d107      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fb47 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066e6:	e1cc      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ec:	e1c9      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066ee:	4b72      	ldr	r3, [pc, #456]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d109      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066fa:	4b6f      	ldr	r3, [pc, #444]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	08db      	lsrs	r3, r3, #3
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	4a6d      	ldr	r2, [pc, #436]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006706:	fa22 f303 	lsr.w	r3, r2, r3
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800670c:	e1b9      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006712:	e1b6      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006714:	4b68      	ldr	r3, [pc, #416]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006720:	d102      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006722:	4b67      	ldr	r3, [pc, #412]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006726:	e1ac      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672c:	e1a9      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800672e:	4b62      	ldr	r3, [pc, #392]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800673a:	d102      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800673c:	4b61      	ldr	r3, [pc, #388]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006740:	e19f      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006746:	e19c      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006748:	2300      	movs	r3, #0
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800674c:	e199      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800674e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006752:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006756:	430b      	orrs	r3, r1
 8006758:	d173      	bne.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800675a:	4b57      	ldr	r3, [pc, #348]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800675c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006762:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006772:	d863      	bhi.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d012      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006782:	e05b      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006784:	4b4c      	ldr	r3, [pc, #304]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800678c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006790:	d107      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006792:	f107 0318 	add.w	r3, r7, #24
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f996 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a0:	e16f      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a6:	e16c      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067a8:	4b43      	ldr	r3, [pc, #268]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d107      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fad8 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c4:	e15d      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ca:	e15a      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067cc:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067d6:	4b38      	ldr	r3, [pc, #224]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d10c      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d109      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067e8:	4b33      	ldr	r3, [pc, #204]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	08db      	lsrs	r3, r3, #3
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	4a32      	ldr	r2, [pc, #200]	; (80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fa:	e01e      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067fc:	4b2e      	ldr	r3, [pc, #184]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006808:	d106      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006810:	d102      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006812:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006816:	e010      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d102      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800682e:	4b25      	ldr	r3, [pc, #148]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	e002      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006838:	e123      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800683a:	e122      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006840:	e11f      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006846:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800684a:	430b      	orrs	r3, r1
 800684c:	d13c      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800684e:	4b1a      	ldr	r3, [pc, #104]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006864:	d012      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006866:	e023      	b.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006874:	d107      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fbcc 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006884:	e0fd      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800688a:	e0fa      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006898:	d107      	bne.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800689a:	f107 0318 	add.w	r3, r7, #24
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f912 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068a8:	e0eb      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ae:	e0e8      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e0e5      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80068b6:	bf00      	nop
 80068b8:	58024400 	.word	0x58024400
 80068bc:	03d09000 	.word	0x03d09000
 80068c0:	003d0900 	.word	0x003d0900
 80068c4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80068c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068cc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80068d0:	430b      	orrs	r3, r1
 80068d2:	f040 8085 	bne.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80068d6:	4b6d      	ldr	r3, [pc, #436]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068da:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068e6:	d06b      	beq.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ee:	d874      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f6:	d056      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d86c      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006906:	d03b      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800690e:	d864      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006916:	d021      	beq.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691e:	d85c      	bhi.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692c:	d004      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800692e:	e054      	b.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006930:	f000 f8b4 	bl	8006a9c <HAL_RCCEx_GetD3PCLK1Freq>
 8006934:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006936:	e0a4      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006938:	4b54      	ldr	r3, [pc, #336]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006946:	f107 0318 	add.w	r3, r7, #24
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f8bc 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006954:	e095      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695a:	e092      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800695c:	4b4b      	ldr	r3, [pc, #300]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006968:	d107      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800696a:	f107 030c 	add.w	r3, r7, #12
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f9fe 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006978:	e083      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800697e:	e080      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006980:	4b42      	ldr	r3, [pc, #264]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d109      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698c:	4b3f      	ldr	r3, [pc, #252]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a3e      	ldr	r2, [pc, #248]	; (8006a90 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800699e:	e070      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a4:	e06d      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80069a6:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b2:	d102      	bne.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80069b4:	4b37      	ldr	r3, [pc, #220]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b8:	e063      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069be:	e060      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80069c0:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069cc:	d102      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d2:	e056      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d8:	e053      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069de:	e050      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80069e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80069e8:	430b      	orrs	r3, r1
 80069ea:	d148      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fc:	d02a      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a04:	d838      	bhi.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a12:	d00d      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006a14:	e030      	b.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a16:	4b1d      	ldr	r3, [pc, #116]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a22:	d102      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006a24:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a28:	e02b      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2e:	e028      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a30:	4b16      	ldr	r3, [pc, #88]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fae8 	bl	8007018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4c:	e019      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a52:	e016      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a54:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a60:	d107      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a62:	f107 0318 	add.w	r3, r7, #24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f82e 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a70:	e007      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a76:	e004      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a7c:	e001      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3740      	adds	r7, #64	; 0x40
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	03d09000 	.word	0x03d09000
 8006a94:	003d0900 	.word	0x003d0900
 8006a98:	007a1200 	.word	0x007a1200

08006a9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006aa0:	f7fe f92e 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4904      	ldr	r1, [pc, #16]	; (8006ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ab2:	5ccb      	ldrb	r3, [r1, r3]
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	0800d75c 	.word	0x0800d75c

08006ac8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ad0:	4ba1      	ldr	r3, [pc, #644]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ada:	4b9f      	ldr	r3, [pc, #636]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	0b1b      	lsrs	r3, r3, #12
 8006ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ae6:	4b9c      	ldr	r3, [pc, #624]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006af2:	4b99      	ldr	r3, [pc, #612]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	08db      	lsrs	r3, r3, #3
 8006af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8111 	beq.w	8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f000 8083 	beq.w	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	f200 80a1 	bhi.w	8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d056      	beq.n	8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b32:	e099      	b.n	8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b34:	4b88      	ldr	r3, [pc, #544]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d02d      	beq.n	8006b9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b40:	4b85      	ldr	r3, [pc, #532]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	4a84      	ldr	r2, [pc, #528]	; (8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b7b      	ldr	r3, [pc, #492]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b9a:	e087      	b.n	8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b6a      	ldr	r3, [pc, #424]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bde:	e065      	b.n	8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf2:	4b59      	ldr	r3, [pc, #356]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c22:	e043      	b.n	8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	ee07 3a90 	vmov	s15, r3
 8006c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c36:	4b48      	ldr	r3, [pc, #288]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c66:	e021      	b.n	8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7a:	4b37      	ldr	r3, [pc, #220]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006caa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cac:	4b2a      	ldr	r3, [pc, #168]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	0a5b      	lsrs	r3, r3, #9
 8006cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd2:	ee17 2a90 	vmov	r2, s15
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce4:	ee07 3a90 	vmov	s15, r3
 8006ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d00:	ee17 2a90 	vmov	r2, s15
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2e:	ee17 2a90 	vmov	r2, s15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d36:	e008      	b.n	8006d4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
}
 8006d4a:	bf00      	nop
 8006d4c:	3724      	adds	r7, #36	; 0x24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	03d09000 	.word	0x03d09000
 8006d60:	46000000 	.word	0x46000000
 8006d64:	4c742400 	.word	0x4c742400
 8006d68:	4a742400 	.word	0x4a742400
 8006d6c:	4af42400 	.word	0x4af42400

08006d70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	; 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d78:	4ba1      	ldr	r3, [pc, #644]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d82:	4b9f      	ldr	r3, [pc, #636]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	0d1b      	lsrs	r3, r3, #20
 8006d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d8e:	4b9c      	ldr	r3, [pc, #624]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	0a1b      	lsrs	r3, r3, #8
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d9a:	4b99      	ldr	r3, [pc, #612]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	08db      	lsrs	r3, r3, #3
 8006da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	ee07 3a90 	vmov	s15, r3
 8006dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8111 	beq.w	8006fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	f000 8083 	beq.w	8006ecc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	f200 80a1 	bhi.w	8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d056      	beq.n	8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006dda:	e099      	b.n	8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ddc:	4b88      	ldr	r3, [pc, #544]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d02d      	beq.n	8006e44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de8:	4b85      	ldr	r3, [pc, #532]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	08db      	lsrs	r3, r3, #3
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	4a84      	ldr	r2, [pc, #528]	; (8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
 8006df8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e12:	4b7b      	ldr	r3, [pc, #492]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e42:	e087      	b.n	8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e56:	4b6a      	ldr	r3, [pc, #424]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e86:	e065      	b.n	8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9a:	4b59      	ldr	r3, [pc, #356]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eca:	e043      	b.n	8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007014 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ede:	4b48      	ldr	r3, [pc, #288]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f0e:	e021      	b.n	8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f22:	4b37      	ldr	r3, [pc, #220]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f54:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	0a5b      	lsrs	r3, r3, #9
 8006f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7a:	ee17 2a90 	vmov	r2, s15
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f82:	4b1f      	ldr	r3, [pc, #124]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa8:	ee17 2a90 	vmov	r2, s15
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	0e1b      	lsrs	r3, r3, #24
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fde:	e008      	b.n	8006ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
}
 8006ff2:	bf00      	nop
 8006ff4:	3724      	adds	r7, #36	; 0x24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	58024400 	.word	0x58024400
 8007004:	03d09000 	.word	0x03d09000
 8007008:	46000000 	.word	0x46000000
 800700c:	4c742400 	.word	0x4c742400
 8007010:	4a742400 	.word	0x4a742400
 8007014:	4af42400 	.word	0x4af42400

08007018 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007018:	b480      	push	{r7}
 800701a:	b089      	sub	sp, #36	; 0x24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007020:	4ba0      	ldr	r3, [pc, #640]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f003 0303 	and.w	r3, r3, #3
 8007028:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800702a:	4b9e      	ldr	r3, [pc, #632]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007034:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007036:	4b9b      	ldr	r3, [pc, #620]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007040:	4b98      	ldr	r3, [pc, #608]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	08db      	lsrs	r3, r3, #3
 8007046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	ee07 3a90 	vmov	s15, r3
 8007054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007058:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8111 	beq.w	8007286 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b02      	cmp	r3, #2
 8007068:	f000 8083 	beq.w	8007172 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b02      	cmp	r3, #2
 8007070:	f200 80a1 	bhi.w	80071b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d056      	beq.n	800712e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007080:	e099      	b.n	80071b6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007082:	4b88      	ldr	r3, [pc, #544]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d02d      	beq.n	80070ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800708e:	4b85      	ldr	r3, [pc, #532]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	08db      	lsrs	r3, r3, #3
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	4a83      	ldr	r2, [pc, #524]	; (80072a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800709a:	fa22 f303 	lsr.w	r3, r2, r3
 800709e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b8:	4b7a      	ldr	r3, [pc, #488]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070e8:	e087      	b.n	80071fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fc:	4b69      	ldr	r3, [pc, #420]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007110:	eddf 5a66 	vldr	s11, [pc, #408]	; 80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800712c:	e065      	b.n	80071fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80072b4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800713c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007140:	4b58      	ldr	r3, [pc, #352]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007150:	ed97 6a03 	vldr	s12, [r7, #12]
 8007154:	eddf 5a55 	vldr	s11, [pc, #340]	; 80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007170:	e043      	b.n	80071fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80072b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007184:	4b47      	ldr	r3, [pc, #284]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	ed97 6a03 	vldr	s12, [r7, #12]
 8007198:	eddf 5a44 	vldr	s11, [pc, #272]	; 80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800719c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b4:	e021      	b.n	80071fa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c8:	4b36      	ldr	r3, [pc, #216]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80072ac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80071fa:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	0a5b      	lsrs	r3, r3, #9
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007214:	edd7 6a07 	vldr	s13, [r7, #28]
 8007218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007220:	ee17 2a90 	vmov	r2, s15
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800723e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007242:	edd7 6a07 	vldr	s13, [r7, #28]
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007256:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	0e1b      	lsrs	r3, r3, #24
 800725c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800726c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007270:	edd7 6a07 	vldr	s13, [r7, #28]
 8007274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727c:	ee17 2a90 	vmov	r2, s15
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007284:	e008      	b.n	8007298 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	609a      	str	r2, [r3, #8]
}
 8007298:	bf00      	nop
 800729a:	3724      	adds	r7, #36	; 0x24
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	58024400 	.word	0x58024400
 80072a8:	03d09000 	.word	0x03d09000
 80072ac:	46000000 	.word	0x46000000
 80072b0:	4c742400 	.word	0x4c742400
 80072b4:	4a742400 	.word	0x4a742400
 80072b8:	4af42400 	.word	0x4af42400

080072bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072ca:	4b53      	ldr	r3, [pc, #332]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d101      	bne.n	80072da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e099      	b.n	800740e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072da:	4b4f      	ldr	r3, [pc, #316]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4e      	ldr	r2, [pc, #312]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80072e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e6:	f7fa fc8f 	bl	8001c08 <HAL_GetTick>
 80072ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072ec:	e008      	b.n	8007300 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072ee:	f7fa fc8b 	bl	8001c08 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e086      	b.n	800740e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007300:	4b45      	ldr	r3, [pc, #276]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f0      	bne.n	80072ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800730c:	4b42      	ldr	r3, [pc, #264]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	493f      	ldr	r1, [pc, #252]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 800731c:	4313      	orrs	r3, r2
 800731e:	628b      	str	r3, [r1, #40]	; 0x28
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	3b01      	subs	r3, #1
 8007326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	3b01      	subs	r3, #1
 8007330:	025b      	lsls	r3, r3, #9
 8007332:	b29b      	uxth	r3, r3
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	3b01      	subs	r3, #1
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	3b01      	subs	r3, #1
 800734a:	061b      	lsls	r3, r3, #24
 800734c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007350:	4931      	ldr	r1, [pc, #196]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007352:	4313      	orrs	r3, r2
 8007354:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007356:	4b30      	ldr	r3, [pc, #192]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	492d      	ldr	r1, [pc, #180]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007364:	4313      	orrs	r3, r2
 8007366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007368:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 800736a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736c:	f023 0220 	bic.w	r2, r3, #32
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	4928      	ldr	r1, [pc, #160]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007376:	4313      	orrs	r3, r2
 8007378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800737a:	4b27      	ldr	r3, [pc, #156]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 800737c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737e:	4a26      	ldr	r2, [pc, #152]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007386:	4b24      	ldr	r3, [pc, #144]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <RCCEx_PLL2_Config+0x160>)
 800738c:	4013      	ands	r3, r2
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	69d2      	ldr	r2, [r2, #28]
 8007392:	00d2      	lsls	r2, r2, #3
 8007394:	4920      	ldr	r1, [pc, #128]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007396:	4313      	orrs	r3, r2
 8007398:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800739a:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	4a1e      	ldr	r2, [pc, #120]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073a0:	f043 0310 	orr.w	r3, r3, #16
 80073a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073ac:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b0:	4a19      	ldr	r2, [pc, #100]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073b8:	e00f      	b.n	80073da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d106      	bne.n	80073ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073c0:	4b15      	ldr	r3, [pc, #84]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	4a14      	ldr	r2, [pc, #80]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073cc:	e005      	b.n	80073da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d2:	4a11      	ldr	r2, [pc, #68]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073da:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a0e      	ldr	r2, [pc, #56]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e6:	f7fa fc0f 	bl	8001c08 <HAL_GetTick>
 80073ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073ec:	e008      	b.n	8007400 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073ee:	f7fa fc0b 	bl	8001c08 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e006      	b.n	800740e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <RCCEx_PLL2_Config+0x15c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	58024400 	.word	0x58024400
 800741c:	ffff0007 	.word	0xffff0007

08007420 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800742e:	4b53      	ldr	r3, [pc, #332]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b03      	cmp	r3, #3
 8007438:	d101      	bne.n	800743e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e099      	b.n	8007572 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800743e:	4b4f      	ldr	r3, [pc, #316]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a4e      	ldr	r2, [pc, #312]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744a:	f7fa fbdd 	bl	8001c08 <HAL_GetTick>
 800744e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007450:	e008      	b.n	8007464 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007452:	f7fa fbd9 	bl	8001c08 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e086      	b.n	8007572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007464:	4b45      	ldr	r3, [pc, #276]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f0      	bne.n	8007452 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007470:	4b42      	ldr	r3, [pc, #264]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	051b      	lsls	r3, r3, #20
 800747e:	493f      	ldr	r1, [pc, #252]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	628b      	str	r3, [r1, #40]	; 0x28
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	025b      	lsls	r3, r3, #9
 8007496:	b29b      	uxth	r3, r3
 8007498:	431a      	orrs	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	3b01      	subs	r3, #1
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	061b      	lsls	r3, r3, #24
 80074b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074b4:	4931      	ldr	r1, [pc, #196]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074ba:	4b30      	ldr	r3, [pc, #192]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	492d      	ldr	r1, [pc, #180]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074cc:	4b2b      	ldr	r3, [pc, #172]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	4928      	ldr	r1, [pc, #160]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074de:	4b27      	ldr	r3, [pc, #156]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	4a26      	ldr	r2, [pc, #152]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074ea:	4b24      	ldr	r3, [pc, #144]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ee:	4b24      	ldr	r3, [pc, #144]	; (8007580 <RCCEx_PLL3_Config+0x160>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	69d2      	ldr	r2, [r2, #28]
 80074f6:	00d2      	lsls	r2, r2, #3
 80074f8:	4920      	ldr	r1, [pc, #128]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074fe:	4b1f      	ldr	r3, [pc, #124]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	4a1e      	ldr	r2, [pc, #120]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007510:	4b1a      	ldr	r3, [pc, #104]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	4a19      	ldr	r2, [pc, #100]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800751a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800751c:	e00f      	b.n	800753e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d106      	bne.n	8007532 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007524:	4b15      	ldr	r3, [pc, #84]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4a14      	ldr	r2, [pc, #80]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 800752a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800752e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007530:	e005      	b.n	800753e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	4a11      	ldr	r2, [pc, #68]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007538:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800753c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a0e      	ldr	r2, [pc, #56]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754a:	f7fa fb5d 	bl	8001c08 <HAL_GetTick>
 800754e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007550:	e008      	b.n	8007564 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007552:	f7fa fb59 	bl	8001c08 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e006      	b.n	8007572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <RCCEx_PLL3_Config+0x15c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	58024400 	.word	0x58024400
 8007580:	ffff0007 	.word	0xffff0007

08007584 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e10f      	b.n	80077b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a87      	ldr	r2, [pc, #540]	; (80077c0 <HAL_SPI_Init+0x23c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00f      	beq.n	80075c6 <HAL_SPI_Init+0x42>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a86      	ldr	r2, [pc, #536]	; (80077c4 <HAL_SPI_Init+0x240>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00a      	beq.n	80075c6 <HAL_SPI_Init+0x42>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a84      	ldr	r2, [pc, #528]	; (80077c8 <HAL_SPI_Init+0x244>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d005      	beq.n	80075c6 <HAL_SPI_Init+0x42>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	2b0f      	cmp	r3, #15
 80075c0:	d901      	bls.n	80075c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e0f7      	b.n	80077b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fe04 	bl	80081d4 <SPI_GetPacketSize>
 80075cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a7b      	ldr	r2, [pc, #492]	; (80077c0 <HAL_SPI_Init+0x23c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00c      	beq.n	80075f2 <HAL_SPI_Init+0x6e>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a79      	ldr	r2, [pc, #484]	; (80077c4 <HAL_SPI_Init+0x240>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <HAL_SPI_Init+0x6e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a78      	ldr	r2, [pc, #480]	; (80077c8 <HAL_SPI_Init+0x244>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d002      	beq.n	80075f2 <HAL_SPI_Init+0x6e>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d811      	bhi.n	8007616 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075f6:	4a72      	ldr	r2, [pc, #456]	; (80077c0 <HAL_SPI_Init+0x23c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d009      	beq.n	8007610 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a70      	ldr	r2, [pc, #448]	; (80077c4 <HAL_SPI_Init+0x240>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d004      	beq.n	8007610 <HAL_SPI_Init+0x8c>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a6f      	ldr	r2, [pc, #444]	; (80077c8 <HAL_SPI_Init+0x244>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d104      	bne.n	800761a <HAL_SPI_Init+0x96>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b10      	cmp	r3, #16
 8007614:	d901      	bls.n	800761a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e0cd      	b.n	80077b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7f9 fe14 	bl	800125c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007656:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007660:	d119      	bne.n	8007696 <HAL_SPI_Init+0x112>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800766a:	d103      	bne.n	8007674 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10c      	bne.n	8007696 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007684:	d107      	bne.n	8007696 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007694:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00f      	beq.n	80076c2 <HAL_SPI_Init+0x13e>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	2b06      	cmp	r3, #6
 80076a8:	d90b      	bls.n	80076c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e007      	b.n	80076d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	431a      	orrs	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	ea42 0103 	orr.w	r1, r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68da      	ldr	r2, [r3, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	431a      	orrs	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	ea42 0103 	orr.w	r1, r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d113      	bne.n	8007772 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800775c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007770:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0201 	bic.w	r2, r2, #1
 8007780:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40013000 	.word	0x40013000
 80077c4:	40003800 	.word	0x40003800
 80077c8:	40003c00 	.word	0x40003c00

080077cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af02      	add	r7, sp, #8
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3320      	adds	r3, #32
 80077e6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3330      	adds	r3, #48	; 0x30
 80077ee:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_SPI_TransmitReceive+0x32>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e1fd      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007806:	f7fa f9ff 	bl	8001c08 <HAL_GetTick>
 800780a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800780c:	887b      	ldrh	r3, [r7, #2]
 800780e:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8007810:	887b      	ldrh	r3, [r7, #2]
 8007812:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d009      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8007820:	2302      	movs	r3, #2
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800782e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007832:	e1e2      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <HAL_SPI_TransmitReceive+0x7a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_SPI_TransmitReceive+0x7a>
 8007840:	887b      	ldrh	r3, [r7, #2]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007858:	e1cf      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2205      	movs	r2, #5
 800785e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	887a      	ldrh	r2, [r7, #2]
 8007874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	887a      	ldrh	r2, [r7, #2]
 800787c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	887a      	ldrh	r2, [r7, #2]
 800788a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80078b0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	4b82      	ldr	r3, [pc, #520]	; (8007ac4 <HAL_SPI_TransmitReceive+0x2f8>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	8879      	ldrh	r1, [r7, #2]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	430b      	orrs	r3, r1
 80078c4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0201 	orr.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078de:	d107      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b0f      	cmp	r3, #15
 80078f6:	d970      	bls.n	80079da <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078f8:	e068      	b.n	80079cc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b02      	cmp	r3, #2
 8007906:	d11a      	bne.n	800793e <HAL_SPI_TransmitReceive+0x172>
 8007908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800790a:	2b00      	cmp	r3, #0
 800790c:	d017      	beq.n	800793e <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6812      	ldr	r2, [r2, #0]
 8007918:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	1d1a      	adds	r2, r3, #4
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800793c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	f248 0308 	movw	r3, #32776	; 0x8008
 8007948:	4013      	ands	r3, r2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01a      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x1b8>
 800794e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d017      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800795c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800795e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007964:	1d1a      	adds	r2, r3, #4
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007982:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007984:	f7fa f940 	bl	8001c08 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007990:	429a      	cmp	r2, r3
 8007992:	d803      	bhi.n	800799c <HAL_SPI_TransmitReceive+0x1d0>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d102      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x1d6>
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d114      	bne.n	80079cc <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 fb48 	bl	8008038 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e116      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80079cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d193      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x12e>
 80079d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d190      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x12e>
 80079d8:	e0e8      	b.n	8007bac <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b07      	cmp	r3, #7
 80079e0:	f240 80de 	bls.w	8007ba0 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80079e4:	e066      	b.n	8007ab4 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d119      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x25c>
 80079f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079fe:	881a      	ldrh	r2, [r3, #0]
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a08:	1c9a      	adds	r2, r3, #2
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a26:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d11a      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x2a0>
 8007a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a40:	69ba      	ldr	r2, [r7, #24]
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	b292      	uxth	r2, r2
 8007a46:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4c:	1c9a      	adds	r2, r3, #2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a6a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a6c:	f7fa f8cc 	bl	8001c08 <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d803      	bhi.n	8007a84 <HAL_SPI_TransmitReceive+0x2b8>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d102      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x2be>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d114      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fad4 	bl	8008038 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e0a2      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d195      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x21a>
 8007aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d192      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x21a>
 8007ac0:	e074      	b.n	8007bac <HAL_SPI_TransmitReceive+0x3e0>
 8007ac2:	bf00      	nop
 8007ac4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d11b      	bne.n	8007b0e <HAL_SPI_TransmitReceive+0x342>
 8007ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d018      	beq.n	8007b0e <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3320      	adds	r3, #32
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b0c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d11d      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x38c>
 8007b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d01a      	beq.n	8007b58 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007b56:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b58:	f7fa f856 	bl	8001c08 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d803      	bhi.n	8007b70 <HAL_SPI_TransmitReceive+0x3a4>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6e:	d102      	bne.n	8007b76 <HAL_SPI_TransmitReceive+0x3aa>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d114      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fa5e 	bl	8008038 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e02c      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ba0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d190      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x2fc>
 8007ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d18d      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2108      	movs	r1, #8
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fade 	bl	8008178 <SPI_WaitOnFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc8:	f043 0220 	orr.w	r2, r3, #32
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa30 	bl	8008038 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e001      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8007bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop

08007c04 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007c1c:	6a3a      	ldr	r2, [r7, #32]
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4013      	ands	r3, r2
 8007c22:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c36:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3330      	adds	r3, #48	; 0x30
 8007c3e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d010      	beq.n	8007c6c <HAL_SPI_IRQHandler+0x68>
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c62:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9c3 	bl	8007ff0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007c6a:	e192      	b.n	8007f92 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d113      	bne.n	8007c9e <HAL_SPI_IRQHandler+0x9a>
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10e      	bne.n	8007c9e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
    handled = 1UL;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10f      	bne.n	8007cc8 <HAL_SPI_IRQHandler+0xc4>
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d105      	bne.n	8007cc8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	4798      	blx	r3
    handled = 1UL;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10f      	bne.n	8007cf2 <HAL_SPI_IRQHandler+0xee>
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d105      	bne.n	8007cf2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	4798      	blx	r3
    handled = 1UL;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f040 8147 	bne.w	8007f88 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 808b 	beq.w	8007e1c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699a      	ldr	r2, [r3, #24]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0208 	orr.w	r2, r2, #8
 8007d14:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699a      	ldr	r2, [r3, #24]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0210 	orr.w	r2, r2, #16
 8007d24:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699a      	ldr	r2, [r3, #24]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d34:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691a      	ldr	r2, [r3, #16]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0208 	bic.w	r2, r2, #8
 8007d44:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d13d      	bne.n	8007dd0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007d54:	e036      	b.n	8007dc4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	d90b      	bls.n	8007d76 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d68:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6e:	1d1a      	adds	r2, r3, #4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	665a      	str	r2, [r3, #100]	; 0x64
 8007d74:	e01d      	b.n	8007db2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	2b07      	cmp	r3, #7
 8007d7c:	d90b      	bls.n	8007d96 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	8812      	ldrh	r2, [r2, #0]
 8007d86:	b292      	uxth	r2, r2
 8007d88:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	665a      	str	r2, [r3, #100]	; 0x64
 8007d94:	e00d      	b.n	8007db2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da2:	7812      	ldrb	r2, [r2, #0]
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1c2      	bne.n	8007d56 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f931 	bl	8008038 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f8f7 	bl	8007fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007dee:	e0d0      	b.n	8007f92 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007df0:	7cfb      	ldrb	r3, [r7, #19]
 8007df2:	2b05      	cmp	r3, #5
 8007df4:	d103      	bne.n	8007dfe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f8e6 	bl	8007fc8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007dfc:	e0c6      	b.n	8007f8c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007dfe:	7cfb      	ldrb	r3, [r7, #19]
 8007e00:	2b04      	cmp	r3, #4
 8007e02:	d103      	bne.n	8007e0c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f8d5 	bl	8007fb4 <HAL_SPI_RxCpltCallback>
    return;
 8007e0a:	e0bf      	b.n	8007f8c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007e0c:	7cfb      	ldrb	r3, [r7, #19]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	f040 80bc 	bne.w	8007f8c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f8c3 	bl	8007fa0 <HAL_SPI_TxCpltCallback>
    return;
 8007e1a:	e0b7      	b.n	8007f8c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80b5 	beq.w	8007f92 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00f      	beq.n	8007e52 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e38:	f043 0204 	orr.w	r2, r3, #4
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e50:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d00f      	beq.n	8007e7c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e7a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00f      	beq.n	8007ea6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8c:	f043 0208 	orr.w	r2, r3, #8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00f      	beq.n	8007ed0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f042 0220 	orr.w	r2, r2, #32
 8007ece:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d05a      	beq.n	8007f90 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0201 	bic.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6919      	ldr	r1, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b28      	ldr	r3, [pc, #160]	; (8007f98 <HAL_SPI_IRQHandler+0x394>)
 8007ef6:	400b      	ands	r3, r1
 8007ef8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007f00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f04:	d138      	bne.n	8007f78 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689a      	ldr	r2, [r3, #8]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007f14:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d013      	beq.n	8007f46 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f22:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <HAL_SPI_IRQHandler+0x398>)
 8007f24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fb fa14 	bl	8003358 <HAL_DMA_Abort_IT>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d007      	beq.n	8007f46 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d020      	beq.n	8007f90 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f52:	4a12      	ldr	r2, [pc, #72]	; (8007f9c <HAL_SPI_IRQHandler+0x398>)
 8007f54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fb f9fc 	bl	8003358 <HAL_DMA_Abort_IT>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d014      	beq.n	8007f90 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f76:	e00b      	b.n	8007f90 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f82b 	bl	8007fdc <HAL_SPI_ErrorCallback>
    return;
 8007f86:	e003      	b.n	8007f90 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007f88:	bf00      	nop
 8007f8a:	e002      	b.n	8007f92 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007f8c:	bf00      	nop
 8007f8e:	e000      	b.n	8007f92 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007f90:	bf00      	nop
  }
}
 8007f92:	3728      	adds	r7, #40	; 0x28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	fffffc94 	.word	0xfffffc94
 8007f9c:	08008005 	.word	0x08008005

08007fa0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f7ff ffd6 	bl	8007fdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0208 	orr.w	r2, r2, #8
 8008056:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0210 	orr.w	r2, r2, #16
 8008066:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6919      	ldr	r1, [r3, #16]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b3c      	ldr	r3, [pc, #240]	; (8008174 <SPI_CloseTransfer+0x13c>)
 8008084:	400b      	ands	r3, r1
 8008086:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008096:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d014      	beq.n	80080ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00f      	beq.n	80080ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0220 	orr.w	r2, r2, #32
 80080cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d014      	beq.n	8008104 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00f      	beq.n	8008104 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ea:	f043 0204 	orr.w	r2, r3, #4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699a      	ldr	r2, [r3, #24]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008102:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00f      	beq.n	800812e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008114:	f043 0201 	orr.w	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699a      	ldr	r2, [r3, #24]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800812c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00f      	beq.n	8008158 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800813e:	f043 0208 	orr.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008156:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	fffffc90 	.word	0xfffffc90

08008178 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008188:	e010      	b.n	80081ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800818a:	f7f9 fd3d 	bl	8001c08 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d803      	bhi.n	80081a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d102      	bne.n	80081a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e00f      	b.n	80081cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695a      	ldr	r2, [r3, #20]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4013      	ands	r3, r2
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	bf0c      	ite	eq
 80081bc:	2301      	moveq	r3, #1
 80081be:	2300      	movne	r3, #0
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d0df      	beq.n	800818a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	3307      	adds	r3, #7
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e049      	b.n	80082b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7f9 fb07 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f000 fd11 	bl	8008c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e049      	b.n	800835e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f841 	bl	8008366 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f000 fcba 	bl	8008c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
	...

0800837c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <HAL_TIM_PWM_Start+0x24>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	bf14      	ite	ne
 8008398:	2301      	movne	r3, #1
 800839a:	2300      	moveq	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	e03c      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d109      	bne.n	80083ba <HAL_TIM_PWM_Start+0x3e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	bf14      	ite	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	2300      	moveq	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	e02f      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d109      	bne.n	80083d4 <HAL_TIM_PWM_Start+0x58>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	bf14      	ite	ne
 80083cc:	2301      	movne	r3, #1
 80083ce:	2300      	moveq	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	e022      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b0c      	cmp	r3, #12
 80083d8:	d109      	bne.n	80083ee <HAL_TIM_PWM_Start+0x72>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	bf14      	ite	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	2300      	moveq	r3, #0
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	e015      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d109      	bne.n	8008408 <HAL_TIM_PWM_Start+0x8c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	bf14      	ite	ne
 8008400:	2301      	movne	r3, #1
 8008402:	2300      	moveq	r3, #0
 8008404:	b2db      	uxtb	r3, r3
 8008406:	e008      	b.n	800841a <HAL_TIM_PWM_Start+0x9e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e0ab      	b.n	800857a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xb6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008430:	e023      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xc6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008440:	e01b      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b08      	cmp	r3, #8
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xd6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008450:	e013      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b0c      	cmp	r3, #12
 8008456:	d104      	bne.n	8008462 <HAL_TIM_PWM_Start+0xe6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008460:	e00b      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b10      	cmp	r3, #16
 8008466:	d104      	bne.n	8008472 <HAL_TIM_PWM_Start+0xf6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008470:	e003      	b.n	800847a <HAL_TIM_PWM_Start+0xfe>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	4618      	mov	r0, r3
 8008484:	f001 f80e 	bl	80094a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a3d      	ldr	r2, [pc, #244]	; (8008584 <HAL_TIM_PWM_Start+0x208>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <HAL_TIM_PWM_Start+0x13e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a3c      	ldr	r2, [pc, #240]	; (8008588 <HAL_TIM_PWM_Start+0x20c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00e      	beq.n	80084ba <HAL_TIM_PWM_Start+0x13e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a3a      	ldr	r2, [pc, #232]	; (800858c <HAL_TIM_PWM_Start+0x210>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_TIM_PWM_Start+0x13e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a39      	ldr	r2, [pc, #228]	; (8008590 <HAL_TIM_PWM_Start+0x214>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <HAL_TIM_PWM_Start+0x13e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a37      	ldr	r2, [pc, #220]	; (8008594 <HAL_TIM_PWM_Start+0x218>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d101      	bne.n	80084be <HAL_TIM_PWM_Start+0x142>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <HAL_TIM_PWM_Start+0x144>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a2a      	ldr	r2, [pc, #168]	; (8008584 <HAL_TIM_PWM_Start+0x208>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d02c      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084e6:	d027      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a2a      	ldr	r2, [pc, #168]	; (8008598 <HAL_TIM_PWM_Start+0x21c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d022      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a29      	ldr	r2, [pc, #164]	; (800859c <HAL_TIM_PWM_Start+0x220>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d01d      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a27      	ldr	r2, [pc, #156]	; (80085a0 <HAL_TIM_PWM_Start+0x224>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d018      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1f      	ldr	r2, [pc, #124]	; (8008588 <HAL_TIM_PWM_Start+0x20c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d013      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <HAL_TIM_PWM_Start+0x228>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00e      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1b      	ldr	r2, [pc, #108]	; (800858c <HAL_TIM_PWM_Start+0x210>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1f      	ldr	r2, [pc, #124]	; (80085a8 <HAL_TIM_PWM_Start+0x22c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1bc>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <HAL_TIM_PWM_Start+0x230>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d115      	bne.n	8008564 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	4b1c      	ldr	r3, [pc, #112]	; (80085b0 <HAL_TIM_PWM_Start+0x234>)
 8008540:	4013      	ands	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b06      	cmp	r3, #6
 8008548:	d015      	beq.n	8008576 <HAL_TIM_PWM_Start+0x1fa>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008550:	d011      	beq.n	8008576 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0201 	orr.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008562:	e008      	b.n	8008576 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e000      	b.n	8008578 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40010000 	.word	0x40010000
 8008588:	40010400 	.word	0x40010400
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40001800 	.word	0x40001800
 80085a8:	4000e000 	.word	0x4000e000
 80085ac:	4000e400 	.word	0x4000e400
 80085b0:	00010007 	.word	0x00010007

080085b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d122      	bne.n	8008610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d11b      	bne.n	8008610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f06f 0202 	mvn.w	r2, #2
 80085e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb1c 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80085fc:	e005      	b.n	800860a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb0e 	bl	8008c20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb1f 	bl	8008c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b04      	cmp	r3, #4
 800861c:	d122      	bne.n	8008664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b04      	cmp	r3, #4
 800862a:	d11b      	bne.n	8008664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f06f 0204 	mvn.w	r2, #4
 8008634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2202      	movs	r2, #2
 800863a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 faf2 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 8008650:	e005      	b.n	800865e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fae4 	bl	8008c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 faf5 	bl	8008c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	f003 0308 	and.w	r3, r3, #8
 800866e:	2b08      	cmp	r3, #8
 8008670:	d122      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b08      	cmp	r3, #8
 800867e:	d11b      	bne.n	80086b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0208 	mvn.w	r2, #8
 8008688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2204      	movs	r2, #4
 800868e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fac8 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80086a4:	e005      	b.n	80086b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 faba 	bl	8008c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 facb 	bl	8008c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0310 	and.w	r3, r3, #16
 80086c2:	2b10      	cmp	r3, #16
 80086c4:	d122      	bne.n	800870c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d11b      	bne.n	800870c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f06f 0210 	mvn.w	r2, #16
 80086dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2208      	movs	r2, #8
 80086e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	69db      	ldr	r3, [r3, #28]
 80086ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa9e 	bl	8008c34 <HAL_TIM_IC_CaptureCallback>
 80086f8:	e005      	b.n	8008706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa90 	bl	8008c20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 faa1 	bl	8008c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b01      	cmp	r3, #1
 8008718:	d10e      	bne.n	8008738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b01      	cmp	r3, #1
 8008726:	d107      	bne.n	8008738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0201 	mvn.w	r2, #1
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa6a 	bl	8008c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d10e      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008750:	2b80      	cmp	r3, #128	; 0x80
 8008752:	d107      	bne.n	8008764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800875c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 ff6c 	bl	800963c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008772:	d10e      	bne.n	8008792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d107      	bne.n	8008792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800878a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 ff5f 	bl	8009650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d10e      	bne.n	80087be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087aa:	2b40      	cmp	r3, #64	; 0x40
 80087ac:	d107      	bne.n	80087be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa4f 	bl	8008c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0320 	and.w	r3, r3, #32
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d10e      	bne.n	80087ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d107      	bne.n	80087ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f06f 0220 	mvn.w	r2, #32
 80087e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 ff1f 	bl	8009628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800880e:	2302      	movs	r3, #2
 8008810:	e0ff      	b.n	8008a12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b14      	cmp	r3, #20
 800881e:	f200 80f0 	bhi.w	8008a02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008822:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008828:	0800887d 	.word	0x0800887d
 800882c:	08008a03 	.word	0x08008a03
 8008830:	08008a03 	.word	0x08008a03
 8008834:	08008a03 	.word	0x08008a03
 8008838:	080088bd 	.word	0x080088bd
 800883c:	08008a03 	.word	0x08008a03
 8008840:	08008a03 	.word	0x08008a03
 8008844:	08008a03 	.word	0x08008a03
 8008848:	080088ff 	.word	0x080088ff
 800884c:	08008a03 	.word	0x08008a03
 8008850:	08008a03 	.word	0x08008a03
 8008854:	08008a03 	.word	0x08008a03
 8008858:	0800893f 	.word	0x0800893f
 800885c:	08008a03 	.word	0x08008a03
 8008860:	08008a03 	.word	0x08008a03
 8008864:	08008a03 	.word	0x08008a03
 8008868:	08008981 	.word	0x08008981
 800886c:	08008a03 	.word	0x08008a03
 8008870:	08008a03 	.word	0x08008a03
 8008874:	08008a03 	.word	0x08008a03
 8008878:	080089c1 	.word	0x080089c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68b9      	ldr	r1, [r7, #8]
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fa9a 	bl	8008dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0208 	orr.w	r2, r2, #8
 8008896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6999      	ldr	r1, [r3, #24]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	619a      	str	r2, [r3, #24]
      break;
 80088ba:	e0a5      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fb0a 	bl	8008edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6999      	ldr	r1, [r3, #24]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	021a      	lsls	r2, r3, #8
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	619a      	str	r2, [r3, #24]
      break;
 80088fc:	e084      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fb73 	bl	8008ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69da      	ldr	r2, [r3, #28]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0208 	orr.w	r2, r2, #8
 8008918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0204 	bic.w	r2, r2, #4
 8008928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69d9      	ldr	r1, [r3, #28]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	61da      	str	r2, [r3, #28]
      break;
 800893c:	e064      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fbdb 	bl	8009100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69d9      	ldr	r1, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	021a      	lsls	r2, r3, #8
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	61da      	str	r2, [r3, #28]
      break;
 800897e:	e043      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fc24 	bl	80091d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0208 	orr.w	r2, r2, #8
 800899a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0204 	bic.w	r2, r2, #4
 80089aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089be:	e023      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fc68 	bl	800929c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	021a      	lsls	r2, r3, #8
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a00:	e002      	b.n	8008a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	75fb      	strb	r3, [r7, #23]
      break;
 8008a06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop

08008a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_TIM_ConfigClockSource+0x1c>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e0dc      	b.n	8008bf2 <HAL_TIM_ConfigClockSource+0x1d6>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4b6a      	ldr	r3, [pc, #424]	; (8008bfc <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a64      	ldr	r2, [pc, #400]	; (8008c00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f000 80a9 	beq.w	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a74:	4a62      	ldr	r2, [pc, #392]	; (8008c00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f200 80ae 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a7c:	4a61      	ldr	r2, [pc, #388]	; (8008c04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f000 80a1 	beq.w	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a84:	4a5f      	ldr	r2, [pc, #380]	; (8008c04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	f200 80a6 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a8c:	4a5e      	ldr	r2, [pc, #376]	; (8008c08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	f000 8099 	beq.w	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a94:	4a5c      	ldr	r2, [pc, #368]	; (8008c08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	f200 809e 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008aa0:	f000 8091 	beq.w	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008aa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008aa8:	f200 8096 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab0:	f000 8089 	beq.w	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab8:	f200 808e 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac0:	d03e      	beq.n	8008b40 <HAL_TIM_ConfigClockSource+0x124>
 8008ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac6:	f200 8087 	bhi.w	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ace:	f000 8086 	beq.w	8008bde <HAL_TIM_ConfigClockSource+0x1c2>
 8008ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad6:	d87f      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad8:	2b70      	cmp	r3, #112	; 0x70
 8008ada:	d01a      	beq.n	8008b12 <HAL_TIM_ConfigClockSource+0xf6>
 8008adc:	2b70      	cmp	r3, #112	; 0x70
 8008ade:	d87b      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae0:	2b60      	cmp	r3, #96	; 0x60
 8008ae2:	d050      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x16a>
 8008ae4:	2b60      	cmp	r3, #96	; 0x60
 8008ae6:	d877      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae8:	2b50      	cmp	r3, #80	; 0x50
 8008aea:	d03c      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0x14a>
 8008aec:	2b50      	cmp	r3, #80	; 0x50
 8008aee:	d873      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008af0:	2b40      	cmp	r3, #64	; 0x40
 8008af2:	d058      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x18a>
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	d86f      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008af8:	2b30      	cmp	r3, #48	; 0x30
 8008afa:	d064      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008afc:	2b30      	cmp	r3, #48	; 0x30
 8008afe:	d86b      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d060      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d867      	bhi.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d05c      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d05a      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x1aa>
 8008b10:	e062      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b22:	f000 fc9f 	bl	8009464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	609a      	str	r2, [r3, #8]
      break;
 8008b3e:	e04f      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b50:	f000 fc88 	bl	8009464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b62:	609a      	str	r2, [r3, #8]
      break;
 8008b64:	e03c      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b72:	461a      	mov	r2, r3
 8008b74:	f000 fbf8 	bl	8009368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2150      	movs	r1, #80	; 0x50
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fc52 	bl	8009428 <TIM_ITRx_SetConfig>
      break;
 8008b84:	e02c      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 fc17 	bl	80093c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2160      	movs	r1, #96	; 0x60
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fc42 	bl	8009428 <TIM_ITRx_SetConfig>
      break;
 8008ba4:	e01c      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f000 fbd8 	bl	8009368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2140      	movs	r1, #64	; 0x40
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fc32 	bl	8009428 <TIM_ITRx_SetConfig>
      break;
 8008bc4:	e00c      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f000 fc29 	bl	8009428 <TIM_ITRx_SetConfig>
      break;
 8008bd6:	e003      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
      break;
 8008bdc:	e000      	b.n	8008be0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	ffceff88 	.word	0xffceff88
 8008c00:	00100040 	.word	0x00100040
 8008c04:	00100030 	.word	0x00100030
 8008c08:	00100020 	.word	0x00100020

08008c0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a44      	ldr	r2, [pc, #272]	; (8008d94 <TIM_Base_SetConfig+0x124>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d013      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c8e:	d00f      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a41      	ldr	r2, [pc, #260]	; (8008d98 <TIM_Base_SetConfig+0x128>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d00b      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <TIM_Base_SetConfig+0x12c>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d007      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a3f      	ldr	r2, [pc, #252]	; (8008da0 <TIM_Base_SetConfig+0x130>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d003      	beq.n	8008cb0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3e      	ldr	r2, [pc, #248]	; (8008da4 <TIM_Base_SetConfig+0x134>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d108      	bne.n	8008cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	; (8008d94 <TIM_Base_SetConfig+0x124>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d027      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd0:	d023      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a30      	ldr	r2, [pc, #192]	; (8008d98 <TIM_Base_SetConfig+0x128>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d01f      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2f      	ldr	r2, [pc, #188]	; (8008d9c <TIM_Base_SetConfig+0x12c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01b      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2e      	ldr	r2, [pc, #184]	; (8008da0 <TIM_Base_SetConfig+0x130>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d017      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2d      	ldr	r2, [pc, #180]	; (8008da4 <TIM_Base_SetConfig+0x134>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2c      	ldr	r2, [pc, #176]	; (8008da8 <TIM_Base_SetConfig+0x138>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00f      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2b      	ldr	r2, [pc, #172]	; (8008dac <TIM_Base_SetConfig+0x13c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00b      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a2a      	ldr	r2, [pc, #168]	; (8008db0 <TIM_Base_SetConfig+0x140>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d007      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a29      	ldr	r2, [pc, #164]	; (8008db4 <TIM_Base_SetConfig+0x144>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d003      	beq.n	8008d1a <TIM_Base_SetConfig+0xaa>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a28      	ldr	r2, [pc, #160]	; (8008db8 <TIM_Base_SetConfig+0x148>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d108      	bne.n	8008d2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a10      	ldr	r2, [pc, #64]	; (8008d94 <TIM_Base_SetConfig+0x124>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00f      	beq.n	8008d78 <TIM_Base_SetConfig+0x108>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <TIM_Base_SetConfig+0x134>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00b      	beq.n	8008d78 <TIM_Base_SetConfig+0x108>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <TIM_Base_SetConfig+0x138>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d007      	beq.n	8008d78 <TIM_Base_SetConfig+0x108>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a10      	ldr	r2, [pc, #64]	; (8008dac <TIM_Base_SetConfig+0x13c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_Base_SetConfig+0x108>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0f      	ldr	r2, [pc, #60]	; (8008db0 <TIM_Base_SetConfig+0x140>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d103      	bne.n	8008d80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	615a      	str	r2, [r3, #20]
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40010400 	.word	0x40010400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800
 8008db4:	4000e000 	.word	0x4000e000
 8008db8:	4000e400 	.word	0x4000e400

08008dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0201 	bic.w	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4b37      	ldr	r3, [pc, #220]	; (8008ec4 <TIM_OC1_SetConfig+0x108>)
 8008de8:	4013      	ands	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0303 	bic.w	r3, r3, #3
 8008df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f023 0302 	bic.w	r3, r3, #2
 8008e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a2d      	ldr	r2, [pc, #180]	; (8008ec8 <TIM_OC1_SetConfig+0x10c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00f      	beq.n	8008e38 <TIM_OC1_SetConfig+0x7c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <TIM_OC1_SetConfig+0x110>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <TIM_OC1_SetConfig+0x7c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a2b      	ldr	r2, [pc, #172]	; (8008ed0 <TIM_OC1_SetConfig+0x114>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_OC1_SetConfig+0x7c>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ed4 <TIM_OC1_SetConfig+0x118>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_OC1_SetConfig+0x7c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a29      	ldr	r2, [pc, #164]	; (8008ed8 <TIM_OC1_SetConfig+0x11c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d10c      	bne.n	8008e52 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0308 	bic.w	r3, r3, #8
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0304 	bic.w	r3, r3, #4
 8008e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <TIM_OC1_SetConfig+0x10c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00f      	beq.n	8008e7a <TIM_OC1_SetConfig+0xbe>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ecc <TIM_OC1_SetConfig+0x110>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00b      	beq.n	8008e7a <TIM_OC1_SetConfig+0xbe>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <TIM_OC1_SetConfig+0x114>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d007      	beq.n	8008e7a <TIM_OC1_SetConfig+0xbe>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <TIM_OC1_SetConfig+0x118>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d003      	beq.n	8008e7a <TIM_OC1_SetConfig+0xbe>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <TIM_OC1_SetConfig+0x11c>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d111      	bne.n	8008e9e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	621a      	str	r2, [r3, #32]
}
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	fffeff8f 	.word	0xfffeff8f
 8008ec8:	40010000 	.word	0x40010000
 8008ecc:	40010400 	.word	0x40010400
 8008ed0:	40014000 	.word	0x40014000
 8008ed4:	40014400 	.word	0x40014400
 8008ed8:	40014800 	.word	0x40014800

08008edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f023 0210 	bic.w	r2, r3, #16
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	4b34      	ldr	r3, [pc, #208]	; (8008fd8 <TIM_OC2_SetConfig+0xfc>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	021b      	lsls	r3, r3, #8
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f023 0320 	bic.w	r3, r3, #32
 8008f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	011b      	lsls	r3, r3, #4
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <TIM_OC2_SetConfig+0x100>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d003      	beq.n	8008f44 <TIM_OC2_SetConfig+0x68>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a28      	ldr	r2, [pc, #160]	; (8008fe0 <TIM_OC2_SetConfig+0x104>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d10d      	bne.n	8008f60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <TIM_OC2_SetConfig+0x100>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00f      	beq.n	8008f88 <TIM_OC2_SetConfig+0xac>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1d      	ldr	r2, [pc, #116]	; (8008fe0 <TIM_OC2_SetConfig+0x104>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00b      	beq.n	8008f88 <TIM_OC2_SetConfig+0xac>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1c      	ldr	r2, [pc, #112]	; (8008fe4 <TIM_OC2_SetConfig+0x108>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d007      	beq.n	8008f88 <TIM_OC2_SetConfig+0xac>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1b      	ldr	r2, [pc, #108]	; (8008fe8 <TIM_OC2_SetConfig+0x10c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d003      	beq.n	8008f88 <TIM_OC2_SetConfig+0xac>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1a      	ldr	r2, [pc, #104]	; (8008fec <TIM_OC2_SetConfig+0x110>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d113      	bne.n	8008fb0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	621a      	str	r2, [r3, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	feff8fff 	.word	0xfeff8fff
 8008fdc:	40010000 	.word	0x40010000
 8008fe0:	40010400 	.word	0x40010400
 8008fe4:	40014000 	.word	0x40014000
 8008fe8:	40014400 	.word	0x40014400
 8008fec:	40014800 	.word	0x40014800

08008ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4b33      	ldr	r3, [pc, #204]	; (80090e8 <TIM_OC3_SetConfig+0xf8>)
 800901c:	4013      	ands	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0303 	bic.w	r3, r3, #3
 8009026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4313      	orrs	r3, r2
 8009044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a28      	ldr	r2, [pc, #160]	; (80090ec <TIM_OC3_SetConfig+0xfc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d003      	beq.n	8009056 <TIM_OC3_SetConfig+0x66>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a27      	ldr	r2, [pc, #156]	; (80090f0 <TIM_OC3_SetConfig+0x100>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d10d      	bne.n	8009072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800905c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	021b      	lsls	r3, r3, #8
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	4313      	orrs	r3, r2
 8009068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a1d      	ldr	r2, [pc, #116]	; (80090ec <TIM_OC3_SetConfig+0xfc>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d00f      	beq.n	800909a <TIM_OC3_SetConfig+0xaa>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a1c      	ldr	r2, [pc, #112]	; (80090f0 <TIM_OC3_SetConfig+0x100>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00b      	beq.n	800909a <TIM_OC3_SetConfig+0xaa>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a1b      	ldr	r2, [pc, #108]	; (80090f4 <TIM_OC3_SetConfig+0x104>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d007      	beq.n	800909a <TIM_OC3_SetConfig+0xaa>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <TIM_OC3_SetConfig+0x108>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d003      	beq.n	800909a <TIM_OC3_SetConfig+0xaa>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a19      	ldr	r2, [pc, #100]	; (80090fc <TIM_OC3_SetConfig+0x10c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d113      	bne.n	80090c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	621a      	str	r2, [r3, #32]
}
 80090dc:	bf00      	nop
 80090de:	371c      	adds	r7, #28
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	fffeff8f 	.word	0xfffeff8f
 80090ec:	40010000 	.word	0x40010000
 80090f0:	40010400 	.word	0x40010400
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40014400 	.word	0x40014400
 80090fc:	40014800 	.word	0x40014800

08009100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4b24      	ldr	r3, [pc, #144]	; (80091bc <TIM_OC4_SetConfig+0xbc>)
 800912c:	4013      	ands	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800914a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	031b      	lsls	r3, r3, #12
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a19      	ldr	r2, [pc, #100]	; (80091c0 <TIM_OC4_SetConfig+0xc0>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d00f      	beq.n	8009180 <TIM_OC4_SetConfig+0x80>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <TIM_OC4_SetConfig+0xc4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00b      	beq.n	8009180 <TIM_OC4_SetConfig+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a17      	ldr	r2, [pc, #92]	; (80091c8 <TIM_OC4_SetConfig+0xc8>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d007      	beq.n	8009180 <TIM_OC4_SetConfig+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a16      	ldr	r2, [pc, #88]	; (80091cc <TIM_OC4_SetConfig+0xcc>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC4_SetConfig+0x80>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a15      	ldr	r2, [pc, #84]	; (80091d0 <TIM_OC4_SetConfig+0xd0>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d109      	bne.n	8009194 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	019b      	lsls	r3, r3, #6
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	feff8fff 	.word	0xfeff8fff
 80091c0:	40010000 	.word	0x40010000
 80091c4:	40010400 	.word	0x40010400
 80091c8:	40014000 	.word	0x40014000
 80091cc:	40014400 	.word	0x40014400
 80091d0:	40014800 	.word	0x40014800

080091d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4b21      	ldr	r3, [pc, #132]	; (8009284 <TIM_OC5_SetConfig+0xb0>)
 8009200:	4013      	ands	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4313      	orrs	r3, r2
 800920c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a18      	ldr	r2, [pc, #96]	; (8009288 <TIM_OC5_SetConfig+0xb4>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d00f      	beq.n	800924a <TIM_OC5_SetConfig+0x76>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a17      	ldr	r2, [pc, #92]	; (800928c <TIM_OC5_SetConfig+0xb8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00b      	beq.n	800924a <TIM_OC5_SetConfig+0x76>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a16      	ldr	r2, [pc, #88]	; (8009290 <TIM_OC5_SetConfig+0xbc>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d007      	beq.n	800924a <TIM_OC5_SetConfig+0x76>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a15      	ldr	r2, [pc, #84]	; (8009294 <TIM_OC5_SetConfig+0xc0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d003      	beq.n	800924a <TIM_OC5_SetConfig+0x76>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a14      	ldr	r2, [pc, #80]	; (8009298 <TIM_OC5_SetConfig+0xc4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d109      	bne.n	800925e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	021b      	lsls	r3, r3, #8
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	fffeff8f 	.word	0xfffeff8f
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400
 8009290:	40014000 	.word	0x40014000
 8009294:	40014400 	.word	0x40014400
 8009298:	40014800 	.word	0x40014800

0800929c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4b22      	ldr	r3, [pc, #136]	; (8009350 <TIM_OC6_SetConfig+0xb4>)
 80092c8:	4013      	ands	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	021b      	lsls	r3, r3, #8
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	051b      	lsls	r3, r3, #20
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a19      	ldr	r2, [pc, #100]	; (8009354 <TIM_OC6_SetConfig+0xb8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00f      	beq.n	8009314 <TIM_OC6_SetConfig+0x78>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a18      	ldr	r2, [pc, #96]	; (8009358 <TIM_OC6_SetConfig+0xbc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00b      	beq.n	8009314 <TIM_OC6_SetConfig+0x78>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a17      	ldr	r2, [pc, #92]	; (800935c <TIM_OC6_SetConfig+0xc0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <TIM_OC6_SetConfig+0x78>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a16      	ldr	r2, [pc, #88]	; (8009360 <TIM_OC6_SetConfig+0xc4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d003      	beq.n	8009314 <TIM_OC6_SetConfig+0x78>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a15      	ldr	r2, [pc, #84]	; (8009364 <TIM_OC6_SetConfig+0xc8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d109      	bne.n	8009328 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800931a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68fa      	ldr	r2, [r7, #12]
 8009332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	feff8fff 	.word	0xfeff8fff
 8009354:	40010000 	.word	0x40010000
 8009358:	40010400 	.word	0x40010400
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800

08009368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0201 	bic.w	r2, r3, #1
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f023 030a 	bic.w	r3, r3, #10
 80093a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	621a      	str	r2, [r3, #32]
}
 80093ba:	bf00      	nop
 80093bc:	371c      	adds	r7, #28
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b087      	sub	sp, #28
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	60f8      	str	r0, [r7, #12]
 80093ce:	60b9      	str	r1, [r7, #8]
 80093d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0210 	bic.w	r2, r3, #16
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	4313      	orrs	r3, r2
 800940c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	621a      	str	r2, [r3, #32]
}
 800941a:	bf00      	nop
 800941c:	371c      	adds	r7, #28
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
	...

08009428 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	4b09      	ldr	r3, [pc, #36]	; (8009460 <TIM_ITRx_SetConfig+0x38>)
 800943c:	4013      	ands	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4313      	orrs	r3, r2
 8009446:	f043 0307 	orr.w	r3, r3, #7
 800944a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	609a      	str	r2, [r3, #8]
}
 8009452:	bf00      	nop
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	ffcfff8f 	.word	0xffcfff8f

08009464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800947e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	021a      	lsls	r2, r3, #8
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	431a      	orrs	r2, r3
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	4313      	orrs	r3, r2
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	609a      	str	r2, [r3, #8]
}
 8009498:	bf00      	nop
 800949a:	371c      	adds	r7, #28
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f003 031f 	and.w	r3, r3, #31
 80094b6:	2201      	movs	r2, #1
 80094b8:	fa02 f303 	lsl.w	r3, r2, r3
 80094bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a1a      	ldr	r2, [r3, #32]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	43db      	mvns	r3, r3
 80094c6:	401a      	ands	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1a      	ldr	r2, [r3, #32]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f003 031f 	and.w	r3, r3, #31
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	fa01 f303 	lsl.w	r3, r1, r3
 80094dc:	431a      	orrs	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	621a      	str	r2, [r3, #32]
}
 80094e2:	bf00      	nop
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009500:	2b01      	cmp	r3, #1
 8009502:	d101      	bne.n	8009508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009504:	2302      	movs	r3, #2
 8009506:	e077      	b.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a35      	ldr	r2, [pc, #212]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d004      	beq.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a34      	ldr	r2, [pc, #208]	; (8009608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d108      	bne.n	800954e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009542:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4313      	orrs	r3, r2
 800955e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a25      	ldr	r2, [pc, #148]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d02c      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957a:	d027      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a22      	ldr	r2, [pc, #136]	; (800960c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d022      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a21      	ldr	r2, [pc, #132]	; (8009610 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d01d      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1f      	ldr	r2, [pc, #124]	; (8009614 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d018      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a1a      	ldr	r2, [pc, #104]	; (8009608 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d013      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a1b      	ldr	r2, [pc, #108]	; (8009618 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00e      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a1a      	ldr	r2, [pc, #104]	; (800961c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d009      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a18      	ldr	r2, [pc, #96]	; (8009620 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d004      	beq.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a17      	ldr	r2, [pc, #92]	; (8009624 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d10c      	bne.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	40010000 	.word	0x40010000
 8009608:	40010400 	.word	0x40010400
 800960c:	40000400 	.word	0x40000400
 8009610:	40000800 	.word	0x40000800
 8009614:	40000c00 	.word	0x40000c00
 8009618:	40001800 	.word	0x40001800
 800961c:	40014000 	.word	0x40014000
 8009620:	4000e000 	.word	0x4000e000
 8009624:	4000e400 	.word	0x4000e400

08009628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e042      	b.n	80096fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7f8 f9a5 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2224      	movs	r2, #36	; 0x24
 8009692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0201 	bic.w	r2, r2, #1
 80096a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f8ba 	bl	8009820 <UART_SetConfig>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d101      	bne.n	80096b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e022      	b.n	80096fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 ff1a 	bl	800a4f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f042 0201 	orr.w	r2, r2, #1
 80096f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 ffa1 	bl	800a63c <UART_CheckIdleState>
 80096fa:	4603      	mov	r3, r0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b08a      	sub	sp, #40	; 0x28
 8009708:	af02      	add	r7, sp, #8
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	4613      	mov	r3, r2
 8009712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971a:	2b20      	cmp	r3, #32
 800971c:	d17b      	bne.n	8009816 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <HAL_UART_Transmit+0x26>
 8009724:	88fb      	ldrh	r3, [r7, #6]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e074      	b.n	8009818 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2221      	movs	r2, #33	; 0x21
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800973e:	f7f8 fa63 	bl	8001c08 <HAL_GetTick>
 8009742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	88fa      	ldrh	r2, [r7, #6]
 8009748:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975c:	d108      	bne.n	8009770 <HAL_UART_Transmit+0x6c>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d104      	bne.n	8009770 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	61bb      	str	r3, [r7, #24]
 800976e:	e003      	b.n	8009778 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009774:	2300      	movs	r3, #0
 8009776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009778:	e030      	b.n	80097dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2200      	movs	r2, #0
 8009782:	2180      	movs	r1, #128	; 0x80
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f001 f803 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	e03d      	b.n	8009818 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10b      	bne.n	80097ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	3302      	adds	r3, #2
 80097b6:	61bb      	str	r3, [r7, #24]
 80097b8:	e007      	b.n	80097ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	781a      	ldrb	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	3301      	adds	r3, #1
 80097c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1c8      	bne.n	800977a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2200      	movs	r2, #0
 80097f0:	2140      	movs	r1, #64	; 0x40
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 ffcc 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e006      	b.n	8009818 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	e000      	b.n	8009818 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009816:	2302      	movs	r3, #2
  }
}
 8009818:	4618      	mov	r0, r3
 800981a:	3720      	adds	r7, #32
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009824:	b092      	sub	sp, #72	; 0x48
 8009826:	af00      	add	r7, sp, #0
 8009828:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	431a      	orrs	r2, r3
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	431a      	orrs	r2, r3
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	4313      	orrs	r3, r2
 8009846:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4bbe      	ldr	r3, [pc, #760]	; (8009b48 <UART_SetConfig+0x328>)
 8009850:	4013      	ands	r3, r2
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009858:	430b      	orrs	r3, r1
 800985a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4ab3      	ldr	r2, [pc, #716]	; (8009b4c <UART_SetConfig+0x32c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d004      	beq.n	800988c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009888:	4313      	orrs	r3, r2
 800988a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	4baf      	ldr	r3, [pc, #700]	; (8009b50 <UART_SetConfig+0x330>)
 8009894:	4013      	ands	r3, r2
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800989c:	430b      	orrs	r3, r1
 800989e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	f023 010f 	bic.w	r1, r3, #15
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4aa6      	ldr	r2, [pc, #664]	; (8009b54 <UART_SetConfig+0x334>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d177      	bne.n	80099b0 <UART_SetConfig+0x190>
 80098c0:	4ba5      	ldr	r3, [pc, #660]	; (8009b58 <UART_SetConfig+0x338>)
 80098c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c8:	2b28      	cmp	r3, #40	; 0x28
 80098ca:	d86d      	bhi.n	80099a8 <UART_SetConfig+0x188>
 80098cc:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <UART_SetConfig+0xb4>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	08009979 	.word	0x08009979
 80098d8:	080099a9 	.word	0x080099a9
 80098dc:	080099a9 	.word	0x080099a9
 80098e0:	080099a9 	.word	0x080099a9
 80098e4:	080099a9 	.word	0x080099a9
 80098e8:	080099a9 	.word	0x080099a9
 80098ec:	080099a9 	.word	0x080099a9
 80098f0:	080099a9 	.word	0x080099a9
 80098f4:	08009981 	.word	0x08009981
 80098f8:	080099a9 	.word	0x080099a9
 80098fc:	080099a9 	.word	0x080099a9
 8009900:	080099a9 	.word	0x080099a9
 8009904:	080099a9 	.word	0x080099a9
 8009908:	080099a9 	.word	0x080099a9
 800990c:	080099a9 	.word	0x080099a9
 8009910:	080099a9 	.word	0x080099a9
 8009914:	08009989 	.word	0x08009989
 8009918:	080099a9 	.word	0x080099a9
 800991c:	080099a9 	.word	0x080099a9
 8009920:	080099a9 	.word	0x080099a9
 8009924:	080099a9 	.word	0x080099a9
 8009928:	080099a9 	.word	0x080099a9
 800992c:	080099a9 	.word	0x080099a9
 8009930:	080099a9 	.word	0x080099a9
 8009934:	08009991 	.word	0x08009991
 8009938:	080099a9 	.word	0x080099a9
 800993c:	080099a9 	.word	0x080099a9
 8009940:	080099a9 	.word	0x080099a9
 8009944:	080099a9 	.word	0x080099a9
 8009948:	080099a9 	.word	0x080099a9
 800994c:	080099a9 	.word	0x080099a9
 8009950:	080099a9 	.word	0x080099a9
 8009954:	08009999 	.word	0x08009999
 8009958:	080099a9 	.word	0x080099a9
 800995c:	080099a9 	.word	0x080099a9
 8009960:	080099a9 	.word	0x080099a9
 8009964:	080099a9 	.word	0x080099a9
 8009968:	080099a9 	.word	0x080099a9
 800996c:	080099a9 	.word	0x080099a9
 8009970:	080099a9 	.word	0x080099a9
 8009974:	080099a1 	.word	0x080099a1
 8009978:	2301      	movs	r3, #1
 800997a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997e:	e326      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009980:	2304      	movs	r3, #4
 8009982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009986:	e322      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009988:	2308      	movs	r3, #8
 800998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998e:	e31e      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009996:	e31a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009998:	2320      	movs	r3, #32
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e316      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099a0:	2340      	movs	r3, #64	; 0x40
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e312      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e30e      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a69      	ldr	r2, [pc, #420]	; (8009b5c <UART_SetConfig+0x33c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d130      	bne.n	8009a1c <UART_SetConfig+0x1fc>
 80099ba:	4b67      	ldr	r3, [pc, #412]	; (8009b58 <UART_SetConfig+0x338>)
 80099bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099be:	f003 0307 	and.w	r3, r3, #7
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	d826      	bhi.n	8009a14 <UART_SetConfig+0x1f4>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <UART_SetConfig+0x1ac>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	080099e5 	.word	0x080099e5
 80099d0:	080099ed 	.word	0x080099ed
 80099d4:	080099f5 	.word	0x080099f5
 80099d8:	080099fd 	.word	0x080099fd
 80099dc:	08009a05 	.word	0x08009a05
 80099e0:	08009a0d 	.word	0x08009a0d
 80099e4:	2300      	movs	r3, #0
 80099e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ea:	e2f0      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099ec:	2304      	movs	r3, #4
 80099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f2:	e2ec      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099f4:	2308      	movs	r3, #8
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e2e8      	b.n	8009fce <UART_SetConfig+0x7ae>
 80099fc:	2310      	movs	r3, #16
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e2e4      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a04:	2320      	movs	r3, #32
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e2e0      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e2dc      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a14:	2380      	movs	r3, #128	; 0x80
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e2d8      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a4f      	ldr	r2, [pc, #316]	; (8009b60 <UART_SetConfig+0x340>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d130      	bne.n	8009a88 <UART_SetConfig+0x268>
 8009a26:	4b4c      	ldr	r3, [pc, #304]	; (8009b58 <UART_SetConfig+0x338>)
 8009a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2a:	f003 0307 	and.w	r3, r3, #7
 8009a2e:	2b05      	cmp	r3, #5
 8009a30:	d826      	bhi.n	8009a80 <UART_SetConfig+0x260>
 8009a32:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <UART_SetConfig+0x218>)
 8009a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a38:	08009a51 	.word	0x08009a51
 8009a3c:	08009a59 	.word	0x08009a59
 8009a40:	08009a61 	.word	0x08009a61
 8009a44:	08009a69 	.word	0x08009a69
 8009a48:	08009a71 	.word	0x08009a71
 8009a4c:	08009a79 	.word	0x08009a79
 8009a50:	2300      	movs	r3, #0
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e2ba      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a58:	2304      	movs	r3, #4
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e2b6      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a60:	2308      	movs	r3, #8
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e2b2      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e2ae      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a70:	2320      	movs	r3, #32
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e2aa      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a78:	2340      	movs	r3, #64	; 0x40
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e2a6      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a80:	2380      	movs	r3, #128	; 0x80
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2a2      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a35      	ldr	r2, [pc, #212]	; (8009b64 <UART_SetConfig+0x344>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d130      	bne.n	8009af4 <UART_SetConfig+0x2d4>
 8009a92:	4b31      	ldr	r3, [pc, #196]	; (8009b58 <UART_SetConfig+0x338>)
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d826      	bhi.n	8009aec <UART_SetConfig+0x2cc>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <UART_SetConfig+0x284>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009abd 	.word	0x08009abd
 8009aa8:	08009ac5 	.word	0x08009ac5
 8009aac:	08009acd 	.word	0x08009acd
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009add 	.word	0x08009add
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	2300      	movs	r3, #0
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e284      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e280      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009acc:	2308      	movs	r3, #8
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e27c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e278      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e274      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e270      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e26c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <UART_SetConfig+0x348>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d142      	bne.n	8009b84 <UART_SetConfig+0x364>
 8009afe:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <UART_SetConfig+0x338>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b02:	f003 0307 	and.w	r3, r3, #7
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d838      	bhi.n	8009b7c <UART_SetConfig+0x35c>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <UART_SetConfig+0x2f0>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b6d 	.word	0x08009b6d
 8009b24:	08009b75 	.word	0x08009b75
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e24e      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b36:	e24a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b38:	2308      	movs	r3, #8
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e246      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b40:	2310      	movs	r3, #16
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e242      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b48:	cfff69f3 	.word	0xcfff69f3
 8009b4c:	58000c00 	.word	0x58000c00
 8009b50:	11fff4ff 	.word	0x11fff4ff
 8009b54:	40011000 	.word	0x40011000
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	40004400 	.word	0x40004400
 8009b60:	40004800 	.word	0x40004800
 8009b64:	40004c00 	.word	0x40004c00
 8009b68:	40005000 	.word	0x40005000
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b72:	e22c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b74:	2340      	movs	r3, #64	; 0x40
 8009b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7a:	e228      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b7c:	2380      	movs	r3, #128	; 0x80
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e224      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4ab1      	ldr	r2, [pc, #708]	; (8009e50 <UART_SetConfig+0x630>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d176      	bne.n	8009c7c <UART_SetConfig+0x45c>
 8009b8e:	4bb1      	ldr	r3, [pc, #708]	; (8009e54 <UART_SetConfig+0x634>)
 8009b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b96:	2b28      	cmp	r3, #40	; 0x28
 8009b98:	d86c      	bhi.n	8009c74 <UART_SetConfig+0x454>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <UART_SetConfig+0x380>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009c45 	.word	0x08009c45
 8009ba4:	08009c75 	.word	0x08009c75
 8009ba8:	08009c75 	.word	0x08009c75
 8009bac:	08009c75 	.word	0x08009c75
 8009bb0:	08009c75 	.word	0x08009c75
 8009bb4:	08009c75 	.word	0x08009c75
 8009bb8:	08009c75 	.word	0x08009c75
 8009bbc:	08009c75 	.word	0x08009c75
 8009bc0:	08009c4d 	.word	0x08009c4d
 8009bc4:	08009c75 	.word	0x08009c75
 8009bc8:	08009c75 	.word	0x08009c75
 8009bcc:	08009c75 	.word	0x08009c75
 8009bd0:	08009c75 	.word	0x08009c75
 8009bd4:	08009c75 	.word	0x08009c75
 8009bd8:	08009c75 	.word	0x08009c75
 8009bdc:	08009c75 	.word	0x08009c75
 8009be0:	08009c55 	.word	0x08009c55
 8009be4:	08009c75 	.word	0x08009c75
 8009be8:	08009c75 	.word	0x08009c75
 8009bec:	08009c75 	.word	0x08009c75
 8009bf0:	08009c75 	.word	0x08009c75
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c75 	.word	0x08009c75
 8009bfc:	08009c75 	.word	0x08009c75
 8009c00:	08009c5d 	.word	0x08009c5d
 8009c04:	08009c75 	.word	0x08009c75
 8009c08:	08009c75 	.word	0x08009c75
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009c75 	.word	0x08009c75
 8009c14:	08009c75 	.word	0x08009c75
 8009c18:	08009c75 	.word	0x08009c75
 8009c1c:	08009c75 	.word	0x08009c75
 8009c20:	08009c65 	.word	0x08009c65
 8009c24:	08009c75 	.word	0x08009c75
 8009c28:	08009c75 	.word	0x08009c75
 8009c2c:	08009c75 	.word	0x08009c75
 8009c30:	08009c75 	.word	0x08009c75
 8009c34:	08009c75 	.word	0x08009c75
 8009c38:	08009c75 	.word	0x08009c75
 8009c3c:	08009c75 	.word	0x08009c75
 8009c40:	08009c6d 	.word	0x08009c6d
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4a:	e1c0      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c4c:	2304      	movs	r3, #4
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c52:	e1bc      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c54:	2308      	movs	r3, #8
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e1b8      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1b4      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c64:	2320      	movs	r3, #32
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1b0      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c6c:	2340      	movs	r3, #64	; 0x40
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1ac      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1a8      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a75      	ldr	r2, [pc, #468]	; (8009e58 <UART_SetConfig+0x638>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d130      	bne.n	8009ce8 <UART_SetConfig+0x4c8>
 8009c86:	4b73      	ldr	r3, [pc, #460]	; (8009e54 <UART_SetConfig+0x634>)
 8009c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	2b05      	cmp	r3, #5
 8009c90:	d826      	bhi.n	8009ce0 <UART_SetConfig+0x4c0>
 8009c92:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <UART_SetConfig+0x478>)
 8009c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c98:	08009cb1 	.word	0x08009cb1
 8009c9c:	08009cb9 	.word	0x08009cb9
 8009ca0:	08009cc1 	.word	0x08009cc1
 8009ca4:	08009cc9 	.word	0x08009cc9
 8009ca8:	08009cd1 	.word	0x08009cd1
 8009cac:	08009cd9 	.word	0x08009cd9
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb6:	e18a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009cb8:	2304      	movs	r3, #4
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cbe:	e186      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e182      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009cc8:	2310      	movs	r3, #16
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e17e      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e17a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e176      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e172      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a5b      	ldr	r2, [pc, #364]	; (8009e5c <UART_SetConfig+0x63c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d130      	bne.n	8009d54 <UART_SetConfig+0x534>
 8009cf2:	4b58      	ldr	r3, [pc, #352]	; (8009e54 <UART_SetConfig+0x634>)
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d826      	bhi.n	8009d4c <UART_SetConfig+0x52c>
 8009cfe:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <UART_SetConfig+0x4e4>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009d1d 	.word	0x08009d1d
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d2d 	.word	0x08009d2d
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d22:	e154      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d24:	2304      	movs	r3, #4
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d2a:	e150      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e14c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d34:	2310      	movs	r3, #16
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e148      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e144      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e140      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d4c:	2380      	movs	r3, #128	; 0x80
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e13c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a41      	ldr	r2, [pc, #260]	; (8009e60 <UART_SetConfig+0x640>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	f040 8082 	bne.w	8009e64 <UART_SetConfig+0x644>
 8009d60:	4b3c      	ldr	r3, [pc, #240]	; (8009e54 <UART_SetConfig+0x634>)
 8009d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d68:	2b28      	cmp	r3, #40	; 0x28
 8009d6a:	d86d      	bhi.n	8009e48 <UART_SetConfig+0x628>
 8009d6c:	a201      	add	r2, pc, #4	; (adr r2, 8009d74 <UART_SetConfig+0x554>)
 8009d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d72:	bf00      	nop
 8009d74:	08009e19 	.word	0x08009e19
 8009d78:	08009e49 	.word	0x08009e49
 8009d7c:	08009e49 	.word	0x08009e49
 8009d80:	08009e49 	.word	0x08009e49
 8009d84:	08009e49 	.word	0x08009e49
 8009d88:	08009e49 	.word	0x08009e49
 8009d8c:	08009e49 	.word	0x08009e49
 8009d90:	08009e49 	.word	0x08009e49
 8009d94:	08009e21 	.word	0x08009e21
 8009d98:	08009e49 	.word	0x08009e49
 8009d9c:	08009e49 	.word	0x08009e49
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e49 	.word	0x08009e49
 8009da8:	08009e49 	.word	0x08009e49
 8009dac:	08009e49 	.word	0x08009e49
 8009db0:	08009e49 	.word	0x08009e49
 8009db4:	08009e29 	.word	0x08009e29
 8009db8:	08009e49 	.word	0x08009e49
 8009dbc:	08009e49 	.word	0x08009e49
 8009dc0:	08009e49 	.word	0x08009e49
 8009dc4:	08009e49 	.word	0x08009e49
 8009dc8:	08009e49 	.word	0x08009e49
 8009dcc:	08009e49 	.word	0x08009e49
 8009dd0:	08009e49 	.word	0x08009e49
 8009dd4:	08009e31 	.word	0x08009e31
 8009dd8:	08009e49 	.word	0x08009e49
 8009ddc:	08009e49 	.word	0x08009e49
 8009de0:	08009e49 	.word	0x08009e49
 8009de4:	08009e49 	.word	0x08009e49
 8009de8:	08009e49 	.word	0x08009e49
 8009dec:	08009e49 	.word	0x08009e49
 8009df0:	08009e49 	.word	0x08009e49
 8009df4:	08009e39 	.word	0x08009e39
 8009df8:	08009e49 	.word	0x08009e49
 8009dfc:	08009e49 	.word	0x08009e49
 8009e00:	08009e49 	.word	0x08009e49
 8009e04:	08009e49 	.word	0x08009e49
 8009e08:	08009e49 	.word	0x08009e49
 8009e0c:	08009e49 	.word	0x08009e49
 8009e10:	08009e49 	.word	0x08009e49
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1e:	e0d6      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e20:	2304      	movs	r3, #4
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e0d2      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e28:	2308      	movs	r3, #8
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e0ce      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e30:	2310      	movs	r3, #16
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e0ca      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e0c6      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e40:	2340      	movs	r3, #64	; 0x40
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e0c2      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e48:	2380      	movs	r3, #128	; 0x80
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e0be      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009e50:	40011400 	.word	0x40011400
 8009e54:	58024400 	.word	0x58024400
 8009e58:	40007800 	.word	0x40007800
 8009e5c:	40007c00 	.word	0x40007c00
 8009e60:	40011800 	.word	0x40011800
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4aad      	ldr	r2, [pc, #692]	; (800a120 <UART_SetConfig+0x900>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d176      	bne.n	8009f5c <UART_SetConfig+0x73c>
 8009e6e:	4bad      	ldr	r3, [pc, #692]	; (800a124 <UART_SetConfig+0x904>)
 8009e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e76:	2b28      	cmp	r3, #40	; 0x28
 8009e78:	d86c      	bhi.n	8009f54 <UART_SetConfig+0x734>
 8009e7a:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <UART_SetConfig+0x660>)
 8009e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e80:	08009f25 	.word	0x08009f25
 8009e84:	08009f55 	.word	0x08009f55
 8009e88:	08009f55 	.word	0x08009f55
 8009e8c:	08009f55 	.word	0x08009f55
 8009e90:	08009f55 	.word	0x08009f55
 8009e94:	08009f55 	.word	0x08009f55
 8009e98:	08009f55 	.word	0x08009f55
 8009e9c:	08009f55 	.word	0x08009f55
 8009ea0:	08009f2d 	.word	0x08009f2d
 8009ea4:	08009f55 	.word	0x08009f55
 8009ea8:	08009f55 	.word	0x08009f55
 8009eac:	08009f55 	.word	0x08009f55
 8009eb0:	08009f55 	.word	0x08009f55
 8009eb4:	08009f55 	.word	0x08009f55
 8009eb8:	08009f55 	.word	0x08009f55
 8009ebc:	08009f55 	.word	0x08009f55
 8009ec0:	08009f35 	.word	0x08009f35
 8009ec4:	08009f55 	.word	0x08009f55
 8009ec8:	08009f55 	.word	0x08009f55
 8009ecc:	08009f55 	.word	0x08009f55
 8009ed0:	08009f55 	.word	0x08009f55
 8009ed4:	08009f55 	.word	0x08009f55
 8009ed8:	08009f55 	.word	0x08009f55
 8009edc:	08009f55 	.word	0x08009f55
 8009ee0:	08009f3d 	.word	0x08009f3d
 8009ee4:	08009f55 	.word	0x08009f55
 8009ee8:	08009f55 	.word	0x08009f55
 8009eec:	08009f55 	.word	0x08009f55
 8009ef0:	08009f55 	.word	0x08009f55
 8009ef4:	08009f55 	.word	0x08009f55
 8009ef8:	08009f55 	.word	0x08009f55
 8009efc:	08009f55 	.word	0x08009f55
 8009f00:	08009f45 	.word	0x08009f45
 8009f04:	08009f55 	.word	0x08009f55
 8009f08:	08009f55 	.word	0x08009f55
 8009f0c:	08009f55 	.word	0x08009f55
 8009f10:	08009f55 	.word	0x08009f55
 8009f14:	08009f55 	.word	0x08009f55
 8009f18:	08009f55 	.word	0x08009f55
 8009f1c:	08009f55 	.word	0x08009f55
 8009f20:	08009f4d 	.word	0x08009f4d
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e050      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f2c:	2304      	movs	r3, #4
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e04c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f34:	2308      	movs	r3, #8
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3a:	e048      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f3c:	2310      	movs	r3, #16
 8009f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f42:	e044      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f44:	2320      	movs	r3, #32
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4a:	e040      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f4c:	2340      	movs	r3, #64	; 0x40
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f52:	e03c      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f54:	2380      	movs	r3, #128	; 0x80
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e038      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a71      	ldr	r2, [pc, #452]	; (800a128 <UART_SetConfig+0x908>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d130      	bne.n	8009fc8 <UART_SetConfig+0x7a8>
 8009f66:	4b6f      	ldr	r3, [pc, #444]	; (800a124 <UART_SetConfig+0x904>)
 8009f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f6a:	f003 0307 	and.w	r3, r3, #7
 8009f6e:	2b05      	cmp	r3, #5
 8009f70:	d826      	bhi.n	8009fc0 <UART_SetConfig+0x7a0>
 8009f72:	a201      	add	r2, pc, #4	; (adr r2, 8009f78 <UART_SetConfig+0x758>)
 8009f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f78:	08009f91 	.word	0x08009f91
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009fa1 	.word	0x08009fa1
 8009f84:	08009fa9 	.word	0x08009fa9
 8009f88:	08009fb1 	.word	0x08009fb1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	2302      	movs	r3, #2
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e01a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9e:	e016      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e012      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e00e      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e00a      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e006      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e002      	b.n	8009fce <UART_SetConfig+0x7ae>
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a55      	ldr	r2, [pc, #340]	; (800a128 <UART_SetConfig+0x908>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	f040 80f8 	bne.w	800a1ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fde:	2b20      	cmp	r3, #32
 8009fe0:	dc46      	bgt.n	800a070 <UART_SetConfig+0x850>
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	db75      	blt.n	800a0d2 <UART_SetConfig+0x8b2>
 8009fe6:	3b02      	subs	r3, #2
 8009fe8:	2b1e      	cmp	r3, #30
 8009fea:	d872      	bhi.n	800a0d2 <UART_SetConfig+0x8b2>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x7d4>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a077 	.word	0x0800a077
 8009ff8:	0800a0d3 	.word	0x0800a0d3
 8009ffc:	0800a07f 	.word	0x0800a07f
 800a000:	0800a0d3 	.word	0x0800a0d3
 800a004:	0800a0d3 	.word	0x0800a0d3
 800a008:	0800a0d3 	.word	0x0800a0d3
 800a00c:	0800a08f 	.word	0x0800a08f
 800a010:	0800a0d3 	.word	0x0800a0d3
 800a014:	0800a0d3 	.word	0x0800a0d3
 800a018:	0800a0d3 	.word	0x0800a0d3
 800a01c:	0800a0d3 	.word	0x0800a0d3
 800a020:	0800a0d3 	.word	0x0800a0d3
 800a024:	0800a0d3 	.word	0x0800a0d3
 800a028:	0800a0d3 	.word	0x0800a0d3
 800a02c:	0800a09f 	.word	0x0800a09f
 800a030:	0800a0d3 	.word	0x0800a0d3
 800a034:	0800a0d3 	.word	0x0800a0d3
 800a038:	0800a0d3 	.word	0x0800a0d3
 800a03c:	0800a0d3 	.word	0x0800a0d3
 800a040:	0800a0d3 	.word	0x0800a0d3
 800a044:	0800a0d3 	.word	0x0800a0d3
 800a048:	0800a0d3 	.word	0x0800a0d3
 800a04c:	0800a0d3 	.word	0x0800a0d3
 800a050:	0800a0d3 	.word	0x0800a0d3
 800a054:	0800a0d3 	.word	0x0800a0d3
 800a058:	0800a0d3 	.word	0x0800a0d3
 800a05c:	0800a0d3 	.word	0x0800a0d3
 800a060:	0800a0d3 	.word	0x0800a0d3
 800a064:	0800a0d3 	.word	0x0800a0d3
 800a068:	0800a0d3 	.word	0x0800a0d3
 800a06c:	0800a0c5 	.word	0x0800a0c5
 800a070:	2b40      	cmp	r3, #64	; 0x40
 800a072:	d02a      	beq.n	800a0ca <UART_SetConfig+0x8aa>
 800a074:	e02d      	b.n	800a0d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a076:	f7fc fd11 	bl	8006a9c <HAL_RCCEx_GetD3PCLK1Freq>
 800a07a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a07c:	e02f      	b.n	800a0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a082:	4618      	mov	r0, r3
 800a084:	f7fc fd20 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a08c:	e027      	b.n	800a0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08e:	f107 0318 	add.w	r3, r7, #24
 800a092:	4618      	mov	r0, r3
 800a094:	f7fc fe6c 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09c:	e01f      	b.n	800a0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a09e:	4b21      	ldr	r3, [pc, #132]	; (800a124 <UART_SetConfig+0x904>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d009      	beq.n	800a0be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0aa:	4b1e      	ldr	r3, [pc, #120]	; (800a124 <UART_SetConfig+0x904>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	08db      	lsrs	r3, r3, #3
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	; (800a12c <UART_SetConfig+0x90c>)
 800a0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0bc:	e00f      	b.n	800a0de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a0be:	4b1b      	ldr	r3, [pc, #108]	; (800a12c <UART_SetConfig+0x90c>)
 800a0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c2:	e00c      	b.n	800a0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0c4:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <UART_SetConfig+0x910>)
 800a0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0c8:	e009      	b.n	800a0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0d0:	e005      	b.n	800a0de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 81ee 	beq.w	800a4c2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	4a12      	ldr	r2, [pc, #72]	; (800a134 <UART_SetConfig+0x914>)
 800a0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	4413      	add	r3, r2
 800a104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a106:	429a      	cmp	r2, r3
 800a108:	d305      	bcc.n	800a116 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a112:	429a      	cmp	r2, r3
 800a114:	d910      	bls.n	800a138 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a11c:	e1d1      	b.n	800a4c2 <UART_SetConfig+0xca2>
 800a11e:	bf00      	nop
 800a120:	40011c00 	.word	0x40011c00
 800a124:	58024400 	.word	0x58024400
 800a128:	58000c00 	.word	0x58000c00
 800a12c:	03d09000 	.word	0x03d09000
 800a130:	003d0900 	.word	0x003d0900
 800a134:	0800d76c 	.word	0x0800d76c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a13a:	2200      	movs	r2, #0
 800a13c:	60bb      	str	r3, [r7, #8]
 800a13e:	60fa      	str	r2, [r7, #12]
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	4ac0      	ldr	r2, [pc, #768]	; (800a448 <UART_SetConfig+0xc28>)
 800a146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2200      	movs	r2, #0
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a15a:	f7f6 f931 	bl	80003c0 <__aeabi_uldivmod>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	f04f 0300 	mov.w	r3, #0
 800a16e:	020b      	lsls	r3, r1, #8
 800a170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a174:	0202      	lsls	r2, r0, #8
 800a176:	6979      	ldr	r1, [r7, #20]
 800a178:	6849      	ldr	r1, [r1, #4]
 800a17a:	0849      	lsrs	r1, r1, #1
 800a17c:	2000      	movs	r0, #0
 800a17e:	460c      	mov	r4, r1
 800a180:	4605      	mov	r5, r0
 800a182:	eb12 0804 	adds.w	r8, r2, r4
 800a186:	eb43 0905 	adc.w	r9, r3, r5
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	469a      	mov	sl, r3
 800a192:	4693      	mov	fp, r2
 800a194:	4652      	mov	r2, sl
 800a196:	465b      	mov	r3, fp
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	f7f6 f910 	bl	80003c0 <__aeabi_uldivmod>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ae:	d308      	bcc.n	800a1c2 <UART_SetConfig+0x9a2>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1b6:	d204      	bcs.n	800a1c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1be:	60da      	str	r2, [r3, #12]
 800a1c0:	e17f      	b.n	800a4c2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1c8:	e17b      	b.n	800a4c2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	69db      	ldr	r3, [r3, #28]
 800a1ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d2:	f040 80bd 	bne.w	800a350 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a1d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	dc48      	bgt.n	800a270 <UART_SetConfig+0xa50>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	db7b      	blt.n	800a2da <UART_SetConfig+0xaba>
 800a1e2:	2b20      	cmp	r3, #32
 800a1e4:	d879      	bhi.n	800a2da <UART_SetConfig+0xaba>
 800a1e6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ec <UART_SetConfig+0x9cc>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a277 	.word	0x0800a277
 800a1f0:	0800a27f 	.word	0x0800a27f
 800a1f4:	0800a2db 	.word	0x0800a2db
 800a1f8:	0800a2db 	.word	0x0800a2db
 800a1fc:	0800a287 	.word	0x0800a287
 800a200:	0800a2db 	.word	0x0800a2db
 800a204:	0800a2db 	.word	0x0800a2db
 800a208:	0800a2db 	.word	0x0800a2db
 800a20c:	0800a297 	.word	0x0800a297
 800a210:	0800a2db 	.word	0x0800a2db
 800a214:	0800a2db 	.word	0x0800a2db
 800a218:	0800a2db 	.word	0x0800a2db
 800a21c:	0800a2db 	.word	0x0800a2db
 800a220:	0800a2db 	.word	0x0800a2db
 800a224:	0800a2db 	.word	0x0800a2db
 800a228:	0800a2db 	.word	0x0800a2db
 800a22c:	0800a2a7 	.word	0x0800a2a7
 800a230:	0800a2db 	.word	0x0800a2db
 800a234:	0800a2db 	.word	0x0800a2db
 800a238:	0800a2db 	.word	0x0800a2db
 800a23c:	0800a2db 	.word	0x0800a2db
 800a240:	0800a2db 	.word	0x0800a2db
 800a244:	0800a2db 	.word	0x0800a2db
 800a248:	0800a2db 	.word	0x0800a2db
 800a24c:	0800a2db 	.word	0x0800a2db
 800a250:	0800a2db 	.word	0x0800a2db
 800a254:	0800a2db 	.word	0x0800a2db
 800a258:	0800a2db 	.word	0x0800a2db
 800a25c:	0800a2db 	.word	0x0800a2db
 800a260:	0800a2db 	.word	0x0800a2db
 800a264:	0800a2db 	.word	0x0800a2db
 800a268:	0800a2db 	.word	0x0800a2db
 800a26c:	0800a2cd 	.word	0x0800a2cd
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d02e      	beq.n	800a2d2 <UART_SetConfig+0xab2>
 800a274:	e031      	b.n	800a2da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a276:	f7fa fd73 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 800a27a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a27c:	e033      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27e:	f7fa fd85 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 800a282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a284:	e02f      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7fc fc1c 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a294:	e027      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a296:	f107 0318 	add.w	r3, r7, #24
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fc fd68 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a4:	e01f      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a6:	4b69      	ldr	r3, [pc, #420]	; (800a44c <UART_SetConfig+0xc2c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d009      	beq.n	800a2c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b2:	4b66      	ldr	r3, [pc, #408]	; (800a44c <UART_SetConfig+0xc2c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	08db      	lsrs	r3, r3, #3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	4a64      	ldr	r2, [pc, #400]	; (800a450 <UART_SetConfig+0xc30>)
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c4:	e00f      	b.n	800a2e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a2c6:	4b62      	ldr	r3, [pc, #392]	; (800a450 <UART_SetConfig+0xc30>)
 800a2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2ca:	e00c      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2cc:	4b61      	ldr	r3, [pc, #388]	; (800a454 <UART_SetConfig+0xc34>)
 800a2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d0:	e009      	b.n	800a2e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2d8:	e005      	b.n	800a2e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80ea 	beq.w	800a4c2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	4a55      	ldr	r2, [pc, #340]	; (800a448 <UART_SetConfig+0xc28>)
 800a2f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a300:	005a      	lsls	r2, r3, #1
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	441a      	add	r2, r3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a312:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a316:	2b0f      	cmp	r3, #15
 800a318:	d916      	bls.n	800a348 <UART_SetConfig+0xb28>
 800a31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a320:	d212      	bcs.n	800a348 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a324:	b29b      	uxth	r3, r3
 800a326:	f023 030f 	bic.w	r3, r3, #15
 800a32a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	085b      	lsrs	r3, r3, #1
 800a330:	b29b      	uxth	r3, r3
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	b29a      	uxth	r2, r3
 800a338:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a33a:	4313      	orrs	r3, r2
 800a33c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a344:	60da      	str	r2, [r3, #12]
 800a346:	e0bc      	b.n	800a4c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a34e:	e0b8      	b.n	800a4c2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a350:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a354:	2b20      	cmp	r3, #32
 800a356:	dc4b      	bgt.n	800a3f0 <UART_SetConfig+0xbd0>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f2c0 8087 	blt.w	800a46c <UART_SetConfig+0xc4c>
 800a35e:	2b20      	cmp	r3, #32
 800a360:	f200 8084 	bhi.w	800a46c <UART_SetConfig+0xc4c>
 800a364:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <UART_SetConfig+0xb4c>)
 800a366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36a:	bf00      	nop
 800a36c:	0800a3f7 	.word	0x0800a3f7
 800a370:	0800a3ff 	.word	0x0800a3ff
 800a374:	0800a46d 	.word	0x0800a46d
 800a378:	0800a46d 	.word	0x0800a46d
 800a37c:	0800a407 	.word	0x0800a407
 800a380:	0800a46d 	.word	0x0800a46d
 800a384:	0800a46d 	.word	0x0800a46d
 800a388:	0800a46d 	.word	0x0800a46d
 800a38c:	0800a417 	.word	0x0800a417
 800a390:	0800a46d 	.word	0x0800a46d
 800a394:	0800a46d 	.word	0x0800a46d
 800a398:	0800a46d 	.word	0x0800a46d
 800a39c:	0800a46d 	.word	0x0800a46d
 800a3a0:	0800a46d 	.word	0x0800a46d
 800a3a4:	0800a46d 	.word	0x0800a46d
 800a3a8:	0800a46d 	.word	0x0800a46d
 800a3ac:	0800a427 	.word	0x0800a427
 800a3b0:	0800a46d 	.word	0x0800a46d
 800a3b4:	0800a46d 	.word	0x0800a46d
 800a3b8:	0800a46d 	.word	0x0800a46d
 800a3bc:	0800a46d 	.word	0x0800a46d
 800a3c0:	0800a46d 	.word	0x0800a46d
 800a3c4:	0800a46d 	.word	0x0800a46d
 800a3c8:	0800a46d 	.word	0x0800a46d
 800a3cc:	0800a46d 	.word	0x0800a46d
 800a3d0:	0800a46d 	.word	0x0800a46d
 800a3d4:	0800a46d 	.word	0x0800a46d
 800a3d8:	0800a46d 	.word	0x0800a46d
 800a3dc:	0800a46d 	.word	0x0800a46d
 800a3e0:	0800a46d 	.word	0x0800a46d
 800a3e4:	0800a46d 	.word	0x0800a46d
 800a3e8:	0800a46d 	.word	0x0800a46d
 800a3ec:	0800a45f 	.word	0x0800a45f
 800a3f0:	2b40      	cmp	r3, #64	; 0x40
 800a3f2:	d037      	beq.n	800a464 <UART_SetConfig+0xc44>
 800a3f4:	e03a      	b.n	800a46c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3f6:	f7fa fcb3 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 800a3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3fc:	e03c      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3fe:	f7fa fcc5 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 800a402:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a404:	e038      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fc fb5c 	bl	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a414:	e030      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a416:	f107 0318 	add.w	r3, r7, #24
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fc fca8 	bl	8006d70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a424:	e028      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a426:	4b09      	ldr	r3, [pc, #36]	; (800a44c <UART_SetConfig+0xc2c>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d012      	beq.n	800a458 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <UART_SetConfig+0xc2c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	08db      	lsrs	r3, r3, #3
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	4a04      	ldr	r2, [pc, #16]	; (800a450 <UART_SetConfig+0xc30>)
 800a43e:	fa22 f303 	lsr.w	r3, r2, r3
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a444:	e018      	b.n	800a478 <UART_SetConfig+0xc58>
 800a446:	bf00      	nop
 800a448:	0800d76c 	.word	0x0800d76c
 800a44c:	58024400 	.word	0x58024400
 800a450:	03d09000 	.word	0x03d09000
 800a454:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a458:	4b24      	ldr	r3, [pc, #144]	; (800a4ec <UART_SetConfig+0xccc>)
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a45c:	e00c      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a45e:	4b24      	ldr	r3, [pc, #144]	; (800a4f0 <UART_SetConfig+0xcd0>)
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a462:	e009      	b.n	800a478 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a46a:	e005      	b.n	800a478 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a476:	bf00      	nop
    }

    if (pclk != 0U)
 800a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d021      	beq.n	800a4c2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <UART_SetConfig+0xcd4>)
 800a484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a488:	461a      	mov	r2, r3
 800a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	085b      	lsrs	r3, r3, #1
 800a496:	441a      	add	r2, r3
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b0f      	cmp	r3, #15
 800a4a6:	d909      	bls.n	800a4bc <UART_SetConfig+0xc9c>
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ae:	d205      	bcs.n	800a4bc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	60da      	str	r2, [r3, #12]
 800a4ba:	e002      	b.n	800a4c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3748      	adds	r7, #72	; 0x48
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4ec:	03d09000 	.word	0x03d09000
 800a4f0:	003d0900 	.word	0x003d0900
 800a4f4:	0800d76c 	.word	0x0800d76c

0800a4f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00a      	beq.n	800a566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	f003 0308 	and.w	r3, r3, #8
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f003 0310 	and.w	r3, r3, #16
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	f003 0320 	and.w	r3, r3, #32
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01a      	beq.n	800a60e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5f6:	d10a      	bne.n	800a60e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00a      	beq.n	800a630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	605a      	str	r2, [r3, #4]
  }
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b098      	sub	sp, #96	; 0x60
 800a640:	af02      	add	r7, sp, #8
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a64c:	f7f7 fadc 	bl	8001c08 <HAL_GetTick>
 800a650:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	d12f      	bne.n	800a6c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a668:	2200      	movs	r2, #0
 800a66a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f88e 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d022      	beq.n	800a6c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a68e:	653b      	str	r3, [r7, #80]	; 0x50
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a698:	647b      	str	r3, [r7, #68]	; 0x44
 800a69a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e6      	bne.n	800a67a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e063      	b.n	800a788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d149      	bne.n	800a762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f857 	bl	800a790 <UART_WaitOnFlagUntilTimeout>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d03c      	beq.n	800a762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a706:	633b      	str	r3, [r7, #48]	; 0x30
 800a708:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e6      	bne.n	800a6e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	60fb      	str	r3, [r7, #12]
   return(result);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f023 0301 	bic.w	r3, r3, #1
 800a730:	64bb      	str	r3, [r7, #72]	; 0x48
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3308      	adds	r3, #8
 800a738:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a73a:	61fa      	str	r2, [r7, #28]
 800a73c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	69b9      	ldr	r1, [r7, #24]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	617b      	str	r3, [r7, #20]
   return(result);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e012      	b.n	800a788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3758      	adds	r7, #88	; 0x58
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	603b      	str	r3, [r7, #0]
 800a79c:	4613      	mov	r3, r2
 800a79e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a0:	e049      	b.n	800a836 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d045      	beq.n	800a836 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7aa:	f7f7 fa2d 	bl	8001c08 <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d302      	bcc.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e048      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d031      	beq.n	800a836 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	f003 0308 	and.w	r3, r3, #8
 800a7dc:	2b08      	cmp	r3, #8
 800a7de:	d110      	bne.n	800a802 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2208      	movs	r2, #8
 800a7e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 f839 	bl	800a860 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2208      	movs	r2, #8
 800a7f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e029      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a80c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a810:	d111      	bne.n	800a836 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a81a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f81f 	bl	800a860 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e00f      	b.n	800a856 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	69da      	ldr	r2, [r3, #28]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4013      	ands	r3, r2
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	429a      	cmp	r2, r3
 800a844:	bf0c      	ite	eq
 800a846:	2301      	moveq	r3, #1
 800a848:	2300      	movne	r3, #0
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	461a      	mov	r2, r3
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	429a      	cmp	r2, r3
 800a852:	d0a6      	beq.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a860:	b480      	push	{r7}
 800a862:	b095      	sub	sp, #84	; 0x54
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a870:	e853 3f00 	ldrex	r3, [r3]
 800a874:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a87c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a886:	643b      	str	r3, [r7, #64]	; 0x40
 800a888:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a88c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a88e:	e841 2300 	strex	r3, r2, [r1]
 800a892:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e6      	bne.n	800a868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3308      	adds	r3, #8
 800a8a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	e853 3f00 	ldrex	r3, [r3]
 800a8a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	4b1e      	ldr	r3, [pc, #120]	; (800a928 <UART_EndRxTransfer+0xc8>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8c2:	e841 2300 	strex	r3, r2, [r1]
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e5      	bne.n	800a89a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d118      	bne.n	800a908 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	e853 3f00 	ldrex	r3, [r3]
 800a8e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f023 0310 	bic.w	r3, r3, #16
 800a8ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f8:	6979      	ldr	r1, [r7, #20]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	e841 2300 	strex	r3, r2, [r1]
 800a900:	613b      	str	r3, [r7, #16]
   return(result);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e6      	bne.n	800a8d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a91c:	bf00      	nop
 800a91e:	3754      	adds	r7, #84	; 0x54
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	effffffe 	.word	0xeffffffe

0800a92c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <HAL_UARTEx_DisableFifoMode+0x16>
 800a93e:	2302      	movs	r3, #2
 800a940:	e027      	b.n	800a992 <HAL_UARTEx_DisableFifoMode+0x66>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2224      	movs	r2, #36	; 0x24
 800a94e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f022 0201 	bic.w	r2, r2, #1
 800a968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2220      	movs	r2, #32
 800a984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b084      	sub	sp, #16
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e02d      	b.n	800aa12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2224      	movs	r2, #36	; 0x24
 800a9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 0201 	bic.w	r2, r2, #1
 800a9dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f850 	bl	800aa98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d101      	bne.n	800aa32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e02d      	b.n	800aa8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2224      	movs	r2, #36	; 0x24
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f022 0201 	bic.w	r2, r2, #1
 800aa58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f812 	bl	800aa98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d108      	bne.n	800aaba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aab8:	e031      	b.n	800ab1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aaba:	2310      	movs	r3, #16
 800aabc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aabe:	2310      	movs	r3, #16
 800aac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	0e5b      	lsrs	r3, r3, #25
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	0f5b      	lsrs	r3, r3, #29
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	f003 0307 	and.w	r3, r3, #7
 800aae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	7b3a      	ldrb	r2, [r7, #12]
 800aae6:	4911      	ldr	r1, [pc, #68]	; (800ab2c <UARTEx_SetNbDataToProcess+0x94>)
 800aae8:	5c8a      	ldrb	r2, [r1, r2]
 800aaea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aaee:	7b3a      	ldrb	r2, [r7, #12]
 800aaf0:	490f      	ldr	r1, [pc, #60]	; (800ab30 <UARTEx_SetNbDataToProcess+0x98>)
 800aaf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aaf4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	7b7a      	ldrb	r2, [r7, #13]
 800ab04:	4909      	ldr	r1, [pc, #36]	; (800ab2c <UARTEx_SetNbDataToProcess+0x94>)
 800ab06:	5c8a      	ldrb	r2, [r1, r2]
 800ab08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab0c:	7b7a      	ldrb	r2, [r7, #13]
 800ab0e:	4908      	ldr	r1, [pc, #32]	; (800ab30 <UARTEx_SetNbDataToProcess+0x98>)
 800ab10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	0800d784 	.word	0x0800d784
 800ab30:	0800d78c 	.word	0x0800d78c

0800ab34 <__cvt>:
 800ab34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab36:	ed2d 8b02 	vpush	{d8}
 800ab3a:	eeb0 8b40 	vmov.f64	d8, d0
 800ab3e:	b085      	sub	sp, #20
 800ab40:	4617      	mov	r7, r2
 800ab42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ab44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab46:	ee18 2a90 	vmov	r2, s17
 800ab4a:	f025 0520 	bic.w	r5, r5, #32
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	bfb6      	itet	lt
 800ab52:	222d      	movlt	r2, #45	; 0x2d
 800ab54:	2200      	movge	r2, #0
 800ab56:	eeb1 8b40 	vneglt.f64	d8, d0
 800ab5a:	2d46      	cmp	r5, #70	; 0x46
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	d004      	beq.n	800ab6c <__cvt+0x38>
 800ab62:	2d45      	cmp	r5, #69	; 0x45
 800ab64:	d100      	bne.n	800ab68 <__cvt+0x34>
 800ab66:	3401      	adds	r4, #1
 800ab68:	2102      	movs	r1, #2
 800ab6a:	e000      	b.n	800ab6e <__cvt+0x3a>
 800ab6c:	2103      	movs	r1, #3
 800ab6e:	ab03      	add	r3, sp, #12
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	ab02      	add	r3, sp, #8
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	4622      	mov	r2, r4
 800ab78:	4633      	mov	r3, r6
 800ab7a:	eeb0 0b48 	vmov.f64	d0, d8
 800ab7e:	f000 fe53 	bl	800b828 <_dtoa_r>
 800ab82:	2d47      	cmp	r5, #71	; 0x47
 800ab84:	d101      	bne.n	800ab8a <__cvt+0x56>
 800ab86:	07fb      	lsls	r3, r7, #31
 800ab88:	d51a      	bpl.n	800abc0 <__cvt+0x8c>
 800ab8a:	2d46      	cmp	r5, #70	; 0x46
 800ab8c:	eb00 0204 	add.w	r2, r0, r4
 800ab90:	d10c      	bne.n	800abac <__cvt+0x78>
 800ab92:	7803      	ldrb	r3, [r0, #0]
 800ab94:	2b30      	cmp	r3, #48	; 0x30
 800ab96:	d107      	bne.n	800aba8 <__cvt+0x74>
 800ab98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba0:	bf1c      	itt	ne
 800aba2:	f1c4 0401 	rsbne	r4, r4, #1
 800aba6:	6034      	strne	r4, [r6, #0]
 800aba8:	6833      	ldr	r3, [r6, #0]
 800abaa:	441a      	add	r2, r3
 800abac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb4:	bf08      	it	eq
 800abb6:	9203      	streq	r2, [sp, #12]
 800abb8:	2130      	movs	r1, #48	; 0x30
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d307      	bcc.n	800abd0 <__cvt+0x9c>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abc4:	1a1b      	subs	r3, r3, r0
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	b005      	add	sp, #20
 800abca:	ecbd 8b02 	vpop	{d8}
 800abce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd0:	1c5c      	adds	r4, r3, #1
 800abd2:	9403      	str	r4, [sp, #12]
 800abd4:	7019      	strb	r1, [r3, #0]
 800abd6:	e7f0      	b.n	800abba <__cvt+0x86>

0800abd8 <__exponent>:
 800abd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abda:	4603      	mov	r3, r0
 800abdc:	2900      	cmp	r1, #0
 800abde:	bfb8      	it	lt
 800abe0:	4249      	neglt	r1, r1
 800abe2:	f803 2b02 	strb.w	r2, [r3], #2
 800abe6:	bfb4      	ite	lt
 800abe8:	222d      	movlt	r2, #45	; 0x2d
 800abea:	222b      	movge	r2, #43	; 0x2b
 800abec:	2909      	cmp	r1, #9
 800abee:	7042      	strb	r2, [r0, #1]
 800abf0:	dd2a      	ble.n	800ac48 <__exponent+0x70>
 800abf2:	f10d 0207 	add.w	r2, sp, #7
 800abf6:	4617      	mov	r7, r2
 800abf8:	260a      	movs	r6, #10
 800abfa:	4694      	mov	ip, r2
 800abfc:	fb91 f5f6 	sdiv	r5, r1, r6
 800ac00:	fb06 1415 	mls	r4, r6, r5, r1
 800ac04:	3430      	adds	r4, #48	; 0x30
 800ac06:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	2c63      	cmp	r4, #99	; 0x63
 800ac0e:	f102 32ff 	add.w	r2, r2, #4294967295
 800ac12:	4629      	mov	r1, r5
 800ac14:	dcf1      	bgt.n	800abfa <__exponent+0x22>
 800ac16:	3130      	adds	r1, #48	; 0x30
 800ac18:	f1ac 0402 	sub.w	r4, ip, #2
 800ac1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ac20:	1c41      	adds	r1, r0, #1
 800ac22:	4622      	mov	r2, r4
 800ac24:	42ba      	cmp	r2, r7
 800ac26:	d30a      	bcc.n	800ac3e <__exponent+0x66>
 800ac28:	f10d 0209 	add.w	r2, sp, #9
 800ac2c:	eba2 020c 	sub.w	r2, r2, ip
 800ac30:	42bc      	cmp	r4, r7
 800ac32:	bf88      	it	hi
 800ac34:	2200      	movhi	r2, #0
 800ac36:	4413      	add	r3, r2
 800ac38:	1a18      	subs	r0, r3, r0
 800ac3a:	b003      	add	sp, #12
 800ac3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac3e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac42:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac46:	e7ed      	b.n	800ac24 <__exponent+0x4c>
 800ac48:	2330      	movs	r3, #48	; 0x30
 800ac4a:	3130      	adds	r1, #48	; 0x30
 800ac4c:	7083      	strb	r3, [r0, #2]
 800ac4e:	70c1      	strb	r1, [r0, #3]
 800ac50:	1d03      	adds	r3, r0, #4
 800ac52:	e7f1      	b.n	800ac38 <__exponent+0x60>
 800ac54:	0000      	movs	r0, r0
	...

0800ac58 <_printf_float>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	b08b      	sub	sp, #44	; 0x2c
 800ac5e:	460c      	mov	r4, r1
 800ac60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ac64:	4616      	mov	r6, r2
 800ac66:	461f      	mov	r7, r3
 800ac68:	4605      	mov	r5, r0
 800ac6a:	f000 fccd 	bl	800b608 <_localeconv_r>
 800ac6e:	f8d0 b000 	ldr.w	fp, [r0]
 800ac72:	4658      	mov	r0, fp
 800ac74:	f7f5 fb9c 	bl	80003b0 <strlen>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9308      	str	r3, [sp, #32]
 800ac7c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ac84:	6822      	ldr	r2, [r4, #0]
 800ac86:	3307      	adds	r3, #7
 800ac88:	f023 0307 	bic.w	r3, r3, #7
 800ac8c:	f103 0108 	add.w	r1, r3, #8
 800ac90:	f8c8 1000 	str.w	r1, [r8]
 800ac94:	ed93 0b00 	vldr	d0, [r3]
 800ac98:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800aef8 <_printf_float+0x2a0>
 800ac9c:	eeb0 7bc0 	vabs.f64	d7, d0
 800aca0:	eeb4 7b46 	vcmp.f64	d7, d6
 800aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800acac:	4682      	mov	sl, r0
 800acae:	dd24      	ble.n	800acfa <_printf_float+0xa2>
 800acb0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb8:	d502      	bpl.n	800acc0 <_printf_float+0x68>
 800acba:	232d      	movs	r3, #45	; 0x2d
 800acbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc0:	498f      	ldr	r1, [pc, #572]	; (800af00 <_printf_float+0x2a8>)
 800acc2:	4b90      	ldr	r3, [pc, #576]	; (800af04 <_printf_float+0x2ac>)
 800acc4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800acc8:	bf94      	ite	ls
 800acca:	4688      	movls	r8, r1
 800accc:	4698      	movhi	r8, r3
 800acce:	2303      	movs	r3, #3
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	f022 0204 	bic.w	r2, r2, #4
 800acd6:	2300      	movs	r3, #0
 800acd8:	6022      	str	r2, [r4, #0]
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	9700      	str	r7, [sp, #0]
 800acde:	4633      	mov	r3, r6
 800ace0:	aa09      	add	r2, sp, #36	; 0x24
 800ace2:	4621      	mov	r1, r4
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 f9d1 	bl	800b08c <_printf_common>
 800acea:	3001      	adds	r0, #1
 800acec:	f040 808a 	bne.w	800ae04 <_printf_float+0x1ac>
 800acf0:	f04f 30ff 	mov.w	r0, #4294967295
 800acf4:	b00b      	add	sp, #44	; 0x2c
 800acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acfa:	eeb4 0b40 	vcmp.f64	d0, d0
 800acfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad02:	d709      	bvc.n	800ad18 <_printf_float+0xc0>
 800ad04:	ee10 3a90 	vmov	r3, s1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfbc      	itt	lt
 800ad0c:	232d      	movlt	r3, #45	; 0x2d
 800ad0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad12:	497d      	ldr	r1, [pc, #500]	; (800af08 <_printf_float+0x2b0>)
 800ad14:	4b7d      	ldr	r3, [pc, #500]	; (800af0c <_printf_float+0x2b4>)
 800ad16:	e7d5      	b.n	800acc4 <_printf_float+0x6c>
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ad1e:	9104      	str	r1, [sp, #16]
 800ad20:	1c59      	adds	r1, r3, #1
 800ad22:	d13c      	bne.n	800ad9e <_printf_float+0x146>
 800ad24:	2306      	movs	r3, #6
 800ad26:	6063      	str	r3, [r4, #4]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	ab08      	add	r3, sp, #32
 800ad2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ad32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad36:	ab07      	add	r3, sp, #28
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	9300      	str	r3, [sp, #0]
 800ad3c:	6022      	str	r2, [r4, #0]
 800ad3e:	f10d 031b 	add.w	r3, sp, #27
 800ad42:	4628      	mov	r0, r5
 800ad44:	f7ff fef6 	bl	800ab34 <__cvt>
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	9907      	ldr	r1, [sp, #28]
 800ad4c:	2b47      	cmp	r3, #71	; 0x47
 800ad4e:	4680      	mov	r8, r0
 800ad50:	d108      	bne.n	800ad64 <_printf_float+0x10c>
 800ad52:	1cc8      	adds	r0, r1, #3
 800ad54:	db02      	blt.n	800ad5c <_printf_float+0x104>
 800ad56:	6863      	ldr	r3, [r4, #4]
 800ad58:	4299      	cmp	r1, r3
 800ad5a:	dd41      	ble.n	800ade0 <_printf_float+0x188>
 800ad5c:	f1a9 0902 	sub.w	r9, r9, #2
 800ad60:	fa5f f989 	uxtb.w	r9, r9
 800ad64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ad68:	d820      	bhi.n	800adac <_printf_float+0x154>
 800ad6a:	3901      	subs	r1, #1
 800ad6c:	464a      	mov	r2, r9
 800ad6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad72:	9107      	str	r1, [sp, #28]
 800ad74:	f7ff ff30 	bl	800abd8 <__exponent>
 800ad78:	9a08      	ldr	r2, [sp, #32]
 800ad7a:	9004      	str	r0, [sp, #16]
 800ad7c:	1813      	adds	r3, r2, r0
 800ad7e:	2a01      	cmp	r2, #1
 800ad80:	6123      	str	r3, [r4, #16]
 800ad82:	dc02      	bgt.n	800ad8a <_printf_float+0x132>
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	07d2      	lsls	r2, r2, #31
 800ad88:	d501      	bpl.n	800ad8e <_printf_float+0x136>
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	6123      	str	r3, [r4, #16]
 800ad8e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0a2      	beq.n	800acdc <_printf_float+0x84>
 800ad96:	232d      	movs	r3, #45	; 0x2d
 800ad98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad9c:	e79e      	b.n	800acdc <_printf_float+0x84>
 800ad9e:	9904      	ldr	r1, [sp, #16]
 800ada0:	2947      	cmp	r1, #71	; 0x47
 800ada2:	d1c1      	bne.n	800ad28 <_printf_float+0xd0>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1bf      	bne.n	800ad28 <_printf_float+0xd0>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e7bc      	b.n	800ad26 <_printf_float+0xce>
 800adac:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800adb0:	d118      	bne.n	800ade4 <_printf_float+0x18c>
 800adb2:	2900      	cmp	r1, #0
 800adb4:	6863      	ldr	r3, [r4, #4]
 800adb6:	dd0b      	ble.n	800add0 <_printf_float+0x178>
 800adb8:	6121      	str	r1, [r4, #16]
 800adba:	b913      	cbnz	r3, 800adc2 <_printf_float+0x16a>
 800adbc:	6822      	ldr	r2, [r4, #0]
 800adbe:	07d0      	lsls	r0, r2, #31
 800adc0:	d502      	bpl.n	800adc8 <_printf_float+0x170>
 800adc2:	3301      	adds	r3, #1
 800adc4:	440b      	add	r3, r1
 800adc6:	6123      	str	r3, [r4, #16]
 800adc8:	2300      	movs	r3, #0
 800adca:	65a1      	str	r1, [r4, #88]	; 0x58
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	e7de      	b.n	800ad8e <_printf_float+0x136>
 800add0:	b913      	cbnz	r3, 800add8 <_printf_float+0x180>
 800add2:	6822      	ldr	r2, [r4, #0]
 800add4:	07d2      	lsls	r2, r2, #31
 800add6:	d501      	bpl.n	800addc <_printf_float+0x184>
 800add8:	3302      	adds	r3, #2
 800adda:	e7f4      	b.n	800adc6 <_printf_float+0x16e>
 800addc:	2301      	movs	r3, #1
 800adde:	e7f2      	b.n	800adc6 <_printf_float+0x16e>
 800ade0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ade4:	9b08      	ldr	r3, [sp, #32]
 800ade6:	4299      	cmp	r1, r3
 800ade8:	db05      	blt.n	800adf6 <_printf_float+0x19e>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	6121      	str	r1, [r4, #16]
 800adee:	07d8      	lsls	r0, r3, #31
 800adf0:	d5ea      	bpl.n	800adc8 <_printf_float+0x170>
 800adf2:	1c4b      	adds	r3, r1, #1
 800adf4:	e7e7      	b.n	800adc6 <_printf_float+0x16e>
 800adf6:	2900      	cmp	r1, #0
 800adf8:	bfd4      	ite	le
 800adfa:	f1c1 0202 	rsble	r2, r1, #2
 800adfe:	2201      	movgt	r2, #1
 800ae00:	4413      	add	r3, r2
 800ae02:	e7e0      	b.n	800adc6 <_printf_float+0x16e>
 800ae04:	6823      	ldr	r3, [r4, #0]
 800ae06:	055a      	lsls	r2, r3, #21
 800ae08:	d407      	bmi.n	800ae1a <_printf_float+0x1c2>
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b8      	blx	r7
 800ae14:	3001      	adds	r0, #1
 800ae16:	d12a      	bne.n	800ae6e <_printf_float+0x216>
 800ae18:	e76a      	b.n	800acf0 <_printf_float+0x98>
 800ae1a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae1e:	f240 80e0 	bls.w	800afe2 <_printf_float+0x38a>
 800ae22:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ae26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2e:	d133      	bne.n	800ae98 <_printf_float+0x240>
 800ae30:	4a37      	ldr	r2, [pc, #220]	; (800af10 <_printf_float+0x2b8>)
 800ae32:	2301      	movs	r3, #1
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f af58 	beq.w	800acf0 <_printf_float+0x98>
 800ae40:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	db02      	blt.n	800ae4e <_printf_float+0x1f6>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	07d8      	lsls	r0, r3, #31
 800ae4c:	d50f      	bpl.n	800ae6e <_printf_float+0x216>
 800ae4e:	4653      	mov	r3, sl
 800ae50:	465a      	mov	r2, fp
 800ae52:	4631      	mov	r1, r6
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b8      	blx	r7
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f43f af49 	beq.w	800acf0 <_printf_float+0x98>
 800ae5e:	f04f 0800 	mov.w	r8, #0
 800ae62:	f104 091a 	add.w	r9, r4, #26
 800ae66:	9b08      	ldr	r3, [sp, #32]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	4543      	cmp	r3, r8
 800ae6c:	dc09      	bgt.n	800ae82 <_printf_float+0x22a>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	079b      	lsls	r3, r3, #30
 800ae72:	f100 8106 	bmi.w	800b082 <_printf_float+0x42a>
 800ae76:	68e0      	ldr	r0, [r4, #12]
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	4298      	cmp	r0, r3
 800ae7c:	bfb8      	it	lt
 800ae7e:	4618      	movlt	r0, r3
 800ae80:	e738      	b.n	800acf4 <_printf_float+0x9c>
 800ae82:	2301      	movs	r3, #1
 800ae84:	464a      	mov	r2, r9
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f43f af2f 	beq.w	800acf0 <_printf_float+0x98>
 800ae92:	f108 0801 	add.w	r8, r8, #1
 800ae96:	e7e6      	b.n	800ae66 <_printf_float+0x20e>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dc3a      	bgt.n	800af14 <_printf_float+0x2bc>
 800ae9e:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <_printf_float+0x2b8>)
 800aea0:	2301      	movs	r3, #1
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b8      	blx	r7
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f43f af21 	beq.w	800acf0 <_printf_float+0x98>
 800aeae:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	d102      	bne.n	800aebc <_printf_float+0x264>
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	07d9      	lsls	r1, r3, #31
 800aeba:	d5d8      	bpl.n	800ae6e <_printf_float+0x216>
 800aebc:	4653      	mov	r3, sl
 800aebe:	465a      	mov	r2, fp
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f af12 	beq.w	800acf0 <_printf_float+0x98>
 800aecc:	f04f 0900 	mov.w	r9, #0
 800aed0:	f104 0a1a 	add.w	sl, r4, #26
 800aed4:	9b07      	ldr	r3, [sp, #28]
 800aed6:	425b      	negs	r3, r3
 800aed8:	454b      	cmp	r3, r9
 800aeda:	dc01      	bgt.n	800aee0 <_printf_float+0x288>
 800aedc:	9b08      	ldr	r3, [sp, #32]
 800aede:	e795      	b.n	800ae0c <_printf_float+0x1b4>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4652      	mov	r2, sl
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f af00 	beq.w	800acf0 <_printf_float+0x98>
 800aef0:	f109 0901 	add.w	r9, r9, #1
 800aef4:	e7ee      	b.n	800aed4 <_printf_float+0x27c>
 800aef6:	bf00      	nop
 800aef8:	ffffffff 	.word	0xffffffff
 800aefc:	7fefffff 	.word	0x7fefffff
 800af00:	0800d794 	.word	0x0800d794
 800af04:	0800d798 	.word	0x0800d798
 800af08:	0800d79c 	.word	0x0800d79c
 800af0c:	0800d7a0 	.word	0x0800d7a0
 800af10:	0800d7a4 	.word	0x0800d7a4
 800af14:	9a08      	ldr	r2, [sp, #32]
 800af16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af18:	429a      	cmp	r2, r3
 800af1a:	bfa8      	it	ge
 800af1c:	461a      	movge	r2, r3
 800af1e:	2a00      	cmp	r2, #0
 800af20:	4691      	mov	r9, r2
 800af22:	dc38      	bgt.n	800af96 <_printf_float+0x33e>
 800af24:	2300      	movs	r3, #0
 800af26:	9305      	str	r3, [sp, #20]
 800af28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af2c:	f104 021a 	add.w	r2, r4, #26
 800af30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af32:	9905      	ldr	r1, [sp, #20]
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	eba3 0309 	sub.w	r3, r3, r9
 800af3a:	428b      	cmp	r3, r1
 800af3c:	dc33      	bgt.n	800afa6 <_printf_float+0x34e>
 800af3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800af42:	429a      	cmp	r2, r3
 800af44:	db3c      	blt.n	800afc0 <_printf_float+0x368>
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	07da      	lsls	r2, r3, #31
 800af4a:	d439      	bmi.n	800afc0 <_printf_float+0x368>
 800af4c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800af50:	eba2 0903 	sub.w	r9, r2, r3
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	4591      	cmp	r9, r2
 800af5a:	bfa8      	it	ge
 800af5c:	4691      	movge	r9, r2
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	dc35      	bgt.n	800afd0 <_printf_float+0x378>
 800af64:	f04f 0800 	mov.w	r8, #0
 800af68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af6c:	f104 0a1a 	add.w	sl, r4, #26
 800af70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800af74:	1a9b      	subs	r3, r3, r2
 800af76:	eba3 0309 	sub.w	r3, r3, r9
 800af7a:	4543      	cmp	r3, r8
 800af7c:	f77f af77 	ble.w	800ae6e <_printf_float+0x216>
 800af80:	2301      	movs	r3, #1
 800af82:	4652      	mov	r2, sl
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	47b8      	blx	r7
 800af8a:	3001      	adds	r0, #1
 800af8c:	f43f aeb0 	beq.w	800acf0 <_printf_float+0x98>
 800af90:	f108 0801 	add.w	r8, r8, #1
 800af94:	e7ec      	b.n	800af70 <_printf_float+0x318>
 800af96:	4613      	mov	r3, r2
 800af98:	4631      	mov	r1, r6
 800af9a:	4642      	mov	r2, r8
 800af9c:	4628      	mov	r0, r5
 800af9e:	47b8      	blx	r7
 800afa0:	3001      	adds	r0, #1
 800afa2:	d1bf      	bne.n	800af24 <_printf_float+0x2cc>
 800afa4:	e6a4      	b.n	800acf0 <_printf_float+0x98>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4631      	mov	r1, r6
 800afaa:	4628      	mov	r0, r5
 800afac:	9204      	str	r2, [sp, #16]
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f ae9d 	beq.w	800acf0 <_printf_float+0x98>
 800afb6:	9b05      	ldr	r3, [sp, #20]
 800afb8:	9a04      	ldr	r2, [sp, #16]
 800afba:	3301      	adds	r3, #1
 800afbc:	9305      	str	r3, [sp, #20]
 800afbe:	e7b7      	b.n	800af30 <_printf_float+0x2d8>
 800afc0:	4653      	mov	r3, sl
 800afc2:	465a      	mov	r2, fp
 800afc4:	4631      	mov	r1, r6
 800afc6:	4628      	mov	r0, r5
 800afc8:	47b8      	blx	r7
 800afca:	3001      	adds	r0, #1
 800afcc:	d1be      	bne.n	800af4c <_printf_float+0x2f4>
 800afce:	e68f      	b.n	800acf0 <_printf_float+0x98>
 800afd0:	9a04      	ldr	r2, [sp, #16]
 800afd2:	464b      	mov	r3, r9
 800afd4:	4442      	add	r2, r8
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d1c1      	bne.n	800af64 <_printf_float+0x30c>
 800afe0:	e686      	b.n	800acf0 <_printf_float+0x98>
 800afe2:	9a08      	ldr	r2, [sp, #32]
 800afe4:	2a01      	cmp	r2, #1
 800afe6:	dc01      	bgt.n	800afec <_printf_float+0x394>
 800afe8:	07db      	lsls	r3, r3, #31
 800afea:	d537      	bpl.n	800b05c <_printf_float+0x404>
 800afec:	2301      	movs	r3, #1
 800afee:	4642      	mov	r2, r8
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	f43f ae7a 	beq.w	800acf0 <_printf_float+0x98>
 800affc:	4653      	mov	r3, sl
 800affe:	465a      	mov	r2, fp
 800b000:	4631      	mov	r1, r6
 800b002:	4628      	mov	r0, r5
 800b004:	47b8      	blx	r7
 800b006:	3001      	adds	r0, #1
 800b008:	f43f ae72 	beq.w	800acf0 <_printf_float+0x98>
 800b00c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	d01a      	beq.n	800b052 <_printf_float+0x3fa>
 800b01c:	3b01      	subs	r3, #1
 800b01e:	f108 0201 	add.w	r2, r8, #1
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	d10e      	bne.n	800b04a <_printf_float+0x3f2>
 800b02c:	e660      	b.n	800acf0 <_printf_float+0x98>
 800b02e:	2301      	movs	r3, #1
 800b030:	464a      	mov	r2, r9
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	f43f ae59 	beq.w	800acf0 <_printf_float+0x98>
 800b03e:	f108 0801 	add.w	r8, r8, #1
 800b042:	9b08      	ldr	r3, [sp, #32]
 800b044:	3b01      	subs	r3, #1
 800b046:	4543      	cmp	r3, r8
 800b048:	dcf1      	bgt.n	800b02e <_printf_float+0x3d6>
 800b04a:	9b04      	ldr	r3, [sp, #16]
 800b04c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b050:	e6dd      	b.n	800ae0e <_printf_float+0x1b6>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	f104 091a 	add.w	r9, r4, #26
 800b05a:	e7f2      	b.n	800b042 <_printf_float+0x3ea>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4642      	mov	r2, r8
 800b060:	e7df      	b.n	800b022 <_printf_float+0x3ca>
 800b062:	2301      	movs	r3, #1
 800b064:	464a      	mov	r2, r9
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae3f 	beq.w	800acf0 <_printf_float+0x98>
 800b072:	f108 0801 	add.w	r8, r8, #1
 800b076:	68e3      	ldr	r3, [r4, #12]
 800b078:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b07a:	1a5b      	subs	r3, r3, r1
 800b07c:	4543      	cmp	r3, r8
 800b07e:	dcf0      	bgt.n	800b062 <_printf_float+0x40a>
 800b080:	e6f9      	b.n	800ae76 <_printf_float+0x21e>
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	f104 0919 	add.w	r9, r4, #25
 800b08a:	e7f4      	b.n	800b076 <_printf_float+0x41e>

0800b08c <_printf_common>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	4616      	mov	r6, r2
 800b092:	4699      	mov	r9, r3
 800b094:	688a      	ldr	r2, [r1, #8]
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bfb8      	it	lt
 800b0a0:	4613      	movlt	r3, r2
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b10a      	cbz	r2, 800b0b2 <_printf_common+0x26>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	0699      	lsls	r1, r3, #26
 800b0b6:	bf42      	ittt	mi
 800b0b8:	6833      	ldrmi	r3, [r6, #0]
 800b0ba:	3302      	addmi	r3, #2
 800b0bc:	6033      	strmi	r3, [r6, #0]
 800b0be:	6825      	ldr	r5, [r4, #0]
 800b0c0:	f015 0506 	ands.w	r5, r5, #6
 800b0c4:	d106      	bne.n	800b0d4 <_printf_common+0x48>
 800b0c6:	f104 0a19 	add.w	sl, r4, #25
 800b0ca:	68e3      	ldr	r3, [r4, #12]
 800b0cc:	6832      	ldr	r2, [r6, #0]
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	42ab      	cmp	r3, r5
 800b0d2:	dc26      	bgt.n	800b122 <_printf_common+0x96>
 800b0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d8:	1e13      	subs	r3, r2, #0
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	0692      	lsls	r2, r2, #26
 800b0e2:	d42b      	bmi.n	800b13c <_printf_common+0xb0>
 800b0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d01e      	beq.n	800b130 <_printf_common+0xa4>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	f003 0306 	and.w	r3, r3, #6
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	bf02      	ittt	eq
 800b0fe:	68e5      	ldreq	r5, [r4, #12]
 800b100:	6833      	ldreq	r3, [r6, #0]
 800b102:	1aed      	subeq	r5, r5, r3
 800b104:	68a3      	ldr	r3, [r4, #8]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	2600      	movs	r6, #0
 800b118:	341a      	adds	r4, #26
 800b11a:	42b5      	cmp	r5, r6
 800b11c:	d11a      	bne.n	800b154 <_printf_common+0xc8>
 800b11e:	2000      	movs	r0, #0
 800b120:	e008      	b.n	800b134 <_printf_common+0xa8>
 800b122:	2301      	movs	r3, #1
 800b124:	4652      	mov	r2, sl
 800b126:	4649      	mov	r1, r9
 800b128:	4638      	mov	r0, r7
 800b12a:	47c0      	blx	r8
 800b12c:	3001      	adds	r0, #1
 800b12e:	d103      	bne.n	800b138 <_printf_common+0xac>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	3501      	adds	r5, #1
 800b13a:	e7c6      	b.n	800b0ca <_printf_common+0x3e>
 800b13c:	18e1      	adds	r1, r4, r3
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	2030      	movs	r0, #48	; 0x30
 800b142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b146:	4422      	add	r2, r4
 800b148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b150:	3302      	adds	r3, #2
 800b152:	e7c7      	b.n	800b0e4 <_printf_common+0x58>
 800b154:	2301      	movs	r3, #1
 800b156:	4622      	mov	r2, r4
 800b158:	4649      	mov	r1, r9
 800b15a:	4638      	mov	r0, r7
 800b15c:	47c0      	blx	r8
 800b15e:	3001      	adds	r0, #1
 800b160:	d0e6      	beq.n	800b130 <_printf_common+0xa4>
 800b162:	3601      	adds	r6, #1
 800b164:	e7d9      	b.n	800b11a <_printf_common+0x8e>
	...

0800b168 <_printf_i>:
 800b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b16c:	7e0f      	ldrb	r7, [r1, #24]
 800b16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b170:	2f78      	cmp	r7, #120	; 0x78
 800b172:	4691      	mov	r9, r2
 800b174:	4680      	mov	r8, r0
 800b176:	460c      	mov	r4, r1
 800b178:	469a      	mov	sl, r3
 800b17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17e:	d807      	bhi.n	800b190 <_printf_i+0x28>
 800b180:	2f62      	cmp	r7, #98	; 0x62
 800b182:	d80a      	bhi.n	800b19a <_printf_i+0x32>
 800b184:	2f00      	cmp	r7, #0
 800b186:	f000 80d4 	beq.w	800b332 <_printf_i+0x1ca>
 800b18a:	2f58      	cmp	r7, #88	; 0x58
 800b18c:	f000 80c0 	beq.w	800b310 <_printf_i+0x1a8>
 800b190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b198:	e03a      	b.n	800b210 <_printf_i+0xa8>
 800b19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19e:	2b15      	cmp	r3, #21
 800b1a0:	d8f6      	bhi.n	800b190 <_printf_i+0x28>
 800b1a2:	a101      	add	r1, pc, #4	; (adr r1, 800b1a8 <_printf_i+0x40>)
 800b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b215 	.word	0x0800b215
 800b1b0:	0800b191 	.word	0x0800b191
 800b1b4:	0800b191 	.word	0x0800b191
 800b1b8:	0800b191 	.word	0x0800b191
 800b1bc:	0800b191 	.word	0x0800b191
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b191 	.word	0x0800b191
 800b1c8:	0800b191 	.word	0x0800b191
 800b1cc:	0800b191 	.word	0x0800b191
 800b1d0:	0800b191 	.word	0x0800b191
 800b1d4:	0800b319 	.word	0x0800b319
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b2d3 	.word	0x0800b2d3
 800b1e0:	0800b191 	.word	0x0800b191
 800b1e4:	0800b191 	.word	0x0800b191
 800b1e8:	0800b33b 	.word	0x0800b33b
 800b1ec:	0800b191 	.word	0x0800b191
 800b1f0:	0800b241 	.word	0x0800b241
 800b1f4:	0800b191 	.word	0x0800b191
 800b1f8:	0800b191 	.word	0x0800b191
 800b1fc:	0800b2db 	.word	0x0800b2db
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	602a      	str	r2, [r5, #0]
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b210:	2301      	movs	r3, #1
 800b212:	e09f      	b.n	800b354 <_printf_i+0x1ec>
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	0607      	lsls	r7, r0, #24
 800b21a:	f103 0104 	add.w	r1, r3, #4
 800b21e:	6029      	str	r1, [r5, #0]
 800b220:	d501      	bpl.n	800b226 <_printf_i+0xbe>
 800b222:	681e      	ldr	r6, [r3, #0]
 800b224:	e003      	b.n	800b22e <_printf_i+0xc6>
 800b226:	0646      	lsls	r6, r0, #25
 800b228:	d5fb      	bpl.n	800b222 <_printf_i+0xba>
 800b22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b22e:	2e00      	cmp	r6, #0
 800b230:	da03      	bge.n	800b23a <_printf_i+0xd2>
 800b232:	232d      	movs	r3, #45	; 0x2d
 800b234:	4276      	negs	r6, r6
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23a:	485a      	ldr	r0, [pc, #360]	; (800b3a4 <_printf_i+0x23c>)
 800b23c:	230a      	movs	r3, #10
 800b23e:	e012      	b.n	800b266 <_printf_i+0xfe>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6029      	str	r1, [r5, #0]
 800b248:	0605      	lsls	r5, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xe8>
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	e002      	b.n	800b256 <_printf_i+0xee>
 800b250:	0641      	lsls	r1, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xe4>
 800b254:	881e      	ldrh	r6, [r3, #0]
 800b256:	4853      	ldr	r0, [pc, #332]	; (800b3a4 <_printf_i+0x23c>)
 800b258:	2f6f      	cmp	r7, #111	; 0x6f
 800b25a:	bf0c      	ite	eq
 800b25c:	2308      	moveq	r3, #8
 800b25e:	230a      	movne	r3, #10
 800b260:	2100      	movs	r1, #0
 800b262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b266:	6865      	ldr	r5, [r4, #4]
 800b268:	60a5      	str	r5, [r4, #8]
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	bfa2      	ittt	ge
 800b26e:	6821      	ldrge	r1, [r4, #0]
 800b270:	f021 0104 	bicge.w	r1, r1, #4
 800b274:	6021      	strge	r1, [r4, #0]
 800b276:	b90e      	cbnz	r6, 800b27c <_printf_i+0x114>
 800b278:	2d00      	cmp	r5, #0
 800b27a:	d04b      	beq.n	800b314 <_printf_i+0x1ac>
 800b27c:	4615      	mov	r5, r2
 800b27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b282:	fb03 6711 	mls	r7, r3, r1, r6
 800b286:	5dc7      	ldrb	r7, [r0, r7]
 800b288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b28c:	4637      	mov	r7, r6
 800b28e:	42bb      	cmp	r3, r7
 800b290:	460e      	mov	r6, r1
 800b292:	d9f4      	bls.n	800b27e <_printf_i+0x116>
 800b294:	2b08      	cmp	r3, #8
 800b296:	d10b      	bne.n	800b2b0 <_printf_i+0x148>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	07de      	lsls	r6, r3, #31
 800b29c:	d508      	bpl.n	800b2b0 <_printf_i+0x148>
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	bfde      	ittt	le
 800b2a6:	2330      	movle	r3, #48	; 0x30
 800b2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2b0:	1b52      	subs	r2, r2, r5
 800b2b2:	6122      	str	r2, [r4, #16]
 800b2b4:	f8cd a000 	str.w	sl, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	aa03      	add	r2, sp, #12
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fee4 	bl	800b08c <_printf_common>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d14a      	bne.n	800b35e <_printf_i+0x1f6>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	b004      	add	sp, #16
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	f043 0320 	orr.w	r3, r3, #32
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	4833      	ldr	r0, [pc, #204]	; (800b3a8 <_printf_i+0x240>)
 800b2dc:	2778      	movs	r7, #120	; 0x78
 800b2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	6829      	ldr	r1, [r5, #0]
 800b2e6:	061f      	lsls	r7, r3, #24
 800b2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2ec:	d402      	bmi.n	800b2f4 <_printf_i+0x18c>
 800b2ee:	065f      	lsls	r7, r3, #25
 800b2f0:	bf48      	it	mi
 800b2f2:	b2b6      	uxthmi	r6, r6
 800b2f4:	07df      	lsls	r7, r3, #31
 800b2f6:	bf48      	it	mi
 800b2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fc:	6029      	str	r1, [r5, #0]
 800b2fe:	bf48      	it	mi
 800b300:	6023      	strmi	r3, [r4, #0]
 800b302:	b91e      	cbnz	r6, 800b30c <_printf_i+0x1a4>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	f023 0320 	bic.w	r3, r3, #32
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	2310      	movs	r3, #16
 800b30e:	e7a7      	b.n	800b260 <_printf_i+0xf8>
 800b310:	4824      	ldr	r0, [pc, #144]	; (800b3a4 <_printf_i+0x23c>)
 800b312:	e7e4      	b.n	800b2de <_printf_i+0x176>
 800b314:	4615      	mov	r5, r2
 800b316:	e7bd      	b.n	800b294 <_printf_i+0x12c>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	6826      	ldr	r6, [r4, #0]
 800b31c:	6961      	ldr	r1, [r4, #20]
 800b31e:	1d18      	adds	r0, r3, #4
 800b320:	6028      	str	r0, [r5, #0]
 800b322:	0635      	lsls	r5, r6, #24
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	d501      	bpl.n	800b32c <_printf_i+0x1c4>
 800b328:	6019      	str	r1, [r3, #0]
 800b32a:	e002      	b.n	800b332 <_printf_i+0x1ca>
 800b32c:	0670      	lsls	r0, r6, #25
 800b32e:	d5fb      	bpl.n	800b328 <_printf_i+0x1c0>
 800b330:	8019      	strh	r1, [r3, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	4615      	mov	r5, r2
 800b338:	e7bc      	b.n	800b2b4 <_printf_i+0x14c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	602a      	str	r2, [r5, #0]
 800b340:	681d      	ldr	r5, [r3, #0]
 800b342:	6862      	ldr	r2, [r4, #4]
 800b344:	2100      	movs	r1, #0
 800b346:	4628      	mov	r0, r5
 800b348:	f7f4 ffe2 	bl	8000310 <memchr>
 800b34c:	b108      	cbz	r0, 800b352 <_printf_i+0x1ea>
 800b34e:	1b40      	subs	r0, r0, r5
 800b350:	6060      	str	r0, [r4, #4]
 800b352:	6863      	ldr	r3, [r4, #4]
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	2300      	movs	r3, #0
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b35c:	e7aa      	b.n	800b2b4 <_printf_i+0x14c>
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	462a      	mov	r2, r5
 800b362:	4649      	mov	r1, r9
 800b364:	4640      	mov	r0, r8
 800b366:	47d0      	blx	sl
 800b368:	3001      	adds	r0, #1
 800b36a:	d0ad      	beq.n	800b2c8 <_printf_i+0x160>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	079b      	lsls	r3, r3, #30
 800b370:	d413      	bmi.n	800b39a <_printf_i+0x232>
 800b372:	68e0      	ldr	r0, [r4, #12]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	4298      	cmp	r0, r3
 800b378:	bfb8      	it	lt
 800b37a:	4618      	movlt	r0, r3
 800b37c:	e7a6      	b.n	800b2cc <_printf_i+0x164>
 800b37e:	2301      	movs	r3, #1
 800b380:	4632      	mov	r2, r6
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	47d0      	blx	sl
 800b388:	3001      	adds	r0, #1
 800b38a:	d09d      	beq.n	800b2c8 <_printf_i+0x160>
 800b38c:	3501      	adds	r5, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	9903      	ldr	r1, [sp, #12]
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	42ab      	cmp	r3, r5
 800b396:	dcf2      	bgt.n	800b37e <_printf_i+0x216>
 800b398:	e7eb      	b.n	800b372 <_printf_i+0x20a>
 800b39a:	2500      	movs	r5, #0
 800b39c:	f104 0619 	add.w	r6, r4, #25
 800b3a0:	e7f5      	b.n	800b38e <_printf_i+0x226>
 800b3a2:	bf00      	nop
 800b3a4:	0800d7a6 	.word	0x0800d7a6
 800b3a8:	0800d7b7 	.word	0x0800d7b7

0800b3ac <std>:
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	b510      	push	{r4, lr}
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ba:	6083      	str	r3, [r0, #8]
 800b3bc:	8181      	strh	r1, [r0, #12]
 800b3be:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c0:	81c2      	strh	r2, [r0, #14]
 800b3c2:	6183      	str	r3, [r0, #24]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	2208      	movs	r2, #8
 800b3c8:	305c      	adds	r0, #92	; 0x5c
 800b3ca:	f000 f914 	bl	800b5f6 <memset>
 800b3ce:	4b0d      	ldr	r3, [pc, #52]	; (800b404 <std+0x58>)
 800b3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <std+0x5c>)
 800b3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <std+0x60>)
 800b3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3da:	4b0d      	ldr	r3, [pc, #52]	; (800b410 <std+0x64>)
 800b3dc:	6323      	str	r3, [r4, #48]	; 0x30
 800b3de:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <std+0x68>)
 800b3e0:	6224      	str	r4, [r4, #32]
 800b3e2:	429c      	cmp	r4, r3
 800b3e4:	d006      	beq.n	800b3f4 <std+0x48>
 800b3e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b3ea:	4294      	cmp	r4, r2
 800b3ec:	d002      	beq.n	800b3f4 <std+0x48>
 800b3ee:	33d0      	adds	r3, #208	; 0xd0
 800b3f0:	429c      	cmp	r4, r3
 800b3f2:	d105      	bne.n	800b400 <std+0x54>
 800b3f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fc:	f000 b978 	b.w	800b6f0 <__retarget_lock_init_recursive>
 800b400:	bd10      	pop	{r4, pc}
 800b402:	bf00      	nop
 800b404:	0800b571 	.word	0x0800b571
 800b408:	0800b593 	.word	0x0800b593
 800b40c:	0800b5cb 	.word	0x0800b5cb
 800b410:	0800b5ef 	.word	0x0800b5ef
 800b414:	240004cc 	.word	0x240004cc

0800b418 <stdio_exit_handler>:
 800b418:	4a02      	ldr	r2, [pc, #8]	; (800b424 <stdio_exit_handler+0xc>)
 800b41a:	4903      	ldr	r1, [pc, #12]	; (800b428 <stdio_exit_handler+0x10>)
 800b41c:	4803      	ldr	r0, [pc, #12]	; (800b42c <stdio_exit_handler+0x14>)
 800b41e:	f000 b869 	b.w	800b4f4 <_fwalk_sglue>
 800b422:	bf00      	nop
 800b424:	24000010 	.word	0x24000010
 800b428:	0800cfb5 	.word	0x0800cfb5
 800b42c:	2400001c 	.word	0x2400001c

0800b430 <cleanup_stdio>:
 800b430:	6841      	ldr	r1, [r0, #4]
 800b432:	4b0c      	ldr	r3, [pc, #48]	; (800b464 <cleanup_stdio+0x34>)
 800b434:	4299      	cmp	r1, r3
 800b436:	b510      	push	{r4, lr}
 800b438:	4604      	mov	r4, r0
 800b43a:	d001      	beq.n	800b440 <cleanup_stdio+0x10>
 800b43c:	f001 fdba 	bl	800cfb4 <_fflush_r>
 800b440:	68a1      	ldr	r1, [r4, #8]
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <cleanup_stdio+0x38>)
 800b444:	4299      	cmp	r1, r3
 800b446:	d002      	beq.n	800b44e <cleanup_stdio+0x1e>
 800b448:	4620      	mov	r0, r4
 800b44a:	f001 fdb3 	bl	800cfb4 <_fflush_r>
 800b44e:	68e1      	ldr	r1, [r4, #12]
 800b450:	4b06      	ldr	r3, [pc, #24]	; (800b46c <cleanup_stdio+0x3c>)
 800b452:	4299      	cmp	r1, r3
 800b454:	d004      	beq.n	800b460 <cleanup_stdio+0x30>
 800b456:	4620      	mov	r0, r4
 800b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45c:	f001 bdaa 	b.w	800cfb4 <_fflush_r>
 800b460:	bd10      	pop	{r4, pc}
 800b462:	bf00      	nop
 800b464:	240004cc 	.word	0x240004cc
 800b468:	24000534 	.word	0x24000534
 800b46c:	2400059c 	.word	0x2400059c

0800b470 <global_stdio_init.part.0>:
 800b470:	b510      	push	{r4, lr}
 800b472:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <global_stdio_init.part.0+0x30>)
 800b474:	4c0b      	ldr	r4, [pc, #44]	; (800b4a4 <global_stdio_init.part.0+0x34>)
 800b476:	4a0c      	ldr	r2, [pc, #48]	; (800b4a8 <global_stdio_init.part.0+0x38>)
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	4620      	mov	r0, r4
 800b47c:	2200      	movs	r2, #0
 800b47e:	2104      	movs	r1, #4
 800b480:	f7ff ff94 	bl	800b3ac <std>
 800b484:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b488:	2201      	movs	r2, #1
 800b48a:	2109      	movs	r1, #9
 800b48c:	f7ff ff8e 	bl	800b3ac <std>
 800b490:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b494:	2202      	movs	r2, #2
 800b496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b49a:	2112      	movs	r1, #18
 800b49c:	f7ff bf86 	b.w	800b3ac <std>
 800b4a0:	24000604 	.word	0x24000604
 800b4a4:	240004cc 	.word	0x240004cc
 800b4a8:	0800b419 	.word	0x0800b419

0800b4ac <__sfp_lock_acquire>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__sfp_lock_acquire+0x8>)
 800b4ae:	f000 b920 	b.w	800b6f2 <__retarget_lock_acquire_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	2400060d 	.word	0x2400060d

0800b4b8 <__sfp_lock_release>:
 800b4b8:	4801      	ldr	r0, [pc, #4]	; (800b4c0 <__sfp_lock_release+0x8>)
 800b4ba:	f000 b91b 	b.w	800b6f4 <__retarget_lock_release_recursive>
 800b4be:	bf00      	nop
 800b4c0:	2400060d 	.word	0x2400060d

0800b4c4 <__sinit>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	f7ff fff0 	bl	800b4ac <__sfp_lock_acquire>
 800b4cc:	6a23      	ldr	r3, [r4, #32]
 800b4ce:	b11b      	cbz	r3, 800b4d8 <__sinit+0x14>
 800b4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d4:	f7ff bff0 	b.w	800b4b8 <__sfp_lock_release>
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <__sinit+0x28>)
 800b4da:	6223      	str	r3, [r4, #32]
 800b4dc:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <__sinit+0x2c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f5      	bne.n	800b4d0 <__sinit+0xc>
 800b4e4:	f7ff ffc4 	bl	800b470 <global_stdio_init.part.0>
 800b4e8:	e7f2      	b.n	800b4d0 <__sinit+0xc>
 800b4ea:	bf00      	nop
 800b4ec:	0800b431 	.word	0x0800b431
 800b4f0:	24000604 	.word	0x24000604

0800b4f4 <_fwalk_sglue>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	4688      	mov	r8, r1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	2600      	movs	r6, #0
 800b500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b504:	f1b9 0901 	subs.w	r9, r9, #1
 800b508:	d505      	bpl.n	800b516 <_fwalk_sglue+0x22>
 800b50a:	6824      	ldr	r4, [r4, #0]
 800b50c:	2c00      	cmp	r4, #0
 800b50e:	d1f7      	bne.n	800b500 <_fwalk_sglue+0xc>
 800b510:	4630      	mov	r0, r6
 800b512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b516:	89ab      	ldrh	r3, [r5, #12]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d907      	bls.n	800b52c <_fwalk_sglue+0x38>
 800b51c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b520:	3301      	adds	r3, #1
 800b522:	d003      	beq.n	800b52c <_fwalk_sglue+0x38>
 800b524:	4629      	mov	r1, r5
 800b526:	4638      	mov	r0, r7
 800b528:	47c0      	blx	r8
 800b52a:	4306      	orrs	r6, r0
 800b52c:	3568      	adds	r5, #104	; 0x68
 800b52e:	e7e9      	b.n	800b504 <_fwalk_sglue+0x10>

0800b530 <siprintf>:
 800b530:	b40e      	push	{r1, r2, r3}
 800b532:	b500      	push	{lr}
 800b534:	b09c      	sub	sp, #112	; 0x70
 800b536:	ab1d      	add	r3, sp, #116	; 0x74
 800b538:	9002      	str	r0, [sp, #8]
 800b53a:	9006      	str	r0, [sp, #24]
 800b53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b540:	4809      	ldr	r0, [pc, #36]	; (800b568 <siprintf+0x38>)
 800b542:	9107      	str	r1, [sp, #28]
 800b544:	9104      	str	r1, [sp, #16]
 800b546:	4909      	ldr	r1, [pc, #36]	; (800b56c <siprintf+0x3c>)
 800b548:	f853 2b04 	ldr.w	r2, [r3], #4
 800b54c:	9105      	str	r1, [sp, #20]
 800b54e:	6800      	ldr	r0, [r0, #0]
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	a902      	add	r1, sp, #8
 800b554:	f001 fbaa 	bl	800ccac <_svfiprintf_r>
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	b01c      	add	sp, #112	; 0x70
 800b560:	f85d eb04 	ldr.w	lr, [sp], #4
 800b564:	b003      	add	sp, #12
 800b566:	4770      	bx	lr
 800b568:	24000068 	.word	0x24000068
 800b56c:	ffff0208 	.word	0xffff0208

0800b570 <__sread>:
 800b570:	b510      	push	{r4, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b578:	f000 f86c 	bl	800b654 <_read_r>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	bfab      	itete	ge
 800b580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b582:	89a3      	ldrhlt	r3, [r4, #12]
 800b584:	181b      	addge	r3, r3, r0
 800b586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b58a:	bfac      	ite	ge
 800b58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b58e:	81a3      	strhlt	r3, [r4, #12]
 800b590:	bd10      	pop	{r4, pc}

0800b592 <__swrite>:
 800b592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	461f      	mov	r7, r3
 800b598:	898b      	ldrh	r3, [r1, #12]
 800b59a:	05db      	lsls	r3, r3, #23
 800b59c:	4605      	mov	r5, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	d505      	bpl.n	800b5b0 <__swrite+0x1e>
 800b5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f000 f840 	bl	800b630 <_lseek_r>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ba:	81a3      	strh	r3, [r4, #12]
 800b5bc:	4632      	mov	r2, r6
 800b5be:	463b      	mov	r3, r7
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c6:	f000 b857 	b.w	800b678 <_write_r>

0800b5ca <__sseek>:
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d2:	f000 f82d 	bl	800b630 <_lseek_r>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	bf15      	itete	ne
 800b5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5e6:	81a3      	strheq	r3, [r4, #12]
 800b5e8:	bf18      	it	ne
 800b5ea:	81a3      	strhne	r3, [r4, #12]
 800b5ec:	bd10      	pop	{r4, pc}

0800b5ee <__sclose>:
 800b5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f2:	f000 b80d 	b.w	800b610 <_close_r>

0800b5f6 <memset>:
 800b5f6:	4402      	add	r2, r0
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d100      	bne.n	800b600 <memset+0xa>
 800b5fe:	4770      	bx	lr
 800b600:	f803 1b01 	strb.w	r1, [r3], #1
 800b604:	e7f9      	b.n	800b5fa <memset+0x4>
	...

0800b608 <_localeconv_r>:
 800b608:	4800      	ldr	r0, [pc, #0]	; (800b60c <_localeconv_r+0x4>)
 800b60a:	4770      	bx	lr
 800b60c:	2400015c 	.word	0x2400015c

0800b610 <_close_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d06      	ldr	r5, [pc, #24]	; (800b62c <_close_r+0x1c>)
 800b614:	2300      	movs	r3, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	f7f5 ff69 	bl	80014f2 <_close>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_close_r+0x1a>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_close_r+0x1a>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	24000608 	.word	0x24000608

0800b630 <_lseek_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_lseek_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f5 ff7e 	bl	8001540 <_lseek>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_lseek_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_lseek_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	24000608 	.word	0x24000608

0800b654 <_read_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4d07      	ldr	r5, [pc, #28]	; (800b674 <_read_r+0x20>)
 800b658:	4604      	mov	r4, r0
 800b65a:	4608      	mov	r0, r1
 800b65c:	4611      	mov	r1, r2
 800b65e:	2200      	movs	r2, #0
 800b660:	602a      	str	r2, [r5, #0]
 800b662:	461a      	mov	r2, r3
 800b664:	f7f5 ff0c 	bl	8001480 <_read>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_read_r+0x1e>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_read_r+0x1e>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	24000608 	.word	0x24000608

0800b678 <_write_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d07      	ldr	r5, [pc, #28]	; (800b698 <_write_r+0x20>)
 800b67c:	4604      	mov	r4, r0
 800b67e:	4608      	mov	r0, r1
 800b680:	4611      	mov	r1, r2
 800b682:	2200      	movs	r2, #0
 800b684:	602a      	str	r2, [r5, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	f7f5 ff17 	bl	80014ba <_write>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_write_r+0x1e>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_write_r+0x1e>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	24000608 	.word	0x24000608

0800b69c <__errno>:
 800b69c:	4b01      	ldr	r3, [pc, #4]	; (800b6a4 <__errno+0x8>)
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	4770      	bx	lr
 800b6a2:	bf00      	nop
 800b6a4:	24000068 	.word	0x24000068

0800b6a8 <__libc_init_array>:
 800b6a8:	b570      	push	{r4, r5, r6, lr}
 800b6aa:	4d0d      	ldr	r5, [pc, #52]	; (800b6e0 <__libc_init_array+0x38>)
 800b6ac:	4c0d      	ldr	r4, [pc, #52]	; (800b6e4 <__libc_init_array+0x3c>)
 800b6ae:	1b64      	subs	r4, r4, r5
 800b6b0:	10a4      	asrs	r4, r4, #2
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	42a6      	cmp	r6, r4
 800b6b6:	d109      	bne.n	800b6cc <__libc_init_array+0x24>
 800b6b8:	4d0b      	ldr	r5, [pc, #44]	; (800b6e8 <__libc_init_array+0x40>)
 800b6ba:	4c0c      	ldr	r4, [pc, #48]	; (800b6ec <__libc_init_array+0x44>)
 800b6bc:	f002 f810 	bl	800d6e0 <_init>
 800b6c0:	1b64      	subs	r4, r4, r5
 800b6c2:	10a4      	asrs	r4, r4, #2
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	42a6      	cmp	r6, r4
 800b6c8:	d105      	bne.n	800b6d6 <__libc_init_array+0x2e>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d0:	4798      	blx	r3
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__libc_init_array+0xc>
 800b6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6da:	4798      	blx	r3
 800b6dc:	3601      	adds	r6, #1
 800b6de:	e7f2      	b.n	800b6c6 <__libc_init_array+0x1e>
 800b6e0:	0800db0c 	.word	0x0800db0c
 800b6e4:	0800db0c 	.word	0x0800db0c
 800b6e8:	0800db0c 	.word	0x0800db0c
 800b6ec:	0800db10 	.word	0x0800db10

0800b6f0 <__retarget_lock_init_recursive>:
 800b6f0:	4770      	bx	lr

0800b6f2 <__retarget_lock_acquire_recursive>:
 800b6f2:	4770      	bx	lr

0800b6f4 <__retarget_lock_release_recursive>:
 800b6f4:	4770      	bx	lr

0800b6f6 <memcpy>:
 800b6f6:	440a      	add	r2, r1
 800b6f8:	4291      	cmp	r1, r2
 800b6fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6fe:	d100      	bne.n	800b702 <memcpy+0xc>
 800b700:	4770      	bx	lr
 800b702:	b510      	push	{r4, lr}
 800b704:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b70c:	4291      	cmp	r1, r2
 800b70e:	d1f9      	bne.n	800b704 <memcpy+0xe>
 800b710:	bd10      	pop	{r4, pc}

0800b712 <quorem>:
 800b712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b716:	6903      	ldr	r3, [r0, #16]
 800b718:	690c      	ldr	r4, [r1, #16]
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	4607      	mov	r7, r0
 800b71e:	db7e      	blt.n	800b81e <quorem+0x10c>
 800b720:	3c01      	subs	r4, #1
 800b722:	f101 0814 	add.w	r8, r1, #20
 800b726:	f100 0514 	add.w	r5, r0, #20
 800b72a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b738:	3301      	adds	r3, #1
 800b73a:	429a      	cmp	r2, r3
 800b73c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b744:	fbb2 f6f3 	udiv	r6, r2, r3
 800b748:	d331      	bcc.n	800b7ae <quorem+0x9c>
 800b74a:	f04f 0e00 	mov.w	lr, #0
 800b74e:	4640      	mov	r0, r8
 800b750:	46ac      	mov	ip, r5
 800b752:	46f2      	mov	sl, lr
 800b754:	f850 2b04 	ldr.w	r2, [r0], #4
 800b758:	b293      	uxth	r3, r2
 800b75a:	fb06 e303 	mla	r3, r6, r3, lr
 800b75e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b762:	0c1a      	lsrs	r2, r3, #16
 800b764:	b29b      	uxth	r3, r3
 800b766:	ebaa 0303 	sub.w	r3, sl, r3
 800b76a:	f8dc a000 	ldr.w	sl, [ip]
 800b76e:	fa13 f38a 	uxtah	r3, r3, sl
 800b772:	fb06 220e 	mla	r2, r6, lr, r2
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b77e:	b292      	uxth	r2, r2
 800b780:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b788:	f8bd 3000 	ldrh.w	r3, [sp]
 800b78c:	4581      	cmp	r9, r0
 800b78e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b792:	f84c 3b04 	str.w	r3, [ip], #4
 800b796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b79a:	d2db      	bcs.n	800b754 <quorem+0x42>
 800b79c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7a0:	b92b      	cbnz	r3, 800b7ae <quorem+0x9c>
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	3b04      	subs	r3, #4
 800b7a6:	429d      	cmp	r5, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	d32c      	bcc.n	800b806 <quorem+0xf4>
 800b7ac:	613c      	str	r4, [r7, #16]
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f001 f922 	bl	800c9f8 <__mcmp>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	db22      	blt.n	800b7fe <quorem+0xec>
 800b7b8:	3601      	adds	r6, #1
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	2000      	movs	r0, #0
 800b7be:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7c2:	f8d1 c000 	ldr.w	ip, [r1]
 800b7c6:	b293      	uxth	r3, r2
 800b7c8:	1ac3      	subs	r3, r0, r3
 800b7ca:	0c12      	lsrs	r2, r2, #16
 800b7cc:	fa13 f38c 	uxtah	r3, r3, ip
 800b7d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b7d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7de:	45c1      	cmp	r9, r8
 800b7e0:	f841 3b04 	str.w	r3, [r1], #4
 800b7e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7e8:	d2e9      	bcs.n	800b7be <quorem+0xac>
 800b7ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7f2:	b922      	cbnz	r2, 800b7fe <quorem+0xec>
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	429d      	cmp	r5, r3
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	d30a      	bcc.n	800b812 <quorem+0x100>
 800b7fc:	613c      	str	r4, [r7, #16]
 800b7fe:	4630      	mov	r0, r6
 800b800:	b003      	add	sp, #12
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	6812      	ldr	r2, [r2, #0]
 800b808:	3b04      	subs	r3, #4
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d1ce      	bne.n	800b7ac <quorem+0x9a>
 800b80e:	3c01      	subs	r4, #1
 800b810:	e7c9      	b.n	800b7a6 <quorem+0x94>
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	3b04      	subs	r3, #4
 800b816:	2a00      	cmp	r2, #0
 800b818:	d1f0      	bne.n	800b7fc <quorem+0xea>
 800b81a:	3c01      	subs	r4, #1
 800b81c:	e7eb      	b.n	800b7f6 <quorem+0xe4>
 800b81e:	2000      	movs	r0, #0
 800b820:	e7ee      	b.n	800b800 <quorem+0xee>
 800b822:	0000      	movs	r0, r0
 800b824:	0000      	movs	r0, r0
	...

0800b828 <_dtoa_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	ed2d 8b02 	vpush	{d8}
 800b830:	69c5      	ldr	r5, [r0, #28]
 800b832:	b091      	sub	sp, #68	; 0x44
 800b834:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b838:	ec59 8b10 	vmov	r8, r9, d0
 800b83c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b83e:	9106      	str	r1, [sp, #24]
 800b840:	4606      	mov	r6, r0
 800b842:	9208      	str	r2, [sp, #32]
 800b844:	930c      	str	r3, [sp, #48]	; 0x30
 800b846:	b975      	cbnz	r5, 800b866 <_dtoa_r+0x3e>
 800b848:	2010      	movs	r0, #16
 800b84a:	f000 fda5 	bl	800c398 <malloc>
 800b84e:	4602      	mov	r2, r0
 800b850:	61f0      	str	r0, [r6, #28]
 800b852:	b920      	cbnz	r0, 800b85e <_dtoa_r+0x36>
 800b854:	4ba6      	ldr	r3, [pc, #664]	; (800baf0 <_dtoa_r+0x2c8>)
 800b856:	21ef      	movs	r1, #239	; 0xef
 800b858:	48a6      	ldr	r0, [pc, #664]	; (800baf4 <_dtoa_r+0x2cc>)
 800b85a:	f001 fbfd 	bl	800d058 <__assert_func>
 800b85e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b862:	6005      	str	r5, [r0, #0]
 800b864:	60c5      	str	r5, [r0, #12]
 800b866:	69f3      	ldr	r3, [r6, #28]
 800b868:	6819      	ldr	r1, [r3, #0]
 800b86a:	b151      	cbz	r1, 800b882 <_dtoa_r+0x5a>
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	604a      	str	r2, [r1, #4]
 800b870:	2301      	movs	r3, #1
 800b872:	4093      	lsls	r3, r2
 800b874:	608b      	str	r3, [r1, #8]
 800b876:	4630      	mov	r0, r6
 800b878:	f000 fe82 	bl	800c580 <_Bfree>
 800b87c:	69f3      	ldr	r3, [r6, #28]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	f1b9 0300 	subs.w	r3, r9, #0
 800b886:	bfbb      	ittet	lt
 800b888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b88c:	9303      	strlt	r3, [sp, #12]
 800b88e:	2300      	movge	r3, #0
 800b890:	2201      	movlt	r2, #1
 800b892:	bfac      	ite	ge
 800b894:	6023      	strge	r3, [r4, #0]
 800b896:	6022      	strlt	r2, [r4, #0]
 800b898:	4b97      	ldr	r3, [pc, #604]	; (800baf8 <_dtoa_r+0x2d0>)
 800b89a:	9c03      	ldr	r4, [sp, #12]
 800b89c:	43a3      	bics	r3, r4
 800b89e:	d11c      	bne.n	800b8da <_dtoa_r+0xb2>
 800b8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b8ac:	ea53 0308 	orrs.w	r3, r3, r8
 800b8b0:	f000 84fb 	beq.w	800c2aa <_dtoa_r+0xa82>
 800b8b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8b6:	b963      	cbnz	r3, 800b8d2 <_dtoa_r+0xaa>
 800b8b8:	4b90      	ldr	r3, [pc, #576]	; (800bafc <_dtoa_r+0x2d4>)
 800b8ba:	e020      	b.n	800b8fe <_dtoa_r+0xd6>
 800b8bc:	4b90      	ldr	r3, [pc, #576]	; (800bb00 <_dtoa_r+0x2d8>)
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	9801      	ldr	r0, [sp, #4]
 800b8c8:	b011      	add	sp, #68	; 0x44
 800b8ca:	ecbd 8b02 	vpop	{d8}
 800b8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d2:	4b8a      	ldr	r3, [pc, #552]	; (800bafc <_dtoa_r+0x2d4>)
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	e7f3      	b.n	800b8c2 <_dtoa_r+0x9a>
 800b8da:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b8de:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e6:	d10c      	bne.n	800b902 <_dtoa_r+0xda>
 800b8e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 84d7 	beq.w	800c2a4 <_dtoa_r+0xa7c>
 800b8f6:	4b83      	ldr	r3, [pc, #524]	; (800bb04 <_dtoa_r+0x2dc>)
 800b8f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	e7e1      	b.n	800b8c6 <_dtoa_r+0x9e>
 800b902:	aa0e      	add	r2, sp, #56	; 0x38
 800b904:	a90f      	add	r1, sp, #60	; 0x3c
 800b906:	4630      	mov	r0, r6
 800b908:	eeb0 0b48 	vmov.f64	d0, d8
 800b90c:	f001 f91a 	bl	800cb44 <__d2b>
 800b910:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b914:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b916:	4605      	mov	r5, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d046      	beq.n	800b9aa <_dtoa_r+0x182>
 800b91c:	eeb0 7b48 	vmov.f64	d7, d8
 800b920:	ee18 1a90 	vmov	r1, s17
 800b924:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b928:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b92c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b934:	2000      	movs	r0, #0
 800b936:	ee07 1a90 	vmov	s15, r1
 800b93a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b93e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bad8 <_dtoa_r+0x2b0>
 800b942:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b946:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bae0 <_dtoa_r+0x2b8>
 800b94a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b94e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bae8 <_dtoa_r+0x2c0>
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b95a:	eeb0 7b46 	vmov.f64	d7, d6
 800b95e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b962:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b966:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96e:	ee16 ba90 	vmov	fp, s13
 800b972:	9009      	str	r0, [sp, #36]	; 0x24
 800b974:	d508      	bpl.n	800b988 <_dtoa_r+0x160>
 800b976:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b97a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b982:	bf18      	it	ne
 800b984:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b988:	f1bb 0f16 	cmp.w	fp, #22
 800b98c:	d82b      	bhi.n	800b9e6 <_dtoa_r+0x1be>
 800b98e:	495e      	ldr	r1, [pc, #376]	; (800bb08 <_dtoa_r+0x2e0>)
 800b990:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b994:	ed91 7b00 	vldr	d7, [r1]
 800b998:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a0:	d501      	bpl.n	800b9a6 <_dtoa_r+0x17e>
 800b9a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	e01e      	b.n	800b9e8 <_dtoa_r+0x1c0>
 800b9aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b9b2:	2920      	cmp	r1, #32
 800b9b4:	bfc1      	itttt	gt
 800b9b6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b9ba:	408c      	lslgt	r4, r1
 800b9bc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b9c0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b9c4:	bfd6      	itet	le
 800b9c6:	f1c1 0120 	rsble	r1, r1, #32
 800b9ca:	4321      	orrgt	r1, r4
 800b9cc:	fa08 f101 	lslle.w	r1, r8, r1
 800b9d0:	ee07 1a90 	vmov	s15, r1
 800b9d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	ee17 1a90 	vmov	r1, s15
 800b9de:	2001      	movs	r0, #1
 800b9e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b9e4:	e7a7      	b.n	800b936 <_dtoa_r+0x10e>
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	1ad2      	subs	r2, r2, r3
 800b9ea:	1e53      	subs	r3, r2, #1
 800b9ec:	9305      	str	r3, [sp, #20]
 800b9ee:	bf45      	ittet	mi
 800b9f0:	f1c2 0301 	rsbmi	r3, r2, #1
 800b9f4:	9304      	strmi	r3, [sp, #16]
 800b9f6:	2300      	movpl	r3, #0
 800b9f8:	2300      	movmi	r3, #0
 800b9fa:	bf4c      	ite	mi
 800b9fc:	9305      	strmi	r3, [sp, #20]
 800b9fe:	9304      	strpl	r3, [sp, #16]
 800ba00:	f1bb 0f00 	cmp.w	fp, #0
 800ba04:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba06:	db18      	blt.n	800ba3a <_dtoa_r+0x212>
 800ba08:	9b05      	ldr	r3, [sp, #20]
 800ba0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ba0e:	445b      	add	r3, fp
 800ba10:	9305      	str	r3, [sp, #20]
 800ba12:	2300      	movs	r3, #0
 800ba14:	9a06      	ldr	r2, [sp, #24]
 800ba16:	2a09      	cmp	r2, #9
 800ba18:	d848      	bhi.n	800baac <_dtoa_r+0x284>
 800ba1a:	2a05      	cmp	r2, #5
 800ba1c:	bfc4      	itt	gt
 800ba1e:	3a04      	subgt	r2, #4
 800ba20:	9206      	strgt	r2, [sp, #24]
 800ba22:	9a06      	ldr	r2, [sp, #24]
 800ba24:	f1a2 0202 	sub.w	r2, r2, #2
 800ba28:	bfcc      	ite	gt
 800ba2a:	2400      	movgt	r4, #0
 800ba2c:	2401      	movle	r4, #1
 800ba2e:	2a03      	cmp	r2, #3
 800ba30:	d847      	bhi.n	800bac2 <_dtoa_r+0x29a>
 800ba32:	e8df f002 	tbb	[pc, r2]
 800ba36:	2d0b      	.short	0x2d0b
 800ba38:	392b      	.short	0x392b
 800ba3a:	9b04      	ldr	r3, [sp, #16]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	eba3 030b 	sub.w	r3, r3, fp
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	920a      	str	r2, [sp, #40]	; 0x28
 800ba46:	f1cb 0300 	rsb	r3, fp, #0
 800ba4a:	e7e3      	b.n	800ba14 <_dtoa_r+0x1ec>
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	9207      	str	r2, [sp, #28]
 800ba50:	9a08      	ldr	r2, [sp, #32]
 800ba52:	2a00      	cmp	r2, #0
 800ba54:	dc38      	bgt.n	800bac8 <_dtoa_r+0x2a0>
 800ba56:	f04f 0a01 	mov.w	sl, #1
 800ba5a:	46d1      	mov	r9, sl
 800ba5c:	4652      	mov	r2, sl
 800ba5e:	f8cd a020 	str.w	sl, [sp, #32]
 800ba62:	69f7      	ldr	r7, [r6, #28]
 800ba64:	2100      	movs	r1, #0
 800ba66:	2004      	movs	r0, #4
 800ba68:	f100 0c14 	add.w	ip, r0, #20
 800ba6c:	4594      	cmp	ip, r2
 800ba6e:	d930      	bls.n	800bad2 <_dtoa_r+0x2aa>
 800ba70:	6079      	str	r1, [r7, #4]
 800ba72:	4630      	mov	r0, r6
 800ba74:	930d      	str	r3, [sp, #52]	; 0x34
 800ba76:	f000 fd43 	bl	800c500 <_Balloc>
 800ba7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba7c:	9001      	str	r0, [sp, #4]
 800ba7e:	4602      	mov	r2, r0
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d145      	bne.n	800bb10 <_dtoa_r+0x2e8>
 800ba84:	4b21      	ldr	r3, [pc, #132]	; (800bb0c <_dtoa_r+0x2e4>)
 800ba86:	f240 11af 	movw	r1, #431	; 0x1af
 800ba8a:	e6e5      	b.n	800b858 <_dtoa_r+0x30>
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	e7de      	b.n	800ba4e <_dtoa_r+0x226>
 800ba90:	2200      	movs	r2, #0
 800ba92:	9207      	str	r2, [sp, #28]
 800ba94:	9a08      	ldr	r2, [sp, #32]
 800ba96:	eb0b 0a02 	add.w	sl, fp, r2
 800ba9a:	f10a 0901 	add.w	r9, sl, #1
 800ba9e:	464a      	mov	r2, r9
 800baa0:	2a01      	cmp	r2, #1
 800baa2:	bfb8      	it	lt
 800baa4:	2201      	movlt	r2, #1
 800baa6:	e7dc      	b.n	800ba62 <_dtoa_r+0x23a>
 800baa8:	2201      	movs	r2, #1
 800baaa:	e7f2      	b.n	800ba92 <_dtoa_r+0x26a>
 800baac:	2401      	movs	r4, #1
 800baae:	2200      	movs	r2, #0
 800bab0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800bab4:	f04f 3aff 	mov.w	sl, #4294967295
 800bab8:	2100      	movs	r1, #0
 800baba:	46d1      	mov	r9, sl
 800babc:	2212      	movs	r2, #18
 800babe:	9108      	str	r1, [sp, #32]
 800bac0:	e7cf      	b.n	800ba62 <_dtoa_r+0x23a>
 800bac2:	2201      	movs	r2, #1
 800bac4:	9207      	str	r2, [sp, #28]
 800bac6:	e7f5      	b.n	800bab4 <_dtoa_r+0x28c>
 800bac8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bacc:	46d1      	mov	r9, sl
 800bace:	4652      	mov	r2, sl
 800bad0:	e7c7      	b.n	800ba62 <_dtoa_r+0x23a>
 800bad2:	3101      	adds	r1, #1
 800bad4:	0040      	lsls	r0, r0, #1
 800bad6:	e7c7      	b.n	800ba68 <_dtoa_r+0x240>
 800bad8:	636f4361 	.word	0x636f4361
 800badc:	3fd287a7 	.word	0x3fd287a7
 800bae0:	8b60c8b3 	.word	0x8b60c8b3
 800bae4:	3fc68a28 	.word	0x3fc68a28
 800bae8:	509f79fb 	.word	0x509f79fb
 800baec:	3fd34413 	.word	0x3fd34413
 800baf0:	0800d7d5 	.word	0x0800d7d5
 800baf4:	0800d7ec 	.word	0x0800d7ec
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	0800d7d1 	.word	0x0800d7d1
 800bb00:	0800d7c8 	.word	0x0800d7c8
 800bb04:	0800d7a5 	.word	0x0800d7a5
 800bb08:	0800d8d8 	.word	0x0800d8d8
 800bb0c:	0800d844 	.word	0x0800d844
 800bb10:	69f2      	ldr	r2, [r6, #28]
 800bb12:	9901      	ldr	r1, [sp, #4]
 800bb14:	6011      	str	r1, [r2, #0]
 800bb16:	f1b9 0f0e 	cmp.w	r9, #14
 800bb1a:	d86c      	bhi.n	800bbf6 <_dtoa_r+0x3ce>
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d06a      	beq.n	800bbf6 <_dtoa_r+0x3ce>
 800bb20:	f1bb 0f00 	cmp.w	fp, #0
 800bb24:	f340 80a0 	ble.w	800bc68 <_dtoa_r+0x440>
 800bb28:	4ac1      	ldr	r2, [pc, #772]	; (800be30 <_dtoa_r+0x608>)
 800bb2a:	f00b 010f 	and.w	r1, fp, #15
 800bb2e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bb32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb36:	ed92 7b00 	vldr	d7, [r2]
 800bb3a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800bb3e:	f000 8087 	beq.w	800bc50 <_dtoa_r+0x428>
 800bb42:	49bc      	ldr	r1, [pc, #752]	; (800be34 <_dtoa_r+0x60c>)
 800bb44:	ed91 6b08 	vldr	d6, [r1, #32]
 800bb48:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bb4c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bb50:	f002 020f 	and.w	r2, r2, #15
 800bb54:	2103      	movs	r1, #3
 800bb56:	48b7      	ldr	r0, [pc, #732]	; (800be34 <_dtoa_r+0x60c>)
 800bb58:	2a00      	cmp	r2, #0
 800bb5a:	d17b      	bne.n	800bc54 <_dtoa_r+0x42c>
 800bb5c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bb60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bb64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb6e:	2a00      	cmp	r2, #0
 800bb70:	f000 80a0 	beq.w	800bcb4 <_dtoa_r+0x48c>
 800bb74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bb78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb80:	f140 8098 	bpl.w	800bcb4 <_dtoa_r+0x48c>
 800bb84:	f1b9 0f00 	cmp.w	r9, #0
 800bb88:	f000 8094 	beq.w	800bcb4 <_dtoa_r+0x48c>
 800bb8c:	f1ba 0f00 	cmp.w	sl, #0
 800bb90:	dd2f      	ble.n	800bbf2 <_dtoa_r+0x3ca>
 800bb92:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bb96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb9e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bba2:	3101      	adds	r1, #1
 800bba4:	4654      	mov	r4, sl
 800bba6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bbaa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bbae:	ee07 1a90 	vmov	s15, r1
 800bbb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bbb6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bbba:	ee15 7a90 	vmov	r7, s11
 800bbbe:	ec51 0b15 	vmov	r0, r1, d5
 800bbc2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800bbc6:	2c00      	cmp	r4, #0
 800bbc8:	d177      	bne.n	800bcba <_dtoa_r+0x492>
 800bbca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bbce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bbd2:	ec41 0b17 	vmov	d7, r0, r1
 800bbd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbde:	f300 826a 	bgt.w	800c0b6 <_dtoa_r+0x88e>
 800bbe2:	eeb1 7b47 	vneg.f64	d7, d7
 800bbe6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbee:	f100 8260 	bmi.w	800c0b2 <_dtoa_r+0x88a>
 800bbf2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bbf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bbf8:	2a00      	cmp	r2, #0
 800bbfa:	f2c0 811d 	blt.w	800be38 <_dtoa_r+0x610>
 800bbfe:	f1bb 0f0e 	cmp.w	fp, #14
 800bc02:	f300 8119 	bgt.w	800be38 <_dtoa_r+0x610>
 800bc06:	4b8a      	ldr	r3, [pc, #552]	; (800be30 <_dtoa_r+0x608>)
 800bc08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc0c:	ed93 6b00 	vldr	d6, [r3]
 800bc10:	9b08      	ldr	r3, [sp, #32]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f280 80b7 	bge.w	800bd86 <_dtoa_r+0x55e>
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	f300 80b3 	bgt.w	800bd86 <_dtoa_r+0x55e>
 800bc20:	f040 8246 	bne.w	800c0b0 <_dtoa_r+0x888>
 800bc24:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bc28:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	464c      	mov	r4, r9
 800bc3a:	464f      	mov	r7, r9
 800bc3c:	f280 821c 	bge.w	800c078 <_dtoa_r+0x850>
 800bc40:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc44:	2331      	movs	r3, #49	; 0x31
 800bc46:	f808 3b01 	strb.w	r3, [r8], #1
 800bc4a:	f10b 0b01 	add.w	fp, fp, #1
 800bc4e:	e218      	b.n	800c082 <_dtoa_r+0x85a>
 800bc50:	2102      	movs	r1, #2
 800bc52:	e780      	b.n	800bb56 <_dtoa_r+0x32e>
 800bc54:	07d4      	lsls	r4, r2, #31
 800bc56:	d504      	bpl.n	800bc62 <_dtoa_r+0x43a>
 800bc58:	ed90 6b00 	vldr	d6, [r0]
 800bc5c:	3101      	adds	r1, #1
 800bc5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc62:	1052      	asrs	r2, r2, #1
 800bc64:	3008      	adds	r0, #8
 800bc66:	e777      	b.n	800bb58 <_dtoa_r+0x330>
 800bc68:	d022      	beq.n	800bcb0 <_dtoa_r+0x488>
 800bc6a:	f1cb 0200 	rsb	r2, fp, #0
 800bc6e:	4970      	ldr	r1, [pc, #448]	; (800be30 <_dtoa_r+0x608>)
 800bc70:	f002 000f 	and.w	r0, r2, #15
 800bc74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bc78:	ed91 7b00 	vldr	d7, [r1]
 800bc7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bc80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc84:	486b      	ldr	r0, [pc, #428]	; (800be34 <_dtoa_r+0x60c>)
 800bc86:	1112      	asrs	r2, r2, #4
 800bc88:	2400      	movs	r4, #0
 800bc8a:	2102      	movs	r1, #2
 800bc8c:	b92a      	cbnz	r2, 800bc9a <_dtoa_r+0x472>
 800bc8e:	2c00      	cmp	r4, #0
 800bc90:	f43f af6a 	beq.w	800bb68 <_dtoa_r+0x340>
 800bc94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc98:	e766      	b.n	800bb68 <_dtoa_r+0x340>
 800bc9a:	07d7      	lsls	r7, r2, #31
 800bc9c:	d505      	bpl.n	800bcaa <_dtoa_r+0x482>
 800bc9e:	ed90 6b00 	vldr	d6, [r0]
 800bca2:	3101      	adds	r1, #1
 800bca4:	2401      	movs	r4, #1
 800bca6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcaa:	1052      	asrs	r2, r2, #1
 800bcac:	3008      	adds	r0, #8
 800bcae:	e7ed      	b.n	800bc8c <_dtoa_r+0x464>
 800bcb0:	2102      	movs	r1, #2
 800bcb2:	e759      	b.n	800bb68 <_dtoa_r+0x340>
 800bcb4:	465a      	mov	r2, fp
 800bcb6:	464c      	mov	r4, r9
 800bcb8:	e775      	b.n	800bba6 <_dtoa_r+0x37e>
 800bcba:	ec41 0b17 	vmov	d7, r0, r1
 800bcbe:	495c      	ldr	r1, [pc, #368]	; (800be30 <_dtoa_r+0x608>)
 800bcc0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800bcc4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800bcc8:	9901      	ldr	r1, [sp, #4]
 800bcca:	440c      	add	r4, r1
 800bccc:	9907      	ldr	r1, [sp, #28]
 800bcce:	b351      	cbz	r1, 800bd26 <_dtoa_r+0x4fe>
 800bcd0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bcd4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bcd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bcdc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bce0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bce4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bce8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bcec:	ee14 1a90 	vmov	r1, s9
 800bcf0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bcf4:	3130      	adds	r1, #48	; 0x30
 800bcf6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bcfa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd02:	f808 1b01 	strb.w	r1, [r8], #1
 800bd06:	d439      	bmi.n	800bd7c <_dtoa_r+0x554>
 800bd08:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bd0c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd14:	d472      	bmi.n	800bdfc <_dtoa_r+0x5d4>
 800bd16:	45a0      	cmp	r8, r4
 800bd18:	f43f af6b 	beq.w	800bbf2 <_dtoa_r+0x3ca>
 800bd1c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bd20:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd24:	e7e0      	b.n	800bce8 <_dtoa_r+0x4c0>
 800bd26:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd2e:	4620      	mov	r0, r4
 800bd30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bd34:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bd38:	ee14 1a90 	vmov	r1, s9
 800bd3c:	3130      	adds	r1, #48	; 0x30
 800bd3e:	f808 1b01 	strb.w	r1, [r8], #1
 800bd42:	45a0      	cmp	r8, r4
 800bd44:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bd48:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd4c:	d118      	bne.n	800bd80 <_dtoa_r+0x558>
 800bd4e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bd52:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bd56:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5e:	dc4d      	bgt.n	800bdfc <_dtoa_r+0x5d4>
 800bd60:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bd64:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6c:	f57f af41 	bpl.w	800bbf2 <_dtoa_r+0x3ca>
 800bd70:	4680      	mov	r8, r0
 800bd72:	3801      	subs	r0, #1
 800bd74:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bd78:	2b30      	cmp	r3, #48	; 0x30
 800bd7a:	d0f9      	beq.n	800bd70 <_dtoa_r+0x548>
 800bd7c:	4693      	mov	fp, r2
 800bd7e:	e02a      	b.n	800bdd6 <_dtoa_r+0x5ae>
 800bd80:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bd84:	e7d6      	b.n	800bd34 <_dtoa_r+0x50c>
 800bd86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd8a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bd8e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bd92:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bd96:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bd9a:	ee15 3a10 	vmov	r3, s10
 800bd9e:	3330      	adds	r3, #48	; 0x30
 800bda0:	f808 3b01 	strb.w	r3, [r8], #1
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	eba8 0303 	sub.w	r3, r8, r3
 800bdaa:	4599      	cmp	r9, r3
 800bdac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bdb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bdb4:	d133      	bne.n	800be1e <_dtoa_r+0x5f6>
 800bdb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bdba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bdbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc2:	dc1a      	bgt.n	800bdfa <_dtoa_r+0x5d2>
 800bdc4:	eeb4 7b46 	vcmp.f64	d7, d6
 800bdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdcc:	d103      	bne.n	800bdd6 <_dtoa_r+0x5ae>
 800bdce:	ee15 3a10 	vmov	r3, s10
 800bdd2:	07d9      	lsls	r1, r3, #31
 800bdd4:	d411      	bmi.n	800bdfa <_dtoa_r+0x5d2>
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f000 fbd1 	bl	800c580 <_Bfree>
 800bdde:	2300      	movs	r3, #0
 800bde0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bde2:	f888 3000 	strb.w	r3, [r8]
 800bde6:	f10b 0301 	add.w	r3, fp, #1
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f43f ad69 	beq.w	800b8c6 <_dtoa_r+0x9e>
 800bdf4:	f8c3 8000 	str.w	r8, [r3]
 800bdf8:	e565      	b.n	800b8c6 <_dtoa_r+0x9e>
 800bdfa:	465a      	mov	r2, fp
 800bdfc:	4643      	mov	r3, r8
 800bdfe:	4698      	mov	r8, r3
 800be00:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800be04:	2939      	cmp	r1, #57	; 0x39
 800be06:	d106      	bne.n	800be16 <_dtoa_r+0x5ee>
 800be08:	9901      	ldr	r1, [sp, #4]
 800be0a:	4299      	cmp	r1, r3
 800be0c:	d1f7      	bne.n	800bdfe <_dtoa_r+0x5d6>
 800be0e:	9801      	ldr	r0, [sp, #4]
 800be10:	2130      	movs	r1, #48	; 0x30
 800be12:	3201      	adds	r2, #1
 800be14:	7001      	strb	r1, [r0, #0]
 800be16:	7819      	ldrb	r1, [r3, #0]
 800be18:	3101      	adds	r1, #1
 800be1a:	7019      	strb	r1, [r3, #0]
 800be1c:	e7ae      	b.n	800bd7c <_dtoa_r+0x554>
 800be1e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2a:	d1b2      	bne.n	800bd92 <_dtoa_r+0x56a>
 800be2c:	e7d3      	b.n	800bdd6 <_dtoa_r+0x5ae>
 800be2e:	bf00      	nop
 800be30:	0800d8d8 	.word	0x0800d8d8
 800be34:	0800d8b0 	.word	0x0800d8b0
 800be38:	9907      	ldr	r1, [sp, #28]
 800be3a:	2900      	cmp	r1, #0
 800be3c:	f000 80d0 	beq.w	800bfe0 <_dtoa_r+0x7b8>
 800be40:	9906      	ldr	r1, [sp, #24]
 800be42:	2901      	cmp	r1, #1
 800be44:	f300 80b4 	bgt.w	800bfb0 <_dtoa_r+0x788>
 800be48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be4a:	2900      	cmp	r1, #0
 800be4c:	f000 80ac 	beq.w	800bfa8 <_dtoa_r+0x780>
 800be50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800be58:	461c      	mov	r4, r3
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	4413      	add	r3, r2
 800be60:	9304      	str	r3, [sp, #16]
 800be62:	9b05      	ldr	r3, [sp, #20]
 800be64:	2101      	movs	r1, #1
 800be66:	4413      	add	r3, r2
 800be68:	4630      	mov	r0, r6
 800be6a:	9305      	str	r3, [sp, #20]
 800be6c:	f000 fc3e 	bl	800c6ec <__i2b>
 800be70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be72:	4607      	mov	r7, r0
 800be74:	f1b8 0f00 	cmp.w	r8, #0
 800be78:	d00d      	beq.n	800be96 <_dtoa_r+0x66e>
 800be7a:	9a05      	ldr	r2, [sp, #20]
 800be7c:	2a00      	cmp	r2, #0
 800be7e:	dd0a      	ble.n	800be96 <_dtoa_r+0x66e>
 800be80:	4542      	cmp	r2, r8
 800be82:	9904      	ldr	r1, [sp, #16]
 800be84:	bfa8      	it	ge
 800be86:	4642      	movge	r2, r8
 800be88:	1a89      	subs	r1, r1, r2
 800be8a:	9104      	str	r1, [sp, #16]
 800be8c:	9905      	ldr	r1, [sp, #20]
 800be8e:	eba8 0802 	sub.w	r8, r8, r2
 800be92:	1a8a      	subs	r2, r1, r2
 800be94:	9205      	str	r2, [sp, #20]
 800be96:	b303      	cbz	r3, 800beda <_dtoa_r+0x6b2>
 800be98:	9a07      	ldr	r2, [sp, #28]
 800be9a:	2a00      	cmp	r2, #0
 800be9c:	f000 80a5 	beq.w	800bfea <_dtoa_r+0x7c2>
 800bea0:	2c00      	cmp	r4, #0
 800bea2:	dd13      	ble.n	800becc <_dtoa_r+0x6a4>
 800bea4:	4639      	mov	r1, r7
 800bea6:	4622      	mov	r2, r4
 800bea8:	4630      	mov	r0, r6
 800beaa:	930d      	str	r3, [sp, #52]	; 0x34
 800beac:	f000 fcde 	bl	800c86c <__pow5mult>
 800beb0:	462a      	mov	r2, r5
 800beb2:	4601      	mov	r1, r0
 800beb4:	4607      	mov	r7, r0
 800beb6:	4630      	mov	r0, r6
 800beb8:	f000 fc2e 	bl	800c718 <__multiply>
 800bebc:	4629      	mov	r1, r5
 800bebe:	9009      	str	r0, [sp, #36]	; 0x24
 800bec0:	4630      	mov	r0, r6
 800bec2:	f000 fb5d 	bl	800c580 <_Bfree>
 800bec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beca:	4615      	mov	r5, r2
 800becc:	1b1a      	subs	r2, r3, r4
 800bece:	d004      	beq.n	800beda <_dtoa_r+0x6b2>
 800bed0:	4629      	mov	r1, r5
 800bed2:	4630      	mov	r0, r6
 800bed4:	f000 fcca 	bl	800c86c <__pow5mult>
 800bed8:	4605      	mov	r5, r0
 800beda:	2101      	movs	r1, #1
 800bedc:	4630      	mov	r0, r6
 800bede:	f000 fc05 	bl	800c6ec <__i2b>
 800bee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	4604      	mov	r4, r0
 800bee8:	f340 8081 	ble.w	800bfee <_dtoa_r+0x7c6>
 800beec:	461a      	mov	r2, r3
 800beee:	4601      	mov	r1, r0
 800bef0:	4630      	mov	r0, r6
 800bef2:	f000 fcbb 	bl	800c86c <__pow5mult>
 800bef6:	9b06      	ldr	r3, [sp, #24]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	4604      	mov	r4, r0
 800befc:	dd7a      	ble.n	800bff4 <_dtoa_r+0x7cc>
 800befe:	2300      	movs	r3, #0
 800bf00:	9309      	str	r3, [sp, #36]	; 0x24
 800bf02:	6922      	ldr	r2, [r4, #16]
 800bf04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf08:	6910      	ldr	r0, [r2, #16]
 800bf0a:	f000 fba1 	bl	800c650 <__hi0bits>
 800bf0e:	f1c0 0020 	rsb	r0, r0, #32
 800bf12:	9b05      	ldr	r3, [sp, #20]
 800bf14:	4418      	add	r0, r3
 800bf16:	f010 001f 	ands.w	r0, r0, #31
 800bf1a:	f000 8093 	beq.w	800c044 <_dtoa_r+0x81c>
 800bf1e:	f1c0 0220 	rsb	r2, r0, #32
 800bf22:	2a04      	cmp	r2, #4
 800bf24:	f340 8085 	ble.w	800c032 <_dtoa_r+0x80a>
 800bf28:	9b04      	ldr	r3, [sp, #16]
 800bf2a:	f1c0 001c 	rsb	r0, r0, #28
 800bf2e:	4403      	add	r3, r0
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	9b05      	ldr	r3, [sp, #20]
 800bf34:	4480      	add	r8, r0
 800bf36:	4403      	add	r3, r0
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	9b04      	ldr	r3, [sp, #16]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd05      	ble.n	800bf4c <_dtoa_r+0x724>
 800bf40:	4629      	mov	r1, r5
 800bf42:	461a      	mov	r2, r3
 800bf44:	4630      	mov	r0, r6
 800bf46:	f000 fceb 	bl	800c920 <__lshift>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	9b05      	ldr	r3, [sp, #20]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	dd05      	ble.n	800bf5e <_dtoa_r+0x736>
 800bf52:	4621      	mov	r1, r4
 800bf54:	461a      	mov	r2, r3
 800bf56:	4630      	mov	r0, r6
 800bf58:	f000 fce2 	bl	800c920 <__lshift>
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d071      	beq.n	800c048 <_dtoa_r+0x820>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 fd46 	bl	800c9f8 <__mcmp>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	da6b      	bge.n	800c048 <_dtoa_r+0x820>
 800bf70:	2300      	movs	r3, #0
 800bf72:	4629      	mov	r1, r5
 800bf74:	220a      	movs	r2, #10
 800bf76:	4630      	mov	r0, r6
 800bf78:	f000 fb24 	bl	800c5c4 <__multadd>
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf82:	4605      	mov	r5, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 8197 	beq.w	800c2b8 <_dtoa_r+0xa90>
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	220a      	movs	r2, #10
 800bf90:	4630      	mov	r0, r6
 800bf92:	f000 fb17 	bl	800c5c4 <__multadd>
 800bf96:	f1ba 0f00 	cmp.w	sl, #0
 800bf9a:	4607      	mov	r7, r0
 800bf9c:	f300 8093 	bgt.w	800c0c6 <_dtoa_r+0x89e>
 800bfa0:	9b06      	ldr	r3, [sp, #24]
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	dc57      	bgt.n	800c056 <_dtoa_r+0x82e>
 800bfa6:	e08e      	b.n	800c0c6 <_dtoa_r+0x89e>
 800bfa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bfae:	e751      	b.n	800be54 <_dtoa_r+0x62c>
 800bfb0:	f109 34ff 	add.w	r4, r9, #4294967295
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	bfbf      	itttt	lt
 800bfb8:	1ae2      	sublt	r2, r4, r3
 800bfba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bfbc:	189b      	addlt	r3, r3, r2
 800bfbe:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bfc0:	bfae      	itee	ge
 800bfc2:	1b1c      	subge	r4, r3, r4
 800bfc4:	4623      	movlt	r3, r4
 800bfc6:	2400      	movlt	r4, #0
 800bfc8:	f1b9 0f00 	cmp.w	r9, #0
 800bfcc:	bfb5      	itete	lt
 800bfce:	9a04      	ldrlt	r2, [sp, #16]
 800bfd0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800bfd4:	eba2 0809 	sublt.w	r8, r2, r9
 800bfd8:	464a      	movge	r2, r9
 800bfda:	bfb8      	it	lt
 800bfdc:	2200      	movlt	r2, #0
 800bfde:	e73c      	b.n	800be5a <_dtoa_r+0x632>
 800bfe0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bfe4:	9f07      	ldr	r7, [sp, #28]
 800bfe6:	461c      	mov	r4, r3
 800bfe8:	e744      	b.n	800be74 <_dtoa_r+0x64c>
 800bfea:	461a      	mov	r2, r3
 800bfec:	e770      	b.n	800bed0 <_dtoa_r+0x6a8>
 800bfee:	9b06      	ldr	r3, [sp, #24]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	dc18      	bgt.n	800c026 <_dtoa_r+0x7fe>
 800bff4:	9b02      	ldr	r3, [sp, #8]
 800bff6:	b9b3      	cbnz	r3, 800c026 <_dtoa_r+0x7fe>
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bffe:	b9a2      	cbnz	r2, 800c02a <_dtoa_r+0x802>
 800c000:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c004:	0d12      	lsrs	r2, r2, #20
 800c006:	0512      	lsls	r2, r2, #20
 800c008:	b18a      	cbz	r2, 800c02e <_dtoa_r+0x806>
 800c00a:	9b04      	ldr	r3, [sp, #16]
 800c00c:	3301      	adds	r3, #1
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	9b05      	ldr	r3, [sp, #20]
 800c012:	3301      	adds	r3, #1
 800c014:	9305      	str	r3, [sp, #20]
 800c016:	2301      	movs	r3, #1
 800c018:	9309      	str	r3, [sp, #36]	; 0x24
 800c01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f af70 	bne.w	800bf02 <_dtoa_r+0x6da>
 800c022:	2001      	movs	r0, #1
 800c024:	e775      	b.n	800bf12 <_dtoa_r+0x6ea>
 800c026:	2300      	movs	r3, #0
 800c028:	e7f6      	b.n	800c018 <_dtoa_r+0x7f0>
 800c02a:	9b02      	ldr	r3, [sp, #8]
 800c02c:	e7f4      	b.n	800c018 <_dtoa_r+0x7f0>
 800c02e:	9209      	str	r2, [sp, #36]	; 0x24
 800c030:	e7f3      	b.n	800c01a <_dtoa_r+0x7f2>
 800c032:	d082      	beq.n	800bf3a <_dtoa_r+0x712>
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	321c      	adds	r2, #28
 800c038:	4413      	add	r3, r2
 800c03a:	9304      	str	r3, [sp, #16]
 800c03c:	9b05      	ldr	r3, [sp, #20]
 800c03e:	4490      	add	r8, r2
 800c040:	4413      	add	r3, r2
 800c042:	e779      	b.n	800bf38 <_dtoa_r+0x710>
 800c044:	4602      	mov	r2, r0
 800c046:	e7f5      	b.n	800c034 <_dtoa_r+0x80c>
 800c048:	f1b9 0f00 	cmp.w	r9, #0
 800c04c:	dc36      	bgt.n	800c0bc <_dtoa_r+0x894>
 800c04e:	9b06      	ldr	r3, [sp, #24]
 800c050:	2b02      	cmp	r3, #2
 800c052:	dd33      	ble.n	800c0bc <_dtoa_r+0x894>
 800c054:	46ca      	mov	sl, r9
 800c056:	f1ba 0f00 	cmp.w	sl, #0
 800c05a:	d10d      	bne.n	800c078 <_dtoa_r+0x850>
 800c05c:	4621      	mov	r1, r4
 800c05e:	4653      	mov	r3, sl
 800c060:	2205      	movs	r2, #5
 800c062:	4630      	mov	r0, r6
 800c064:	f000 faae 	bl	800c5c4 <__multadd>
 800c068:	4601      	mov	r1, r0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4628      	mov	r0, r5
 800c06e:	f000 fcc3 	bl	800c9f8 <__mcmp>
 800c072:	2800      	cmp	r0, #0
 800c074:	f73f ade4 	bgt.w	800bc40 <_dtoa_r+0x418>
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c07e:	ea6f 0b03 	mvn.w	fp, r3
 800c082:	f04f 0900 	mov.w	r9, #0
 800c086:	4621      	mov	r1, r4
 800c088:	4630      	mov	r0, r6
 800c08a:	f000 fa79 	bl	800c580 <_Bfree>
 800c08e:	2f00      	cmp	r7, #0
 800c090:	f43f aea1 	beq.w	800bdd6 <_dtoa_r+0x5ae>
 800c094:	f1b9 0f00 	cmp.w	r9, #0
 800c098:	d005      	beq.n	800c0a6 <_dtoa_r+0x87e>
 800c09a:	45b9      	cmp	r9, r7
 800c09c:	d003      	beq.n	800c0a6 <_dtoa_r+0x87e>
 800c09e:	4649      	mov	r1, r9
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 fa6d 	bl	800c580 <_Bfree>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f000 fa69 	bl	800c580 <_Bfree>
 800c0ae:	e692      	b.n	800bdd6 <_dtoa_r+0x5ae>
 800c0b0:	2400      	movs	r4, #0
 800c0b2:	4627      	mov	r7, r4
 800c0b4:	e7e0      	b.n	800c078 <_dtoa_r+0x850>
 800c0b6:	4693      	mov	fp, r2
 800c0b8:	4627      	mov	r7, r4
 800c0ba:	e5c1      	b.n	800bc40 <_dtoa_r+0x418>
 800c0bc:	9b07      	ldr	r3, [sp, #28]
 800c0be:	46ca      	mov	sl, r9
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 8100 	beq.w	800c2c6 <_dtoa_r+0xa9e>
 800c0c6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ca:	dd05      	ble.n	800c0d8 <_dtoa_r+0x8b0>
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f000 fc25 	bl	800c920 <__lshift>
 800c0d6:	4607      	mov	r7, r0
 800c0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d05d      	beq.n	800c19a <_dtoa_r+0x972>
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	f000 fa0d 	bl	800c500 <_Balloc>
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	b928      	cbnz	r0, 800c0f6 <_dtoa_r+0x8ce>
 800c0ea:	4b82      	ldr	r3, [pc, #520]	; (800c2f4 <_dtoa_r+0xacc>)
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c0f2:	f7ff bbb1 	b.w	800b858 <_dtoa_r+0x30>
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	3202      	adds	r2, #2
 800c0fa:	0092      	lsls	r2, r2, #2
 800c0fc:	f107 010c 	add.w	r1, r7, #12
 800c100:	300c      	adds	r0, #12
 800c102:	f7ff faf8 	bl	800b6f6 <memcpy>
 800c106:	2201      	movs	r2, #1
 800c108:	4641      	mov	r1, r8
 800c10a:	4630      	mov	r0, r6
 800c10c:	f000 fc08 	bl	800c920 <__lshift>
 800c110:	9b01      	ldr	r3, [sp, #4]
 800c112:	3301      	adds	r3, #1
 800c114:	9304      	str	r3, [sp, #16]
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	4453      	add	r3, sl
 800c11a:	9308      	str	r3, [sp, #32]
 800c11c:	9b02      	ldr	r3, [sp, #8]
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	46b9      	mov	r9, r7
 800c124:	9307      	str	r3, [sp, #28]
 800c126:	4607      	mov	r7, r0
 800c128:	9b04      	ldr	r3, [sp, #16]
 800c12a:	4621      	mov	r1, r4
 800c12c:	3b01      	subs	r3, #1
 800c12e:	4628      	mov	r0, r5
 800c130:	9302      	str	r3, [sp, #8]
 800c132:	f7ff faee 	bl	800b712 <quorem>
 800c136:	4603      	mov	r3, r0
 800c138:	3330      	adds	r3, #48	; 0x30
 800c13a:	9005      	str	r0, [sp, #20]
 800c13c:	4649      	mov	r1, r9
 800c13e:	4628      	mov	r0, r5
 800c140:	9309      	str	r3, [sp, #36]	; 0x24
 800c142:	f000 fc59 	bl	800c9f8 <__mcmp>
 800c146:	463a      	mov	r2, r7
 800c148:	4682      	mov	sl, r0
 800c14a:	4621      	mov	r1, r4
 800c14c:	4630      	mov	r0, r6
 800c14e:	f000 fc6f 	bl	800ca30 <__mdiff>
 800c152:	68c2      	ldr	r2, [r0, #12]
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	4680      	mov	r8, r0
 800c158:	bb0a      	cbnz	r2, 800c19e <_dtoa_r+0x976>
 800c15a:	4601      	mov	r1, r0
 800c15c:	4628      	mov	r0, r5
 800c15e:	f000 fc4b 	bl	800c9f8 <__mcmp>
 800c162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c164:	4602      	mov	r2, r0
 800c166:	4641      	mov	r1, r8
 800c168:	4630      	mov	r0, r6
 800c16a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c16e:	f000 fa07 	bl	800c580 <_Bfree>
 800c172:	9b06      	ldr	r3, [sp, #24]
 800c174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c176:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c17a:	ea43 0102 	orr.w	r1, r3, r2
 800c17e:	9b07      	ldr	r3, [sp, #28]
 800c180:	4319      	orrs	r1, r3
 800c182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c184:	d10d      	bne.n	800c1a2 <_dtoa_r+0x97a>
 800c186:	2b39      	cmp	r3, #57	; 0x39
 800c188:	d029      	beq.n	800c1de <_dtoa_r+0x9b6>
 800c18a:	f1ba 0f00 	cmp.w	sl, #0
 800c18e:	dd01      	ble.n	800c194 <_dtoa_r+0x96c>
 800c190:	9b05      	ldr	r3, [sp, #20]
 800c192:	3331      	adds	r3, #49	; 0x31
 800c194:	9a02      	ldr	r2, [sp, #8]
 800c196:	7013      	strb	r3, [r2, #0]
 800c198:	e775      	b.n	800c086 <_dtoa_r+0x85e>
 800c19a:	4638      	mov	r0, r7
 800c19c:	e7b8      	b.n	800c110 <_dtoa_r+0x8e8>
 800c19e:	2201      	movs	r2, #1
 800c1a0:	e7e1      	b.n	800c166 <_dtoa_r+0x93e>
 800c1a2:	f1ba 0f00 	cmp.w	sl, #0
 800c1a6:	db06      	blt.n	800c1b6 <_dtoa_r+0x98e>
 800c1a8:	9906      	ldr	r1, [sp, #24]
 800c1aa:	ea41 0a0a 	orr.w	sl, r1, sl
 800c1ae:	9907      	ldr	r1, [sp, #28]
 800c1b0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800c1b4:	d120      	bne.n	800c1f8 <_dtoa_r+0x9d0>
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	ddec      	ble.n	800c194 <_dtoa_r+0x96c>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	2201      	movs	r2, #1
 800c1be:	4630      	mov	r0, r6
 800c1c0:	9304      	str	r3, [sp, #16]
 800c1c2:	f000 fbad 	bl	800c920 <__lshift>
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	f000 fc15 	bl	800c9f8 <__mcmp>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	9b04      	ldr	r3, [sp, #16]
 800c1d2:	dc02      	bgt.n	800c1da <_dtoa_r+0x9b2>
 800c1d4:	d1de      	bne.n	800c194 <_dtoa_r+0x96c>
 800c1d6:	07da      	lsls	r2, r3, #31
 800c1d8:	d5dc      	bpl.n	800c194 <_dtoa_r+0x96c>
 800c1da:	2b39      	cmp	r3, #57	; 0x39
 800c1dc:	d1d8      	bne.n	800c190 <_dtoa_r+0x968>
 800c1de:	9a02      	ldr	r2, [sp, #8]
 800c1e0:	2339      	movs	r3, #57	; 0x39
 800c1e2:	7013      	strb	r3, [r2, #0]
 800c1e4:	4643      	mov	r3, r8
 800c1e6:	4698      	mov	r8, r3
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c1ee:	2a39      	cmp	r2, #57	; 0x39
 800c1f0:	d051      	beq.n	800c296 <_dtoa_r+0xa6e>
 800c1f2:	3201      	adds	r2, #1
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	e746      	b.n	800c086 <_dtoa_r+0x85e>
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	dd03      	ble.n	800c204 <_dtoa_r+0x9dc>
 800c1fc:	2b39      	cmp	r3, #57	; 0x39
 800c1fe:	d0ee      	beq.n	800c1de <_dtoa_r+0x9b6>
 800c200:	3301      	adds	r3, #1
 800c202:	e7c7      	b.n	800c194 <_dtoa_r+0x96c>
 800c204:	9a04      	ldr	r2, [sp, #16]
 800c206:	9908      	ldr	r1, [sp, #32]
 800c208:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c20c:	428a      	cmp	r2, r1
 800c20e:	d02b      	beq.n	800c268 <_dtoa_r+0xa40>
 800c210:	4629      	mov	r1, r5
 800c212:	2300      	movs	r3, #0
 800c214:	220a      	movs	r2, #10
 800c216:	4630      	mov	r0, r6
 800c218:	f000 f9d4 	bl	800c5c4 <__multadd>
 800c21c:	45b9      	cmp	r9, r7
 800c21e:	4605      	mov	r5, r0
 800c220:	f04f 0300 	mov.w	r3, #0
 800c224:	f04f 020a 	mov.w	r2, #10
 800c228:	4649      	mov	r1, r9
 800c22a:	4630      	mov	r0, r6
 800c22c:	d107      	bne.n	800c23e <_dtoa_r+0xa16>
 800c22e:	f000 f9c9 	bl	800c5c4 <__multadd>
 800c232:	4681      	mov	r9, r0
 800c234:	4607      	mov	r7, r0
 800c236:	9b04      	ldr	r3, [sp, #16]
 800c238:	3301      	adds	r3, #1
 800c23a:	9304      	str	r3, [sp, #16]
 800c23c:	e774      	b.n	800c128 <_dtoa_r+0x900>
 800c23e:	f000 f9c1 	bl	800c5c4 <__multadd>
 800c242:	4639      	mov	r1, r7
 800c244:	4681      	mov	r9, r0
 800c246:	2300      	movs	r3, #0
 800c248:	220a      	movs	r2, #10
 800c24a:	4630      	mov	r0, r6
 800c24c:	f000 f9ba 	bl	800c5c4 <__multadd>
 800c250:	4607      	mov	r7, r0
 800c252:	e7f0      	b.n	800c236 <_dtoa_r+0xa0e>
 800c254:	f1ba 0f00 	cmp.w	sl, #0
 800c258:	9a01      	ldr	r2, [sp, #4]
 800c25a:	bfcc      	ite	gt
 800c25c:	46d0      	movgt	r8, sl
 800c25e:	f04f 0801 	movle.w	r8, #1
 800c262:	4490      	add	r8, r2
 800c264:	f04f 0900 	mov.w	r9, #0
 800c268:	4629      	mov	r1, r5
 800c26a:	2201      	movs	r2, #1
 800c26c:	4630      	mov	r0, r6
 800c26e:	9302      	str	r3, [sp, #8]
 800c270:	f000 fb56 	bl	800c920 <__lshift>
 800c274:	4621      	mov	r1, r4
 800c276:	4605      	mov	r5, r0
 800c278:	f000 fbbe 	bl	800c9f8 <__mcmp>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	dcb1      	bgt.n	800c1e4 <_dtoa_r+0x9bc>
 800c280:	d102      	bne.n	800c288 <_dtoa_r+0xa60>
 800c282:	9b02      	ldr	r3, [sp, #8]
 800c284:	07db      	lsls	r3, r3, #31
 800c286:	d4ad      	bmi.n	800c1e4 <_dtoa_r+0x9bc>
 800c288:	4643      	mov	r3, r8
 800c28a:	4698      	mov	r8, r3
 800c28c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c290:	2a30      	cmp	r2, #48	; 0x30
 800c292:	d0fa      	beq.n	800c28a <_dtoa_r+0xa62>
 800c294:	e6f7      	b.n	800c086 <_dtoa_r+0x85e>
 800c296:	9a01      	ldr	r2, [sp, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d1a4      	bne.n	800c1e6 <_dtoa_r+0x9be>
 800c29c:	f10b 0b01 	add.w	fp, fp, #1
 800c2a0:	2331      	movs	r3, #49	; 0x31
 800c2a2:	e778      	b.n	800c196 <_dtoa_r+0x96e>
 800c2a4:	4b14      	ldr	r3, [pc, #80]	; (800c2f8 <_dtoa_r+0xad0>)
 800c2a6:	f7ff bb2a 	b.w	800b8fe <_dtoa_r+0xd6>
 800c2aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f47f ab05 	bne.w	800b8bc <_dtoa_r+0x94>
 800c2b2:	4b12      	ldr	r3, [pc, #72]	; (800c2fc <_dtoa_r+0xad4>)
 800c2b4:	f7ff bb23 	b.w	800b8fe <_dtoa_r+0xd6>
 800c2b8:	f1ba 0f00 	cmp.w	sl, #0
 800c2bc:	dc03      	bgt.n	800c2c6 <_dtoa_r+0xa9e>
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	f73f aec8 	bgt.w	800c056 <_dtoa_r+0x82e>
 800c2c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f7ff fa20 	bl	800b712 <quorem>
 800c2d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c2d6:	f808 3b01 	strb.w	r3, [r8], #1
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	eba8 0202 	sub.w	r2, r8, r2
 800c2e0:	4592      	cmp	sl, r2
 800c2e2:	ddb7      	ble.n	800c254 <_dtoa_r+0xa2c>
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f000 f96a 	bl	800c5c4 <__multadd>
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	e7ea      	b.n	800c2ca <_dtoa_r+0xaa2>
 800c2f4:	0800d844 	.word	0x0800d844
 800c2f8:	0800d7a4 	.word	0x0800d7a4
 800c2fc:	0800d7c8 	.word	0x0800d7c8

0800c300 <_free_r>:
 800c300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c302:	2900      	cmp	r1, #0
 800c304:	d044      	beq.n	800c390 <_free_r+0x90>
 800c306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c30a:	9001      	str	r0, [sp, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f1a1 0404 	sub.w	r4, r1, #4
 800c312:	bfb8      	it	lt
 800c314:	18e4      	addlt	r4, r4, r3
 800c316:	f000 f8e7 	bl	800c4e8 <__malloc_lock>
 800c31a:	4a1e      	ldr	r2, [pc, #120]	; (800c394 <_free_r+0x94>)
 800c31c:	9801      	ldr	r0, [sp, #4]
 800c31e:	6813      	ldr	r3, [r2, #0]
 800c320:	b933      	cbnz	r3, 800c330 <_free_r+0x30>
 800c322:	6063      	str	r3, [r4, #4]
 800c324:	6014      	str	r4, [r2, #0]
 800c326:	b003      	add	sp, #12
 800c328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c32c:	f000 b8e2 	b.w	800c4f4 <__malloc_unlock>
 800c330:	42a3      	cmp	r3, r4
 800c332:	d908      	bls.n	800c346 <_free_r+0x46>
 800c334:	6825      	ldr	r5, [r4, #0]
 800c336:	1961      	adds	r1, r4, r5
 800c338:	428b      	cmp	r3, r1
 800c33a:	bf01      	itttt	eq
 800c33c:	6819      	ldreq	r1, [r3, #0]
 800c33e:	685b      	ldreq	r3, [r3, #4]
 800c340:	1949      	addeq	r1, r1, r5
 800c342:	6021      	streq	r1, [r4, #0]
 800c344:	e7ed      	b.n	800c322 <_free_r+0x22>
 800c346:	461a      	mov	r2, r3
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	b10b      	cbz	r3, 800c350 <_free_r+0x50>
 800c34c:	42a3      	cmp	r3, r4
 800c34e:	d9fa      	bls.n	800c346 <_free_r+0x46>
 800c350:	6811      	ldr	r1, [r2, #0]
 800c352:	1855      	adds	r5, r2, r1
 800c354:	42a5      	cmp	r5, r4
 800c356:	d10b      	bne.n	800c370 <_free_r+0x70>
 800c358:	6824      	ldr	r4, [r4, #0]
 800c35a:	4421      	add	r1, r4
 800c35c:	1854      	adds	r4, r2, r1
 800c35e:	42a3      	cmp	r3, r4
 800c360:	6011      	str	r1, [r2, #0]
 800c362:	d1e0      	bne.n	800c326 <_free_r+0x26>
 800c364:	681c      	ldr	r4, [r3, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	6053      	str	r3, [r2, #4]
 800c36a:	440c      	add	r4, r1
 800c36c:	6014      	str	r4, [r2, #0]
 800c36e:	e7da      	b.n	800c326 <_free_r+0x26>
 800c370:	d902      	bls.n	800c378 <_free_r+0x78>
 800c372:	230c      	movs	r3, #12
 800c374:	6003      	str	r3, [r0, #0]
 800c376:	e7d6      	b.n	800c326 <_free_r+0x26>
 800c378:	6825      	ldr	r5, [r4, #0]
 800c37a:	1961      	adds	r1, r4, r5
 800c37c:	428b      	cmp	r3, r1
 800c37e:	bf04      	itt	eq
 800c380:	6819      	ldreq	r1, [r3, #0]
 800c382:	685b      	ldreq	r3, [r3, #4]
 800c384:	6063      	str	r3, [r4, #4]
 800c386:	bf04      	itt	eq
 800c388:	1949      	addeq	r1, r1, r5
 800c38a:	6021      	streq	r1, [r4, #0]
 800c38c:	6054      	str	r4, [r2, #4]
 800c38e:	e7ca      	b.n	800c326 <_free_r+0x26>
 800c390:	b003      	add	sp, #12
 800c392:	bd30      	pop	{r4, r5, pc}
 800c394:	24000610 	.word	0x24000610

0800c398 <malloc>:
 800c398:	4b02      	ldr	r3, [pc, #8]	; (800c3a4 <malloc+0xc>)
 800c39a:	4601      	mov	r1, r0
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	f000 b823 	b.w	800c3e8 <_malloc_r>
 800c3a2:	bf00      	nop
 800c3a4:	24000068 	.word	0x24000068

0800c3a8 <sbrk_aligned>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	4e0e      	ldr	r6, [pc, #56]	; (800c3e4 <sbrk_aligned+0x3c>)
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	6831      	ldr	r1, [r6, #0]
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	b911      	cbnz	r1, 800c3ba <sbrk_aligned+0x12>
 800c3b4:	f000 fe40 	bl	800d038 <_sbrk_r>
 800c3b8:	6030      	str	r0, [r6, #0]
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f000 fe3b 	bl	800d038 <_sbrk_r>
 800c3c2:	1c43      	adds	r3, r0, #1
 800c3c4:	d00a      	beq.n	800c3dc <sbrk_aligned+0x34>
 800c3c6:	1cc4      	adds	r4, r0, #3
 800c3c8:	f024 0403 	bic.w	r4, r4, #3
 800c3cc:	42a0      	cmp	r0, r4
 800c3ce:	d007      	beq.n	800c3e0 <sbrk_aligned+0x38>
 800c3d0:	1a21      	subs	r1, r4, r0
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f000 fe30 	bl	800d038 <_sbrk_r>
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d101      	bne.n	800c3e0 <sbrk_aligned+0x38>
 800c3dc:	f04f 34ff 	mov.w	r4, #4294967295
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	24000614 	.word	0x24000614

0800c3e8 <_malloc_r>:
 800c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	1ccd      	adds	r5, r1, #3
 800c3ee:	f025 0503 	bic.w	r5, r5, #3
 800c3f2:	3508      	adds	r5, #8
 800c3f4:	2d0c      	cmp	r5, #12
 800c3f6:	bf38      	it	cc
 800c3f8:	250c      	movcc	r5, #12
 800c3fa:	2d00      	cmp	r5, #0
 800c3fc:	4607      	mov	r7, r0
 800c3fe:	db01      	blt.n	800c404 <_malloc_r+0x1c>
 800c400:	42a9      	cmp	r1, r5
 800c402:	d905      	bls.n	800c410 <_malloc_r+0x28>
 800c404:	230c      	movs	r3, #12
 800c406:	603b      	str	r3, [r7, #0]
 800c408:	2600      	movs	r6, #0
 800c40a:	4630      	mov	r0, r6
 800c40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c410:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4e4 <_malloc_r+0xfc>
 800c414:	f000 f868 	bl	800c4e8 <__malloc_lock>
 800c418:	f8d8 3000 	ldr.w	r3, [r8]
 800c41c:	461c      	mov	r4, r3
 800c41e:	bb5c      	cbnz	r4, 800c478 <_malloc_r+0x90>
 800c420:	4629      	mov	r1, r5
 800c422:	4638      	mov	r0, r7
 800c424:	f7ff ffc0 	bl	800c3a8 <sbrk_aligned>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	4604      	mov	r4, r0
 800c42c:	d155      	bne.n	800c4da <_malloc_r+0xf2>
 800c42e:	f8d8 4000 	ldr.w	r4, [r8]
 800c432:	4626      	mov	r6, r4
 800c434:	2e00      	cmp	r6, #0
 800c436:	d145      	bne.n	800c4c4 <_malloc_r+0xdc>
 800c438:	2c00      	cmp	r4, #0
 800c43a:	d048      	beq.n	800c4ce <_malloc_r+0xe6>
 800c43c:	6823      	ldr	r3, [r4, #0]
 800c43e:	4631      	mov	r1, r6
 800c440:	4638      	mov	r0, r7
 800c442:	eb04 0903 	add.w	r9, r4, r3
 800c446:	f000 fdf7 	bl	800d038 <_sbrk_r>
 800c44a:	4581      	cmp	r9, r0
 800c44c:	d13f      	bne.n	800c4ce <_malloc_r+0xe6>
 800c44e:	6821      	ldr	r1, [r4, #0]
 800c450:	1a6d      	subs	r5, r5, r1
 800c452:	4629      	mov	r1, r5
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff ffa7 	bl	800c3a8 <sbrk_aligned>
 800c45a:	3001      	adds	r0, #1
 800c45c:	d037      	beq.n	800c4ce <_malloc_r+0xe6>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	442b      	add	r3, r5
 800c462:	6023      	str	r3, [r4, #0]
 800c464:	f8d8 3000 	ldr.w	r3, [r8]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d038      	beq.n	800c4de <_malloc_r+0xf6>
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	42a2      	cmp	r2, r4
 800c470:	d12b      	bne.n	800c4ca <_malloc_r+0xe2>
 800c472:	2200      	movs	r2, #0
 800c474:	605a      	str	r2, [r3, #4]
 800c476:	e00f      	b.n	800c498 <_malloc_r+0xb0>
 800c478:	6822      	ldr	r2, [r4, #0]
 800c47a:	1b52      	subs	r2, r2, r5
 800c47c:	d41f      	bmi.n	800c4be <_malloc_r+0xd6>
 800c47e:	2a0b      	cmp	r2, #11
 800c480:	d917      	bls.n	800c4b2 <_malloc_r+0xca>
 800c482:	1961      	adds	r1, r4, r5
 800c484:	42a3      	cmp	r3, r4
 800c486:	6025      	str	r5, [r4, #0]
 800c488:	bf18      	it	ne
 800c48a:	6059      	strne	r1, [r3, #4]
 800c48c:	6863      	ldr	r3, [r4, #4]
 800c48e:	bf08      	it	eq
 800c490:	f8c8 1000 	streq.w	r1, [r8]
 800c494:	5162      	str	r2, [r4, r5]
 800c496:	604b      	str	r3, [r1, #4]
 800c498:	4638      	mov	r0, r7
 800c49a:	f104 060b 	add.w	r6, r4, #11
 800c49e:	f000 f829 	bl	800c4f4 <__malloc_unlock>
 800c4a2:	f026 0607 	bic.w	r6, r6, #7
 800c4a6:	1d23      	adds	r3, r4, #4
 800c4a8:	1af2      	subs	r2, r6, r3
 800c4aa:	d0ae      	beq.n	800c40a <_malloc_r+0x22>
 800c4ac:	1b9b      	subs	r3, r3, r6
 800c4ae:	50a3      	str	r3, [r4, r2]
 800c4b0:	e7ab      	b.n	800c40a <_malloc_r+0x22>
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	6862      	ldr	r2, [r4, #4]
 800c4b6:	d1dd      	bne.n	800c474 <_malloc_r+0x8c>
 800c4b8:	f8c8 2000 	str.w	r2, [r8]
 800c4bc:	e7ec      	b.n	800c498 <_malloc_r+0xb0>
 800c4be:	4623      	mov	r3, r4
 800c4c0:	6864      	ldr	r4, [r4, #4]
 800c4c2:	e7ac      	b.n	800c41e <_malloc_r+0x36>
 800c4c4:	4634      	mov	r4, r6
 800c4c6:	6876      	ldr	r6, [r6, #4]
 800c4c8:	e7b4      	b.n	800c434 <_malloc_r+0x4c>
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	e7cc      	b.n	800c468 <_malloc_r+0x80>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	603b      	str	r3, [r7, #0]
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	f000 f80e 	bl	800c4f4 <__malloc_unlock>
 800c4d8:	e797      	b.n	800c40a <_malloc_r+0x22>
 800c4da:	6025      	str	r5, [r4, #0]
 800c4dc:	e7dc      	b.n	800c498 <_malloc_r+0xb0>
 800c4de:	605b      	str	r3, [r3, #4]
 800c4e0:	deff      	udf	#255	; 0xff
 800c4e2:	bf00      	nop
 800c4e4:	24000610 	.word	0x24000610

0800c4e8 <__malloc_lock>:
 800c4e8:	4801      	ldr	r0, [pc, #4]	; (800c4f0 <__malloc_lock+0x8>)
 800c4ea:	f7ff b902 	b.w	800b6f2 <__retarget_lock_acquire_recursive>
 800c4ee:	bf00      	nop
 800c4f0:	2400060c 	.word	0x2400060c

0800c4f4 <__malloc_unlock>:
 800c4f4:	4801      	ldr	r0, [pc, #4]	; (800c4fc <__malloc_unlock+0x8>)
 800c4f6:	f7ff b8fd 	b.w	800b6f4 <__retarget_lock_release_recursive>
 800c4fa:	bf00      	nop
 800c4fc:	2400060c 	.word	0x2400060c

0800c500 <_Balloc>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	69c6      	ldr	r6, [r0, #28]
 800c504:	4604      	mov	r4, r0
 800c506:	460d      	mov	r5, r1
 800c508:	b976      	cbnz	r6, 800c528 <_Balloc+0x28>
 800c50a:	2010      	movs	r0, #16
 800c50c:	f7ff ff44 	bl	800c398 <malloc>
 800c510:	4602      	mov	r2, r0
 800c512:	61e0      	str	r0, [r4, #28]
 800c514:	b920      	cbnz	r0, 800c520 <_Balloc+0x20>
 800c516:	4b18      	ldr	r3, [pc, #96]	; (800c578 <_Balloc+0x78>)
 800c518:	4818      	ldr	r0, [pc, #96]	; (800c57c <_Balloc+0x7c>)
 800c51a:	216b      	movs	r1, #107	; 0x6b
 800c51c:	f000 fd9c 	bl	800d058 <__assert_func>
 800c520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c524:	6006      	str	r6, [r0, #0]
 800c526:	60c6      	str	r6, [r0, #12]
 800c528:	69e6      	ldr	r6, [r4, #28]
 800c52a:	68f3      	ldr	r3, [r6, #12]
 800c52c:	b183      	cbz	r3, 800c550 <_Balloc+0x50>
 800c52e:	69e3      	ldr	r3, [r4, #28]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c536:	b9b8      	cbnz	r0, 800c568 <_Balloc+0x68>
 800c538:	2101      	movs	r1, #1
 800c53a:	fa01 f605 	lsl.w	r6, r1, r5
 800c53e:	1d72      	adds	r2, r6, #5
 800c540:	0092      	lsls	r2, r2, #2
 800c542:	4620      	mov	r0, r4
 800c544:	f000 fda6 	bl	800d094 <_calloc_r>
 800c548:	b160      	cbz	r0, 800c564 <_Balloc+0x64>
 800c54a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c54e:	e00e      	b.n	800c56e <_Balloc+0x6e>
 800c550:	2221      	movs	r2, #33	; 0x21
 800c552:	2104      	movs	r1, #4
 800c554:	4620      	mov	r0, r4
 800c556:	f000 fd9d 	bl	800d094 <_calloc_r>
 800c55a:	69e3      	ldr	r3, [r4, #28]
 800c55c:	60f0      	str	r0, [r6, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e4      	bne.n	800c52e <_Balloc+0x2e>
 800c564:	2000      	movs	r0, #0
 800c566:	bd70      	pop	{r4, r5, r6, pc}
 800c568:	6802      	ldr	r2, [r0, #0]
 800c56a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c56e:	2300      	movs	r3, #0
 800c570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c574:	e7f7      	b.n	800c566 <_Balloc+0x66>
 800c576:	bf00      	nop
 800c578:	0800d7d5 	.word	0x0800d7d5
 800c57c:	0800d855 	.word	0x0800d855

0800c580 <_Bfree>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	69c6      	ldr	r6, [r0, #28]
 800c584:	4605      	mov	r5, r0
 800c586:	460c      	mov	r4, r1
 800c588:	b976      	cbnz	r6, 800c5a8 <_Bfree+0x28>
 800c58a:	2010      	movs	r0, #16
 800c58c:	f7ff ff04 	bl	800c398 <malloc>
 800c590:	4602      	mov	r2, r0
 800c592:	61e8      	str	r0, [r5, #28]
 800c594:	b920      	cbnz	r0, 800c5a0 <_Bfree+0x20>
 800c596:	4b09      	ldr	r3, [pc, #36]	; (800c5bc <_Bfree+0x3c>)
 800c598:	4809      	ldr	r0, [pc, #36]	; (800c5c0 <_Bfree+0x40>)
 800c59a:	218f      	movs	r1, #143	; 0x8f
 800c59c:	f000 fd5c 	bl	800d058 <__assert_func>
 800c5a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5a4:	6006      	str	r6, [r0, #0]
 800c5a6:	60c6      	str	r6, [r0, #12]
 800c5a8:	b13c      	cbz	r4, 800c5ba <_Bfree+0x3a>
 800c5aa:	69eb      	ldr	r3, [r5, #28]
 800c5ac:	6862      	ldr	r2, [r4, #4]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5b4:	6021      	str	r1, [r4, #0]
 800c5b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	0800d7d5 	.word	0x0800d7d5
 800c5c0:	0800d855 	.word	0x0800d855

0800c5c4 <__multadd>:
 800c5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	690d      	ldr	r5, [r1, #16]
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	461e      	mov	r6, r3
 800c5d0:	f101 0c14 	add.w	ip, r1, #20
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c5da:	b299      	uxth	r1, r3
 800c5dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c5e0:	0c1e      	lsrs	r6, r3, #16
 800c5e2:	0c0b      	lsrs	r3, r1, #16
 800c5e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c5e8:	b289      	uxth	r1, r1
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5f0:	4285      	cmp	r5, r0
 800c5f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5fa:	dcec      	bgt.n	800c5d6 <__multadd+0x12>
 800c5fc:	b30e      	cbz	r6, 800c642 <__multadd+0x7e>
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	42ab      	cmp	r3, r5
 800c602:	dc19      	bgt.n	800c638 <__multadd+0x74>
 800c604:	6861      	ldr	r1, [r4, #4]
 800c606:	4638      	mov	r0, r7
 800c608:	3101      	adds	r1, #1
 800c60a:	f7ff ff79 	bl	800c500 <_Balloc>
 800c60e:	4680      	mov	r8, r0
 800c610:	b928      	cbnz	r0, 800c61e <__multadd+0x5a>
 800c612:	4602      	mov	r2, r0
 800c614:	4b0c      	ldr	r3, [pc, #48]	; (800c648 <__multadd+0x84>)
 800c616:	480d      	ldr	r0, [pc, #52]	; (800c64c <__multadd+0x88>)
 800c618:	21ba      	movs	r1, #186	; 0xba
 800c61a:	f000 fd1d 	bl	800d058 <__assert_func>
 800c61e:	6922      	ldr	r2, [r4, #16]
 800c620:	3202      	adds	r2, #2
 800c622:	f104 010c 	add.w	r1, r4, #12
 800c626:	0092      	lsls	r2, r2, #2
 800c628:	300c      	adds	r0, #12
 800c62a:	f7ff f864 	bl	800b6f6 <memcpy>
 800c62e:	4621      	mov	r1, r4
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ffa5 	bl	800c580 <_Bfree>
 800c636:	4644      	mov	r4, r8
 800c638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c63c:	3501      	adds	r5, #1
 800c63e:	615e      	str	r6, [r3, #20]
 800c640:	6125      	str	r5, [r4, #16]
 800c642:	4620      	mov	r0, r4
 800c644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c648:	0800d844 	.word	0x0800d844
 800c64c:	0800d855 	.word	0x0800d855

0800c650 <__hi0bits>:
 800c650:	0c03      	lsrs	r3, r0, #16
 800c652:	041b      	lsls	r3, r3, #16
 800c654:	b9d3      	cbnz	r3, 800c68c <__hi0bits+0x3c>
 800c656:	0400      	lsls	r0, r0, #16
 800c658:	2310      	movs	r3, #16
 800c65a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c65e:	bf04      	itt	eq
 800c660:	0200      	lsleq	r0, r0, #8
 800c662:	3308      	addeq	r3, #8
 800c664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c668:	bf04      	itt	eq
 800c66a:	0100      	lsleq	r0, r0, #4
 800c66c:	3304      	addeq	r3, #4
 800c66e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c672:	bf04      	itt	eq
 800c674:	0080      	lsleq	r0, r0, #2
 800c676:	3302      	addeq	r3, #2
 800c678:	2800      	cmp	r0, #0
 800c67a:	db05      	blt.n	800c688 <__hi0bits+0x38>
 800c67c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c680:	f103 0301 	add.w	r3, r3, #1
 800c684:	bf08      	it	eq
 800c686:	2320      	moveq	r3, #32
 800c688:	4618      	mov	r0, r3
 800c68a:	4770      	bx	lr
 800c68c:	2300      	movs	r3, #0
 800c68e:	e7e4      	b.n	800c65a <__hi0bits+0xa>

0800c690 <__lo0bits>:
 800c690:	6803      	ldr	r3, [r0, #0]
 800c692:	f013 0207 	ands.w	r2, r3, #7
 800c696:	d00c      	beq.n	800c6b2 <__lo0bits+0x22>
 800c698:	07d9      	lsls	r1, r3, #31
 800c69a:	d422      	bmi.n	800c6e2 <__lo0bits+0x52>
 800c69c:	079a      	lsls	r2, r3, #30
 800c69e:	bf49      	itett	mi
 800c6a0:	085b      	lsrmi	r3, r3, #1
 800c6a2:	089b      	lsrpl	r3, r3, #2
 800c6a4:	6003      	strmi	r3, [r0, #0]
 800c6a6:	2201      	movmi	r2, #1
 800c6a8:	bf5c      	itt	pl
 800c6aa:	6003      	strpl	r3, [r0, #0]
 800c6ac:	2202      	movpl	r2, #2
 800c6ae:	4610      	mov	r0, r2
 800c6b0:	4770      	bx	lr
 800c6b2:	b299      	uxth	r1, r3
 800c6b4:	b909      	cbnz	r1, 800c6ba <__lo0bits+0x2a>
 800c6b6:	0c1b      	lsrs	r3, r3, #16
 800c6b8:	2210      	movs	r2, #16
 800c6ba:	b2d9      	uxtb	r1, r3
 800c6bc:	b909      	cbnz	r1, 800c6c2 <__lo0bits+0x32>
 800c6be:	3208      	adds	r2, #8
 800c6c0:	0a1b      	lsrs	r3, r3, #8
 800c6c2:	0719      	lsls	r1, r3, #28
 800c6c4:	bf04      	itt	eq
 800c6c6:	091b      	lsreq	r3, r3, #4
 800c6c8:	3204      	addeq	r2, #4
 800c6ca:	0799      	lsls	r1, r3, #30
 800c6cc:	bf04      	itt	eq
 800c6ce:	089b      	lsreq	r3, r3, #2
 800c6d0:	3202      	addeq	r2, #2
 800c6d2:	07d9      	lsls	r1, r3, #31
 800c6d4:	d403      	bmi.n	800c6de <__lo0bits+0x4e>
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	f102 0201 	add.w	r2, r2, #1
 800c6dc:	d003      	beq.n	800c6e6 <__lo0bits+0x56>
 800c6de:	6003      	str	r3, [r0, #0]
 800c6e0:	e7e5      	b.n	800c6ae <__lo0bits+0x1e>
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	e7e3      	b.n	800c6ae <__lo0bits+0x1e>
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	e7e1      	b.n	800c6ae <__lo0bits+0x1e>
	...

0800c6ec <__i2b>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	f7ff ff05 	bl	800c500 <_Balloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	b928      	cbnz	r0, 800c706 <__i2b+0x1a>
 800c6fa:	4b05      	ldr	r3, [pc, #20]	; (800c710 <__i2b+0x24>)
 800c6fc:	4805      	ldr	r0, [pc, #20]	; (800c714 <__i2b+0x28>)
 800c6fe:	f240 1145 	movw	r1, #325	; 0x145
 800c702:	f000 fca9 	bl	800d058 <__assert_func>
 800c706:	2301      	movs	r3, #1
 800c708:	6144      	str	r4, [r0, #20]
 800c70a:	6103      	str	r3, [r0, #16]
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	bf00      	nop
 800c710:	0800d844 	.word	0x0800d844
 800c714:	0800d855 	.word	0x0800d855

0800c718 <__multiply>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	4691      	mov	r9, r2
 800c71e:	690a      	ldr	r2, [r1, #16]
 800c720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c724:	429a      	cmp	r2, r3
 800c726:	bfb8      	it	lt
 800c728:	460b      	movlt	r3, r1
 800c72a:	460c      	mov	r4, r1
 800c72c:	bfbc      	itt	lt
 800c72e:	464c      	movlt	r4, r9
 800c730:	4699      	movlt	r9, r3
 800c732:	6927      	ldr	r7, [r4, #16]
 800c734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c738:	68a3      	ldr	r3, [r4, #8]
 800c73a:	6861      	ldr	r1, [r4, #4]
 800c73c:	eb07 060a 	add.w	r6, r7, sl
 800c740:	42b3      	cmp	r3, r6
 800c742:	b085      	sub	sp, #20
 800c744:	bfb8      	it	lt
 800c746:	3101      	addlt	r1, #1
 800c748:	f7ff feda 	bl	800c500 <_Balloc>
 800c74c:	b930      	cbnz	r0, 800c75c <__multiply+0x44>
 800c74e:	4602      	mov	r2, r0
 800c750:	4b44      	ldr	r3, [pc, #272]	; (800c864 <__multiply+0x14c>)
 800c752:	4845      	ldr	r0, [pc, #276]	; (800c868 <__multiply+0x150>)
 800c754:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c758:	f000 fc7e 	bl	800d058 <__assert_func>
 800c75c:	f100 0514 	add.w	r5, r0, #20
 800c760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c764:	462b      	mov	r3, r5
 800c766:	2200      	movs	r2, #0
 800c768:	4543      	cmp	r3, r8
 800c76a:	d321      	bcc.n	800c7b0 <__multiply+0x98>
 800c76c:	f104 0314 	add.w	r3, r4, #20
 800c770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c774:	f109 0314 	add.w	r3, r9, #20
 800c778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c77c:	9202      	str	r2, [sp, #8]
 800c77e:	1b3a      	subs	r2, r7, r4
 800c780:	3a15      	subs	r2, #21
 800c782:	f022 0203 	bic.w	r2, r2, #3
 800c786:	3204      	adds	r2, #4
 800c788:	f104 0115 	add.w	r1, r4, #21
 800c78c:	428f      	cmp	r7, r1
 800c78e:	bf38      	it	cc
 800c790:	2204      	movcc	r2, #4
 800c792:	9201      	str	r2, [sp, #4]
 800c794:	9a02      	ldr	r2, [sp, #8]
 800c796:	9303      	str	r3, [sp, #12]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d80c      	bhi.n	800c7b6 <__multiply+0x9e>
 800c79c:	2e00      	cmp	r6, #0
 800c79e:	dd03      	ble.n	800c7a8 <__multiply+0x90>
 800c7a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d05b      	beq.n	800c860 <__multiply+0x148>
 800c7a8:	6106      	str	r6, [r0, #16]
 800c7aa:	b005      	add	sp, #20
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	f843 2b04 	str.w	r2, [r3], #4
 800c7b4:	e7d8      	b.n	800c768 <__multiply+0x50>
 800c7b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7ba:	f1ba 0f00 	cmp.w	sl, #0
 800c7be:	d024      	beq.n	800c80a <__multiply+0xf2>
 800c7c0:	f104 0e14 	add.w	lr, r4, #20
 800c7c4:	46a9      	mov	r9, r5
 800c7c6:	f04f 0c00 	mov.w	ip, #0
 800c7ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7ce:	f8d9 1000 	ldr.w	r1, [r9]
 800c7d2:	fa1f fb82 	uxth.w	fp, r2
 800c7d6:	b289      	uxth	r1, r1
 800c7d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7e4:	4461      	add	r1, ip
 800c7e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c7ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800c7ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c7f2:	b289      	uxth	r1, r1
 800c7f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c7f8:	4577      	cmp	r7, lr
 800c7fa:	f849 1b04 	str.w	r1, [r9], #4
 800c7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c802:	d8e2      	bhi.n	800c7ca <__multiply+0xb2>
 800c804:	9a01      	ldr	r2, [sp, #4]
 800c806:	f845 c002 	str.w	ip, [r5, r2]
 800c80a:	9a03      	ldr	r2, [sp, #12]
 800c80c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c810:	3304      	adds	r3, #4
 800c812:	f1b9 0f00 	cmp.w	r9, #0
 800c816:	d021      	beq.n	800c85c <__multiply+0x144>
 800c818:	6829      	ldr	r1, [r5, #0]
 800c81a:	f104 0c14 	add.w	ip, r4, #20
 800c81e:	46ae      	mov	lr, r5
 800c820:	f04f 0a00 	mov.w	sl, #0
 800c824:	f8bc b000 	ldrh.w	fp, [ip]
 800c828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c82c:	fb09 220b 	mla	r2, r9, fp, r2
 800c830:	4452      	add	r2, sl
 800c832:	b289      	uxth	r1, r1
 800c834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c838:	f84e 1b04 	str.w	r1, [lr], #4
 800c83c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c844:	f8be 1000 	ldrh.w	r1, [lr]
 800c848:	fb09 110a 	mla	r1, r9, sl, r1
 800c84c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c850:	4567      	cmp	r7, ip
 800c852:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c856:	d8e5      	bhi.n	800c824 <__multiply+0x10c>
 800c858:	9a01      	ldr	r2, [sp, #4]
 800c85a:	50a9      	str	r1, [r5, r2]
 800c85c:	3504      	adds	r5, #4
 800c85e:	e799      	b.n	800c794 <__multiply+0x7c>
 800c860:	3e01      	subs	r6, #1
 800c862:	e79b      	b.n	800c79c <__multiply+0x84>
 800c864:	0800d844 	.word	0x0800d844
 800c868:	0800d855 	.word	0x0800d855

0800c86c <__pow5mult>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4615      	mov	r5, r2
 800c872:	f012 0203 	ands.w	r2, r2, #3
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	d007      	beq.n	800c88c <__pow5mult+0x20>
 800c87c:	4c25      	ldr	r4, [pc, #148]	; (800c914 <__pow5mult+0xa8>)
 800c87e:	3a01      	subs	r2, #1
 800c880:	2300      	movs	r3, #0
 800c882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c886:	f7ff fe9d 	bl	800c5c4 <__multadd>
 800c88a:	4607      	mov	r7, r0
 800c88c:	10ad      	asrs	r5, r5, #2
 800c88e:	d03d      	beq.n	800c90c <__pow5mult+0xa0>
 800c890:	69f4      	ldr	r4, [r6, #28]
 800c892:	b97c      	cbnz	r4, 800c8b4 <__pow5mult+0x48>
 800c894:	2010      	movs	r0, #16
 800c896:	f7ff fd7f 	bl	800c398 <malloc>
 800c89a:	4602      	mov	r2, r0
 800c89c:	61f0      	str	r0, [r6, #28]
 800c89e:	b928      	cbnz	r0, 800c8ac <__pow5mult+0x40>
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <__pow5mult+0xac>)
 800c8a2:	481e      	ldr	r0, [pc, #120]	; (800c91c <__pow5mult+0xb0>)
 800c8a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8a8:	f000 fbd6 	bl	800d058 <__assert_func>
 800c8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b0:	6004      	str	r4, [r0, #0]
 800c8b2:	60c4      	str	r4, [r0, #12]
 800c8b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8bc:	b94c      	cbnz	r4, 800c8d2 <__pow5mult+0x66>
 800c8be:	f240 2171 	movw	r1, #625	; 0x271
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff12 	bl	800c6ec <__i2b>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	f04f 0900 	mov.w	r9, #0
 800c8d6:	07eb      	lsls	r3, r5, #31
 800c8d8:	d50a      	bpl.n	800c8f0 <__pow5mult+0x84>
 800c8da:	4639      	mov	r1, r7
 800c8dc:	4622      	mov	r2, r4
 800c8de:	4630      	mov	r0, r6
 800c8e0:	f7ff ff1a 	bl	800c718 <__multiply>
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fe49 	bl	800c580 <_Bfree>
 800c8ee:	4647      	mov	r7, r8
 800c8f0:	106d      	asrs	r5, r5, #1
 800c8f2:	d00b      	beq.n	800c90c <__pow5mult+0xa0>
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	b938      	cbnz	r0, 800c908 <__pow5mult+0x9c>
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7ff ff0b 	bl	800c718 <__multiply>
 800c902:	6020      	str	r0, [r4, #0]
 800c904:	f8c0 9000 	str.w	r9, [r0]
 800c908:	4604      	mov	r4, r0
 800c90a:	e7e4      	b.n	800c8d6 <__pow5mult+0x6a>
 800c90c:	4638      	mov	r0, r7
 800c90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c912:	bf00      	nop
 800c914:	0800d9a0 	.word	0x0800d9a0
 800c918:	0800d7d5 	.word	0x0800d7d5
 800c91c:	0800d855 	.word	0x0800d855

0800c920 <__lshift>:
 800c920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c924:	460c      	mov	r4, r1
 800c926:	6849      	ldr	r1, [r1, #4]
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	4607      	mov	r7, r0
 800c932:	4691      	mov	r9, r2
 800c934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c938:	f108 0601 	add.w	r6, r8, #1
 800c93c:	42b3      	cmp	r3, r6
 800c93e:	db0b      	blt.n	800c958 <__lshift+0x38>
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff fddd 	bl	800c500 <_Balloc>
 800c946:	4605      	mov	r5, r0
 800c948:	b948      	cbnz	r0, 800c95e <__lshift+0x3e>
 800c94a:	4602      	mov	r2, r0
 800c94c:	4b28      	ldr	r3, [pc, #160]	; (800c9f0 <__lshift+0xd0>)
 800c94e:	4829      	ldr	r0, [pc, #164]	; (800c9f4 <__lshift+0xd4>)
 800c950:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c954:	f000 fb80 	bl	800d058 <__assert_func>
 800c958:	3101      	adds	r1, #1
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	e7ee      	b.n	800c93c <__lshift+0x1c>
 800c95e:	2300      	movs	r3, #0
 800c960:	f100 0114 	add.w	r1, r0, #20
 800c964:	f100 0210 	add.w	r2, r0, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	4553      	cmp	r3, sl
 800c96c:	db33      	blt.n	800c9d6 <__lshift+0xb6>
 800c96e:	6920      	ldr	r0, [r4, #16]
 800c970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c974:	f104 0314 	add.w	r3, r4, #20
 800c978:	f019 091f 	ands.w	r9, r9, #31
 800c97c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c984:	d02b      	beq.n	800c9de <__lshift+0xbe>
 800c986:	f1c9 0e20 	rsb	lr, r9, #32
 800c98a:	468a      	mov	sl, r1
 800c98c:	2200      	movs	r2, #0
 800c98e:	6818      	ldr	r0, [r3, #0]
 800c990:	fa00 f009 	lsl.w	r0, r0, r9
 800c994:	4310      	orrs	r0, r2
 800c996:	f84a 0b04 	str.w	r0, [sl], #4
 800c99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c99e:	459c      	cmp	ip, r3
 800c9a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9a4:	d8f3      	bhi.n	800c98e <__lshift+0x6e>
 800c9a6:	ebac 0304 	sub.w	r3, ip, r4
 800c9aa:	3b15      	subs	r3, #21
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	f104 0015 	add.w	r0, r4, #21
 800c9b6:	4584      	cmp	ip, r0
 800c9b8:	bf38      	it	cc
 800c9ba:	2304      	movcc	r3, #4
 800c9bc:	50ca      	str	r2, [r1, r3]
 800c9be:	b10a      	cbz	r2, 800c9c4 <__lshift+0xa4>
 800c9c0:	f108 0602 	add.w	r6, r8, #2
 800c9c4:	3e01      	subs	r6, #1
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	612e      	str	r6, [r5, #16]
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	f7ff fdd8 	bl	800c580 <_Bfree>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9da:	3301      	adds	r3, #1
 800c9dc:	e7c5      	b.n	800c96a <__lshift+0x4a>
 800c9de:	3904      	subs	r1, #4
 800c9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9e8:	459c      	cmp	ip, r3
 800c9ea:	d8f9      	bhi.n	800c9e0 <__lshift+0xc0>
 800c9ec:	e7ea      	b.n	800c9c4 <__lshift+0xa4>
 800c9ee:	bf00      	nop
 800c9f0:	0800d844 	.word	0x0800d844
 800c9f4:	0800d855 	.word	0x0800d855

0800c9f8 <__mcmp>:
 800c9f8:	b530      	push	{r4, r5, lr}
 800c9fa:	6902      	ldr	r2, [r0, #16]
 800c9fc:	690c      	ldr	r4, [r1, #16]
 800c9fe:	1b12      	subs	r2, r2, r4
 800ca00:	d10e      	bne.n	800ca20 <__mcmp+0x28>
 800ca02:	f100 0314 	add.w	r3, r0, #20
 800ca06:	3114      	adds	r1, #20
 800ca08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca18:	42a5      	cmp	r5, r4
 800ca1a:	d003      	beq.n	800ca24 <__mcmp+0x2c>
 800ca1c:	d305      	bcc.n	800ca2a <__mcmp+0x32>
 800ca1e:	2201      	movs	r2, #1
 800ca20:	4610      	mov	r0, r2
 800ca22:	bd30      	pop	{r4, r5, pc}
 800ca24:	4283      	cmp	r3, r0
 800ca26:	d3f3      	bcc.n	800ca10 <__mcmp+0x18>
 800ca28:	e7fa      	b.n	800ca20 <__mcmp+0x28>
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	e7f7      	b.n	800ca20 <__mcmp+0x28>

0800ca30 <__mdiff>:
 800ca30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	460c      	mov	r4, r1
 800ca36:	4606      	mov	r6, r0
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	4690      	mov	r8, r2
 800ca3e:	f7ff ffdb 	bl	800c9f8 <__mcmp>
 800ca42:	1e05      	subs	r5, r0, #0
 800ca44:	d110      	bne.n	800ca68 <__mdiff+0x38>
 800ca46:	4629      	mov	r1, r5
 800ca48:	4630      	mov	r0, r6
 800ca4a:	f7ff fd59 	bl	800c500 <_Balloc>
 800ca4e:	b930      	cbnz	r0, 800ca5e <__mdiff+0x2e>
 800ca50:	4b3a      	ldr	r3, [pc, #232]	; (800cb3c <__mdiff+0x10c>)
 800ca52:	4602      	mov	r2, r0
 800ca54:	f240 2137 	movw	r1, #567	; 0x237
 800ca58:	4839      	ldr	r0, [pc, #228]	; (800cb40 <__mdiff+0x110>)
 800ca5a:	f000 fafd 	bl	800d058 <__assert_func>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca68:	bfa4      	itt	ge
 800ca6a:	4643      	movge	r3, r8
 800ca6c:	46a0      	movge	r8, r4
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca74:	bfa6      	itte	ge
 800ca76:	461c      	movge	r4, r3
 800ca78:	2500      	movge	r5, #0
 800ca7a:	2501      	movlt	r5, #1
 800ca7c:	f7ff fd40 	bl	800c500 <_Balloc>
 800ca80:	b920      	cbnz	r0, 800ca8c <__mdiff+0x5c>
 800ca82:	4b2e      	ldr	r3, [pc, #184]	; (800cb3c <__mdiff+0x10c>)
 800ca84:	4602      	mov	r2, r0
 800ca86:	f240 2145 	movw	r1, #581	; 0x245
 800ca8a:	e7e5      	b.n	800ca58 <__mdiff+0x28>
 800ca8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca90:	6926      	ldr	r6, [r4, #16]
 800ca92:	60c5      	str	r5, [r0, #12]
 800ca94:	f104 0914 	add.w	r9, r4, #20
 800ca98:	f108 0514 	add.w	r5, r8, #20
 800ca9c:	f100 0e14 	add.w	lr, r0, #20
 800caa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800caa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caa8:	f108 0210 	add.w	r2, r8, #16
 800caac:	46f2      	mov	sl, lr
 800caae:	2100      	movs	r1, #0
 800cab0:	f859 3b04 	ldr.w	r3, [r9], #4
 800cab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cab8:	fa11 f88b 	uxtah	r8, r1, fp
 800cabc:	b299      	uxth	r1, r3
 800cabe:	0c1b      	lsrs	r3, r3, #16
 800cac0:	eba8 0801 	sub.w	r8, r8, r1
 800cac4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cac8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cacc:	fa1f f888 	uxth.w	r8, r8
 800cad0:	1419      	asrs	r1, r3, #16
 800cad2:	454e      	cmp	r6, r9
 800cad4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cad8:	f84a 3b04 	str.w	r3, [sl], #4
 800cadc:	d8e8      	bhi.n	800cab0 <__mdiff+0x80>
 800cade:	1b33      	subs	r3, r6, r4
 800cae0:	3b15      	subs	r3, #21
 800cae2:	f023 0303 	bic.w	r3, r3, #3
 800cae6:	3304      	adds	r3, #4
 800cae8:	3415      	adds	r4, #21
 800caea:	42a6      	cmp	r6, r4
 800caec:	bf38      	it	cc
 800caee:	2304      	movcc	r3, #4
 800caf0:	441d      	add	r5, r3
 800caf2:	4473      	add	r3, lr
 800caf4:	469e      	mov	lr, r3
 800caf6:	462e      	mov	r6, r5
 800caf8:	4566      	cmp	r6, ip
 800cafa:	d30e      	bcc.n	800cb1a <__mdiff+0xea>
 800cafc:	f10c 0203 	add.w	r2, ip, #3
 800cb00:	1b52      	subs	r2, r2, r5
 800cb02:	f022 0203 	bic.w	r2, r2, #3
 800cb06:	3d03      	subs	r5, #3
 800cb08:	45ac      	cmp	ip, r5
 800cb0a:	bf38      	it	cc
 800cb0c:	2200      	movcc	r2, #0
 800cb0e:	4413      	add	r3, r2
 800cb10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb14:	b17a      	cbz	r2, 800cb36 <__mdiff+0x106>
 800cb16:	6107      	str	r7, [r0, #16]
 800cb18:	e7a4      	b.n	800ca64 <__mdiff+0x34>
 800cb1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb1e:	fa11 f288 	uxtah	r2, r1, r8
 800cb22:	1414      	asrs	r4, r2, #16
 800cb24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb28:	b292      	uxth	r2, r2
 800cb2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb2e:	f84e 2b04 	str.w	r2, [lr], #4
 800cb32:	1421      	asrs	r1, r4, #16
 800cb34:	e7e0      	b.n	800caf8 <__mdiff+0xc8>
 800cb36:	3f01      	subs	r7, #1
 800cb38:	e7ea      	b.n	800cb10 <__mdiff+0xe0>
 800cb3a:	bf00      	nop
 800cb3c:	0800d844 	.word	0x0800d844
 800cb40:	0800d855 	.word	0x0800d855

0800cb44 <__d2b>:
 800cb44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb48:	460f      	mov	r7, r1
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	ec59 8b10 	vmov	r8, r9, d0
 800cb50:	4616      	mov	r6, r2
 800cb52:	f7ff fcd5 	bl	800c500 <_Balloc>
 800cb56:	4604      	mov	r4, r0
 800cb58:	b930      	cbnz	r0, 800cb68 <__d2b+0x24>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	4b24      	ldr	r3, [pc, #144]	; (800cbf0 <__d2b+0xac>)
 800cb5e:	4825      	ldr	r0, [pc, #148]	; (800cbf4 <__d2b+0xb0>)
 800cb60:	f240 310f 	movw	r1, #783	; 0x30f
 800cb64:	f000 fa78 	bl	800d058 <__assert_func>
 800cb68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb70:	bb2d      	cbnz	r5, 800cbbe <__d2b+0x7a>
 800cb72:	9301      	str	r3, [sp, #4]
 800cb74:	f1b8 0300 	subs.w	r3, r8, #0
 800cb78:	d026      	beq.n	800cbc8 <__d2b+0x84>
 800cb7a:	4668      	mov	r0, sp
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	f7ff fd87 	bl	800c690 <__lo0bits>
 800cb82:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb86:	b1e8      	cbz	r0, 800cbc4 <__d2b+0x80>
 800cb88:	f1c0 0320 	rsb	r3, r0, #32
 800cb8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb90:	430b      	orrs	r3, r1
 800cb92:	40c2      	lsrs	r2, r0
 800cb94:	6163      	str	r3, [r4, #20]
 800cb96:	9201      	str	r2, [sp, #4]
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	61a3      	str	r3, [r4, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bf14      	ite	ne
 800cba0:	2202      	movne	r2, #2
 800cba2:	2201      	moveq	r2, #1
 800cba4:	6122      	str	r2, [r4, #16]
 800cba6:	b1bd      	cbz	r5, 800cbd8 <__d2b+0x94>
 800cba8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbac:	4405      	add	r5, r0
 800cbae:	603d      	str	r5, [r7, #0]
 800cbb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbb4:	6030      	str	r0, [r6, #0]
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	b003      	add	sp, #12
 800cbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbc2:	e7d6      	b.n	800cb72 <__d2b+0x2e>
 800cbc4:	6161      	str	r1, [r4, #20]
 800cbc6:	e7e7      	b.n	800cb98 <__d2b+0x54>
 800cbc8:	a801      	add	r0, sp, #4
 800cbca:	f7ff fd61 	bl	800c690 <__lo0bits>
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	6163      	str	r3, [r4, #20]
 800cbd2:	3020      	adds	r0, #32
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	e7e5      	b.n	800cba4 <__d2b+0x60>
 800cbd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbe0:	6038      	str	r0, [r7, #0]
 800cbe2:	6918      	ldr	r0, [r3, #16]
 800cbe4:	f7ff fd34 	bl	800c650 <__hi0bits>
 800cbe8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cbec:	e7e2      	b.n	800cbb4 <__d2b+0x70>
 800cbee:	bf00      	nop
 800cbf0:	0800d844 	.word	0x0800d844
 800cbf4:	0800d855 	.word	0x0800d855

0800cbf8 <__ssputs_r>:
 800cbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbfc:	688e      	ldr	r6, [r1, #8]
 800cbfe:	461f      	mov	r7, r3
 800cc00:	42be      	cmp	r6, r7
 800cc02:	680b      	ldr	r3, [r1, #0]
 800cc04:	4682      	mov	sl, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4690      	mov	r8, r2
 800cc0a:	d82c      	bhi.n	800cc66 <__ssputs_r+0x6e>
 800cc0c:	898a      	ldrh	r2, [r1, #12]
 800cc0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc12:	d026      	beq.n	800cc62 <__ssputs_r+0x6a>
 800cc14:	6965      	ldr	r5, [r4, #20]
 800cc16:	6909      	ldr	r1, [r1, #16]
 800cc18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc1c:	eba3 0901 	sub.w	r9, r3, r1
 800cc20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc24:	1c7b      	adds	r3, r7, #1
 800cc26:	444b      	add	r3, r9
 800cc28:	106d      	asrs	r5, r5, #1
 800cc2a:	429d      	cmp	r5, r3
 800cc2c:	bf38      	it	cc
 800cc2e:	461d      	movcc	r5, r3
 800cc30:	0553      	lsls	r3, r2, #21
 800cc32:	d527      	bpl.n	800cc84 <__ssputs_r+0x8c>
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7ff fbd7 	bl	800c3e8 <_malloc_r>
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	b360      	cbz	r0, 800cc98 <__ssputs_r+0xa0>
 800cc3e:	6921      	ldr	r1, [r4, #16]
 800cc40:	464a      	mov	r2, r9
 800cc42:	f7fe fd58 	bl	800b6f6 <memcpy>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	6126      	str	r6, [r4, #16]
 800cc54:	6165      	str	r5, [r4, #20]
 800cc56:	444e      	add	r6, r9
 800cc58:	eba5 0509 	sub.w	r5, r5, r9
 800cc5c:	6026      	str	r6, [r4, #0]
 800cc5e:	60a5      	str	r5, [r4, #8]
 800cc60:	463e      	mov	r6, r7
 800cc62:	42be      	cmp	r6, r7
 800cc64:	d900      	bls.n	800cc68 <__ssputs_r+0x70>
 800cc66:	463e      	mov	r6, r7
 800cc68:	6820      	ldr	r0, [r4, #0]
 800cc6a:	4632      	mov	r2, r6
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	f000 f9c9 	bl	800d004 <memmove>
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	1b9b      	subs	r3, r3, r6
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	4433      	add	r3, r6
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	2000      	movs	r0, #0
 800cc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc84:	462a      	mov	r2, r5
 800cc86:	f000 fa2d 	bl	800d0e4 <_realloc_r>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d1e0      	bne.n	800cc52 <__ssputs_r+0x5a>
 800cc90:	6921      	ldr	r1, [r4, #16]
 800cc92:	4650      	mov	r0, sl
 800cc94:	f7ff fb34 	bl	800c300 <_free_r>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	f8ca 3000 	str.w	r3, [sl]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccaa:	e7e9      	b.n	800cc80 <__ssputs_r+0x88>

0800ccac <_svfiprintf_r>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	898b      	ldrh	r3, [r1, #12]
 800ccb4:	061b      	lsls	r3, r3, #24
 800ccb6:	b09d      	sub	sp, #116	; 0x74
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	d50e      	bpl.n	800ccde <_svfiprintf_r+0x32>
 800ccc0:	690b      	ldr	r3, [r1, #16]
 800ccc2:	b963      	cbnz	r3, 800ccde <_svfiprintf_r+0x32>
 800ccc4:	2140      	movs	r1, #64	; 0x40
 800ccc6:	f7ff fb8f 	bl	800c3e8 <_malloc_r>
 800ccca:	6028      	str	r0, [r5, #0]
 800cccc:	6128      	str	r0, [r5, #16]
 800ccce:	b920      	cbnz	r0, 800ccda <_svfiprintf_r+0x2e>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccd8:	e0d0      	b.n	800ce7c <_svfiprintf_r+0x1d0>
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	616b      	str	r3, [r5, #20]
 800ccde:	2300      	movs	r3, #0
 800cce0:	9309      	str	r3, [sp, #36]	; 0x24
 800cce2:	2320      	movs	r3, #32
 800cce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccec:	2330      	movs	r3, #48	; 0x30
 800ccee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce94 <_svfiprintf_r+0x1e8>
 800ccf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf6:	f04f 0901 	mov.w	r9, #1
 800ccfa:	4623      	mov	r3, r4
 800ccfc:	469a      	mov	sl, r3
 800ccfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd02:	b10a      	cbz	r2, 800cd08 <_svfiprintf_r+0x5c>
 800cd04:	2a25      	cmp	r2, #37	; 0x25
 800cd06:	d1f9      	bne.n	800ccfc <_svfiprintf_r+0x50>
 800cd08:	ebba 0b04 	subs.w	fp, sl, r4
 800cd0c:	d00b      	beq.n	800cd26 <_svfiprintf_r+0x7a>
 800cd0e:	465b      	mov	r3, fp
 800cd10:	4622      	mov	r2, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	4638      	mov	r0, r7
 800cd16:	f7ff ff6f 	bl	800cbf8 <__ssputs_r>
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	f000 80a9 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd22:	445a      	add	r2, fp
 800cd24:	9209      	str	r2, [sp, #36]	; 0x24
 800cd26:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80a1 	beq.w	800ce72 <_svfiprintf_r+0x1c6>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3a:	f10a 0a01 	add.w	sl, sl, #1
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	9307      	str	r3, [sp, #28]
 800cd42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd46:	931a      	str	r3, [sp, #104]	; 0x68
 800cd48:	4654      	mov	r4, sl
 800cd4a:	2205      	movs	r2, #5
 800cd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd50:	4850      	ldr	r0, [pc, #320]	; (800ce94 <_svfiprintf_r+0x1e8>)
 800cd52:	f7f3 fadd 	bl	8000310 <memchr>
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	b9d8      	cbnz	r0, 800cd92 <_svfiprintf_r+0xe6>
 800cd5a:	06d0      	lsls	r0, r2, #27
 800cd5c:	bf44      	itt	mi
 800cd5e:	2320      	movmi	r3, #32
 800cd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd64:	0711      	lsls	r1, r2, #28
 800cd66:	bf44      	itt	mi
 800cd68:	232b      	movmi	r3, #43	; 0x2b
 800cd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd72:	2b2a      	cmp	r3, #42	; 0x2a
 800cd74:	d015      	beq.n	800cda2 <_svfiprintf_r+0xf6>
 800cd76:	9a07      	ldr	r2, [sp, #28]
 800cd78:	4654      	mov	r4, sl
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	f04f 0c0a 	mov.w	ip, #10
 800cd80:	4621      	mov	r1, r4
 800cd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd86:	3b30      	subs	r3, #48	; 0x30
 800cd88:	2b09      	cmp	r3, #9
 800cd8a:	d94d      	bls.n	800ce28 <_svfiprintf_r+0x17c>
 800cd8c:	b1b0      	cbz	r0, 800cdbc <_svfiprintf_r+0x110>
 800cd8e:	9207      	str	r2, [sp, #28]
 800cd90:	e014      	b.n	800cdbc <_svfiprintf_r+0x110>
 800cd92:	eba0 0308 	sub.w	r3, r0, r8
 800cd96:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	46a2      	mov	sl, r4
 800cda0:	e7d2      	b.n	800cd48 <_svfiprintf_r+0x9c>
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	1d19      	adds	r1, r3, #4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	9103      	str	r1, [sp, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	bfbb      	ittet	lt
 800cdae:	425b      	neglt	r3, r3
 800cdb0:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb4:	9307      	strge	r3, [sp, #28]
 800cdb6:	9307      	strlt	r3, [sp, #28]
 800cdb8:	bfb8      	it	lt
 800cdba:	9204      	strlt	r2, [sp, #16]
 800cdbc:	7823      	ldrb	r3, [r4, #0]
 800cdbe:	2b2e      	cmp	r3, #46	; 0x2e
 800cdc0:	d10c      	bne.n	800cddc <_svfiprintf_r+0x130>
 800cdc2:	7863      	ldrb	r3, [r4, #1]
 800cdc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc6:	d134      	bne.n	800ce32 <_svfiprintf_r+0x186>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	1d1a      	adds	r2, r3, #4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	9203      	str	r2, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bfb8      	it	lt
 800cdd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdd8:	3402      	adds	r4, #2
 800cdda:	9305      	str	r3, [sp, #20]
 800cddc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cea4 <_svfiprintf_r+0x1f8>
 800cde0:	7821      	ldrb	r1, [r4, #0]
 800cde2:	2203      	movs	r2, #3
 800cde4:	4650      	mov	r0, sl
 800cde6:	f7f3 fa93 	bl	8000310 <memchr>
 800cdea:	b138      	cbz	r0, 800cdfc <_svfiprintf_r+0x150>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	eba0 000a 	sub.w	r0, r0, sl
 800cdf2:	2240      	movs	r2, #64	; 0x40
 800cdf4:	4082      	lsls	r2, r0
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	3401      	adds	r4, #1
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce00:	4825      	ldr	r0, [pc, #148]	; (800ce98 <_svfiprintf_r+0x1ec>)
 800ce02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce06:	2206      	movs	r2, #6
 800ce08:	f7f3 fa82 	bl	8000310 <memchr>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d038      	beq.n	800ce82 <_svfiprintf_r+0x1d6>
 800ce10:	4b22      	ldr	r3, [pc, #136]	; (800ce9c <_svfiprintf_r+0x1f0>)
 800ce12:	bb1b      	cbnz	r3, 800ce5c <_svfiprintf_r+0x1b0>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	3307      	adds	r3, #7
 800ce18:	f023 0307 	bic.w	r3, r3, #7
 800ce1c:	3308      	adds	r3, #8
 800ce1e:	9303      	str	r3, [sp, #12]
 800ce20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce22:	4433      	add	r3, r6
 800ce24:	9309      	str	r3, [sp, #36]	; 0x24
 800ce26:	e768      	b.n	800ccfa <_svfiprintf_r+0x4e>
 800ce28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2c:	460c      	mov	r4, r1
 800ce2e:	2001      	movs	r0, #1
 800ce30:	e7a6      	b.n	800cd80 <_svfiprintf_r+0xd4>
 800ce32:	2300      	movs	r3, #0
 800ce34:	3401      	adds	r4, #1
 800ce36:	9305      	str	r3, [sp, #20]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f04f 0c0a 	mov.w	ip, #10
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce44:	3a30      	subs	r2, #48	; 0x30
 800ce46:	2a09      	cmp	r2, #9
 800ce48:	d903      	bls.n	800ce52 <_svfiprintf_r+0x1a6>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0c6      	beq.n	800cddc <_svfiprintf_r+0x130>
 800ce4e:	9105      	str	r1, [sp, #20]
 800ce50:	e7c4      	b.n	800cddc <_svfiprintf_r+0x130>
 800ce52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce56:	4604      	mov	r4, r0
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e7f0      	b.n	800ce3e <_svfiprintf_r+0x192>
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	462a      	mov	r2, r5
 800ce62:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <_svfiprintf_r+0x1f4>)
 800ce64:	a904      	add	r1, sp, #16
 800ce66:	4638      	mov	r0, r7
 800ce68:	f7fd fef6 	bl	800ac58 <_printf_float>
 800ce6c:	1c42      	adds	r2, r0, #1
 800ce6e:	4606      	mov	r6, r0
 800ce70:	d1d6      	bne.n	800ce20 <_svfiprintf_r+0x174>
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	065b      	lsls	r3, r3, #25
 800ce76:	f53f af2d 	bmi.w	800ccd4 <_svfiprintf_r+0x28>
 800ce7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce7c:	b01d      	add	sp, #116	; 0x74
 800ce7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce82:	ab03      	add	r3, sp, #12
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	462a      	mov	r2, r5
 800ce88:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <_svfiprintf_r+0x1f4>)
 800ce8a:	a904      	add	r1, sp, #16
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7fe f96b 	bl	800b168 <_printf_i>
 800ce92:	e7eb      	b.n	800ce6c <_svfiprintf_r+0x1c0>
 800ce94:	0800d9ac 	.word	0x0800d9ac
 800ce98:	0800d9b6 	.word	0x0800d9b6
 800ce9c:	0800ac59 	.word	0x0800ac59
 800cea0:	0800cbf9 	.word	0x0800cbf9
 800cea4:	0800d9b2 	.word	0x0800d9b2

0800cea8 <__sflush_r>:
 800cea8:	898a      	ldrh	r2, [r1, #12]
 800ceaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceae:	4605      	mov	r5, r0
 800ceb0:	0710      	lsls	r0, r2, #28
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	d458      	bmi.n	800cf68 <__sflush_r+0xc0>
 800ceb6:	684b      	ldr	r3, [r1, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	dc05      	bgt.n	800cec8 <__sflush_r+0x20>
 800cebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dc02      	bgt.n	800cec8 <__sflush_r+0x20>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceca:	2e00      	cmp	r6, #0
 800cecc:	d0f9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cece:	2300      	movs	r3, #0
 800ced0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ced4:	682f      	ldr	r7, [r5, #0]
 800ced6:	6a21      	ldr	r1, [r4, #32]
 800ced8:	602b      	str	r3, [r5, #0]
 800ceda:	d032      	beq.n	800cf42 <__sflush_r+0x9a>
 800cedc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	075a      	lsls	r2, r3, #29
 800cee2:	d505      	bpl.n	800cef0 <__sflush_r+0x48>
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	1ac0      	subs	r0, r0, r3
 800cee8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ceea:	b10b      	cbz	r3, 800cef0 <__sflush_r+0x48>
 800ceec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ceee:	1ac0      	subs	r0, r0, r3
 800cef0:	2300      	movs	r3, #0
 800cef2:	4602      	mov	r2, r0
 800cef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cef6:	6a21      	ldr	r1, [r4, #32]
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b0      	blx	r6
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	d106      	bne.n	800cf10 <__sflush_r+0x68>
 800cf02:	6829      	ldr	r1, [r5, #0]
 800cf04:	291d      	cmp	r1, #29
 800cf06:	d82b      	bhi.n	800cf60 <__sflush_r+0xb8>
 800cf08:	4a29      	ldr	r2, [pc, #164]	; (800cfb0 <__sflush_r+0x108>)
 800cf0a:	410a      	asrs	r2, r1
 800cf0c:	07d6      	lsls	r6, r2, #31
 800cf0e:	d427      	bmi.n	800cf60 <__sflush_r+0xb8>
 800cf10:	2200      	movs	r2, #0
 800cf12:	6062      	str	r2, [r4, #4]
 800cf14:	04d9      	lsls	r1, r3, #19
 800cf16:	6922      	ldr	r2, [r4, #16]
 800cf18:	6022      	str	r2, [r4, #0]
 800cf1a:	d504      	bpl.n	800cf26 <__sflush_r+0x7e>
 800cf1c:	1c42      	adds	r2, r0, #1
 800cf1e:	d101      	bne.n	800cf24 <__sflush_r+0x7c>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b903      	cbnz	r3, 800cf26 <__sflush_r+0x7e>
 800cf24:	6560      	str	r0, [r4, #84]	; 0x54
 800cf26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf28:	602f      	str	r7, [r5, #0]
 800cf2a:	2900      	cmp	r1, #0
 800cf2c:	d0c9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cf2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf32:	4299      	cmp	r1, r3
 800cf34:	d002      	beq.n	800cf3c <__sflush_r+0x94>
 800cf36:	4628      	mov	r0, r5
 800cf38:	f7ff f9e2 	bl	800c300 <_free_r>
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	6360      	str	r0, [r4, #52]	; 0x34
 800cf40:	e7c0      	b.n	800cec4 <__sflush_r+0x1c>
 800cf42:	2301      	movs	r3, #1
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b0      	blx	r6
 800cf48:	1c41      	adds	r1, r0, #1
 800cf4a:	d1c8      	bne.n	800cede <__sflush_r+0x36>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d0c5      	beq.n	800cede <__sflush_r+0x36>
 800cf52:	2b1d      	cmp	r3, #29
 800cf54:	d001      	beq.n	800cf5a <__sflush_r+0xb2>
 800cf56:	2b16      	cmp	r3, #22
 800cf58:	d101      	bne.n	800cf5e <__sflush_r+0xb6>
 800cf5a:	602f      	str	r7, [r5, #0]
 800cf5c:	e7b1      	b.n	800cec2 <__sflush_r+0x1a>
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf64:	81a3      	strh	r3, [r4, #12]
 800cf66:	e7ad      	b.n	800cec4 <__sflush_r+0x1c>
 800cf68:	690f      	ldr	r7, [r1, #16]
 800cf6a:	2f00      	cmp	r7, #0
 800cf6c:	d0a9      	beq.n	800cec2 <__sflush_r+0x1a>
 800cf6e:	0793      	lsls	r3, r2, #30
 800cf70:	680e      	ldr	r6, [r1, #0]
 800cf72:	bf08      	it	eq
 800cf74:	694b      	ldreq	r3, [r1, #20]
 800cf76:	600f      	str	r7, [r1, #0]
 800cf78:	bf18      	it	ne
 800cf7a:	2300      	movne	r3, #0
 800cf7c:	eba6 0807 	sub.w	r8, r6, r7
 800cf80:	608b      	str	r3, [r1, #8]
 800cf82:	f1b8 0f00 	cmp.w	r8, #0
 800cf86:	dd9c      	ble.n	800cec2 <__sflush_r+0x1a>
 800cf88:	6a21      	ldr	r1, [r4, #32]
 800cf8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf8c:	4643      	mov	r3, r8
 800cf8e:	463a      	mov	r2, r7
 800cf90:	4628      	mov	r0, r5
 800cf92:	47b0      	blx	r6
 800cf94:	2800      	cmp	r0, #0
 800cf96:	dc06      	bgt.n	800cfa6 <__sflush_r+0xfe>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e78e      	b.n	800cec4 <__sflush_r+0x1c>
 800cfa6:	4407      	add	r7, r0
 800cfa8:	eba8 0800 	sub.w	r8, r8, r0
 800cfac:	e7e9      	b.n	800cf82 <__sflush_r+0xda>
 800cfae:	bf00      	nop
 800cfb0:	dfbffffe 	.word	0xdfbffffe

0800cfb4 <_fflush_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	690b      	ldr	r3, [r1, #16]
 800cfb8:	4605      	mov	r5, r0
 800cfba:	460c      	mov	r4, r1
 800cfbc:	b913      	cbnz	r3, 800cfc4 <_fflush_r+0x10>
 800cfbe:	2500      	movs	r5, #0
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	b118      	cbz	r0, 800cfce <_fflush_r+0x1a>
 800cfc6:	6a03      	ldr	r3, [r0, #32]
 800cfc8:	b90b      	cbnz	r3, 800cfce <_fflush_r+0x1a>
 800cfca:	f7fe fa7b 	bl	800b4c4 <__sinit>
 800cfce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0f3      	beq.n	800cfbe <_fflush_r+0xa>
 800cfd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfd8:	07d0      	lsls	r0, r2, #31
 800cfda:	d404      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfdc:	0599      	lsls	r1, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_fflush_r+0x32>
 800cfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfe2:	f7fe fb86 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f7ff ff5d 	bl	800cea8 <__sflush_r>
 800cfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cff0:	07da      	lsls	r2, r3, #31
 800cff2:	4605      	mov	r5, r0
 800cff4:	d4e4      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cff6:	89a3      	ldrh	r3, [r4, #12]
 800cff8:	059b      	lsls	r3, r3, #22
 800cffa:	d4e1      	bmi.n	800cfc0 <_fflush_r+0xc>
 800cffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cffe:	f7fe fb79 	bl	800b6f4 <__retarget_lock_release_recursive>
 800d002:	e7dd      	b.n	800cfc0 <_fflush_r+0xc>

0800d004 <memmove>:
 800d004:	4288      	cmp	r0, r1
 800d006:	b510      	push	{r4, lr}
 800d008:	eb01 0402 	add.w	r4, r1, r2
 800d00c:	d902      	bls.n	800d014 <memmove+0x10>
 800d00e:	4284      	cmp	r4, r0
 800d010:	4623      	mov	r3, r4
 800d012:	d807      	bhi.n	800d024 <memmove+0x20>
 800d014:	1e43      	subs	r3, r0, #1
 800d016:	42a1      	cmp	r1, r4
 800d018:	d008      	beq.n	800d02c <memmove+0x28>
 800d01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d022:	e7f8      	b.n	800d016 <memmove+0x12>
 800d024:	4402      	add	r2, r0
 800d026:	4601      	mov	r1, r0
 800d028:	428a      	cmp	r2, r1
 800d02a:	d100      	bne.n	800d02e <memmove+0x2a>
 800d02c:	bd10      	pop	{r4, pc}
 800d02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d036:	e7f7      	b.n	800d028 <memmove+0x24>

0800d038 <_sbrk_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	4d06      	ldr	r5, [pc, #24]	; (800d054 <_sbrk_r+0x1c>)
 800d03c:	2300      	movs	r3, #0
 800d03e:	4604      	mov	r4, r0
 800d040:	4608      	mov	r0, r1
 800d042:	602b      	str	r3, [r5, #0]
 800d044:	f7f4 fa8a 	bl	800155c <_sbrk>
 800d048:	1c43      	adds	r3, r0, #1
 800d04a:	d102      	bne.n	800d052 <_sbrk_r+0x1a>
 800d04c:	682b      	ldr	r3, [r5, #0]
 800d04e:	b103      	cbz	r3, 800d052 <_sbrk_r+0x1a>
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	24000608 	.word	0x24000608

0800d058 <__assert_func>:
 800d058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d05a:	4614      	mov	r4, r2
 800d05c:	461a      	mov	r2, r3
 800d05e:	4b09      	ldr	r3, [pc, #36]	; (800d084 <__assert_func+0x2c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4605      	mov	r5, r0
 800d064:	68d8      	ldr	r0, [r3, #12]
 800d066:	b14c      	cbz	r4, 800d07c <__assert_func+0x24>
 800d068:	4b07      	ldr	r3, [pc, #28]	; (800d088 <__assert_func+0x30>)
 800d06a:	9100      	str	r1, [sp, #0]
 800d06c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d070:	4906      	ldr	r1, [pc, #24]	; (800d08c <__assert_func+0x34>)
 800d072:	462b      	mov	r3, r5
 800d074:	f000 f872 	bl	800d15c <fiprintf>
 800d078:	f000 f882 	bl	800d180 <abort>
 800d07c:	4b04      	ldr	r3, [pc, #16]	; (800d090 <__assert_func+0x38>)
 800d07e:	461c      	mov	r4, r3
 800d080:	e7f3      	b.n	800d06a <__assert_func+0x12>
 800d082:	bf00      	nop
 800d084:	24000068 	.word	0x24000068
 800d088:	0800d9c7 	.word	0x0800d9c7
 800d08c:	0800d9d4 	.word	0x0800d9d4
 800d090:	0800da02 	.word	0x0800da02

0800d094 <_calloc_r>:
 800d094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d096:	fba1 2402 	umull	r2, r4, r1, r2
 800d09a:	b94c      	cbnz	r4, 800d0b0 <_calloc_r+0x1c>
 800d09c:	4611      	mov	r1, r2
 800d09e:	9201      	str	r2, [sp, #4]
 800d0a0:	f7ff f9a2 	bl	800c3e8 <_malloc_r>
 800d0a4:	9a01      	ldr	r2, [sp, #4]
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	b930      	cbnz	r0, 800d0b8 <_calloc_r+0x24>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	b003      	add	sp, #12
 800d0ae:	bd30      	pop	{r4, r5, pc}
 800d0b0:	220c      	movs	r2, #12
 800d0b2:	6002      	str	r2, [r0, #0]
 800d0b4:	2500      	movs	r5, #0
 800d0b6:	e7f8      	b.n	800d0aa <_calloc_r+0x16>
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f7fe fa9c 	bl	800b5f6 <memset>
 800d0be:	e7f4      	b.n	800d0aa <_calloc_r+0x16>

0800d0c0 <__ascii_mbtowc>:
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	b901      	cbnz	r1, 800d0c6 <__ascii_mbtowc+0x6>
 800d0c4:	a901      	add	r1, sp, #4
 800d0c6:	b142      	cbz	r2, 800d0da <__ascii_mbtowc+0x1a>
 800d0c8:	b14b      	cbz	r3, 800d0de <__ascii_mbtowc+0x1e>
 800d0ca:	7813      	ldrb	r3, [r2, #0]
 800d0cc:	600b      	str	r3, [r1, #0]
 800d0ce:	7812      	ldrb	r2, [r2, #0]
 800d0d0:	1e10      	subs	r0, r2, #0
 800d0d2:	bf18      	it	ne
 800d0d4:	2001      	movne	r0, #1
 800d0d6:	b002      	add	sp, #8
 800d0d8:	4770      	bx	lr
 800d0da:	4610      	mov	r0, r2
 800d0dc:	e7fb      	b.n	800d0d6 <__ascii_mbtowc+0x16>
 800d0de:	f06f 0001 	mvn.w	r0, #1
 800d0e2:	e7f8      	b.n	800d0d6 <__ascii_mbtowc+0x16>

0800d0e4 <_realloc_r>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4680      	mov	r8, r0
 800d0ea:	4614      	mov	r4, r2
 800d0ec:	460e      	mov	r6, r1
 800d0ee:	b921      	cbnz	r1, 800d0fa <_realloc_r+0x16>
 800d0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	f7ff b977 	b.w	800c3e8 <_malloc_r>
 800d0fa:	b92a      	cbnz	r2, 800d108 <_realloc_r+0x24>
 800d0fc:	f7ff f900 	bl	800c300 <_free_r>
 800d100:	4625      	mov	r5, r4
 800d102:	4628      	mov	r0, r5
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	f000 f841 	bl	800d18e <_malloc_usable_size_r>
 800d10c:	4284      	cmp	r4, r0
 800d10e:	4607      	mov	r7, r0
 800d110:	d802      	bhi.n	800d118 <_realloc_r+0x34>
 800d112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d116:	d812      	bhi.n	800d13e <_realloc_r+0x5a>
 800d118:	4621      	mov	r1, r4
 800d11a:	4640      	mov	r0, r8
 800d11c:	f7ff f964 	bl	800c3e8 <_malloc_r>
 800d120:	4605      	mov	r5, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d0ed      	beq.n	800d102 <_realloc_r+0x1e>
 800d126:	42bc      	cmp	r4, r7
 800d128:	4622      	mov	r2, r4
 800d12a:	4631      	mov	r1, r6
 800d12c:	bf28      	it	cs
 800d12e:	463a      	movcs	r2, r7
 800d130:	f7fe fae1 	bl	800b6f6 <memcpy>
 800d134:	4631      	mov	r1, r6
 800d136:	4640      	mov	r0, r8
 800d138:	f7ff f8e2 	bl	800c300 <_free_r>
 800d13c:	e7e1      	b.n	800d102 <_realloc_r+0x1e>
 800d13e:	4635      	mov	r5, r6
 800d140:	e7df      	b.n	800d102 <_realloc_r+0x1e>

0800d142 <__ascii_wctomb>:
 800d142:	b149      	cbz	r1, 800d158 <__ascii_wctomb+0x16>
 800d144:	2aff      	cmp	r2, #255	; 0xff
 800d146:	bf85      	ittet	hi
 800d148:	238a      	movhi	r3, #138	; 0x8a
 800d14a:	6003      	strhi	r3, [r0, #0]
 800d14c:	700a      	strbls	r2, [r1, #0]
 800d14e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d152:	bf98      	it	ls
 800d154:	2001      	movls	r0, #1
 800d156:	4770      	bx	lr
 800d158:	4608      	mov	r0, r1
 800d15a:	4770      	bx	lr

0800d15c <fiprintf>:
 800d15c:	b40e      	push	{r1, r2, r3}
 800d15e:	b503      	push	{r0, r1, lr}
 800d160:	4601      	mov	r1, r0
 800d162:	ab03      	add	r3, sp, #12
 800d164:	4805      	ldr	r0, [pc, #20]	; (800d17c <fiprintf+0x20>)
 800d166:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16a:	6800      	ldr	r0, [r0, #0]
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	f000 f83f 	bl	800d1f0 <_vfiprintf_r>
 800d172:	b002      	add	sp, #8
 800d174:	f85d eb04 	ldr.w	lr, [sp], #4
 800d178:	b003      	add	sp, #12
 800d17a:	4770      	bx	lr
 800d17c:	24000068 	.word	0x24000068

0800d180 <abort>:
 800d180:	b508      	push	{r3, lr}
 800d182:	2006      	movs	r0, #6
 800d184:	f000 fa0c 	bl	800d5a0 <raise>
 800d188:	2001      	movs	r0, #1
 800d18a:	f7f4 f96f 	bl	800146c <_exit>

0800d18e <_malloc_usable_size_r>:
 800d18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d192:	1f18      	subs	r0, r3, #4
 800d194:	2b00      	cmp	r3, #0
 800d196:	bfbc      	itt	lt
 800d198:	580b      	ldrlt	r3, [r1, r0]
 800d19a:	18c0      	addlt	r0, r0, r3
 800d19c:	4770      	bx	lr

0800d19e <__sfputc_r>:
 800d19e:	6893      	ldr	r3, [r2, #8]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	b410      	push	{r4}
 800d1a6:	6093      	str	r3, [r2, #8]
 800d1a8:	da08      	bge.n	800d1bc <__sfputc_r+0x1e>
 800d1aa:	6994      	ldr	r4, [r2, #24]
 800d1ac:	42a3      	cmp	r3, r4
 800d1ae:	db01      	blt.n	800d1b4 <__sfputc_r+0x16>
 800d1b0:	290a      	cmp	r1, #10
 800d1b2:	d103      	bne.n	800d1bc <__sfputc_r+0x1e>
 800d1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b8:	f000 b934 	b.w	800d424 <__swbuf_r>
 800d1bc:	6813      	ldr	r3, [r2, #0]
 800d1be:	1c58      	adds	r0, r3, #1
 800d1c0:	6010      	str	r0, [r2, #0]
 800d1c2:	7019      	strb	r1, [r3, #0]
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <__sfputs_r>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460f      	mov	r7, r1
 800d1d2:	4614      	mov	r4, r2
 800d1d4:	18d5      	adds	r5, r2, r3
 800d1d6:	42ac      	cmp	r4, r5
 800d1d8:	d101      	bne.n	800d1de <__sfputs_r+0x12>
 800d1da:	2000      	movs	r0, #0
 800d1dc:	e007      	b.n	800d1ee <__sfputs_r+0x22>
 800d1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1e2:	463a      	mov	r2, r7
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7ff ffda 	bl	800d19e <__sfputc_r>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d1f3      	bne.n	800d1d6 <__sfputs_r+0xa>
 800d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1f0 <_vfiprintf_r>:
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	b09d      	sub	sp, #116	; 0x74
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	4698      	mov	r8, r3
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	b118      	cbz	r0, 800d208 <_vfiprintf_r+0x18>
 800d200:	6a03      	ldr	r3, [r0, #32]
 800d202:	b90b      	cbnz	r3, 800d208 <_vfiprintf_r+0x18>
 800d204:	f7fe f95e 	bl	800b4c4 <__sinit>
 800d208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d20a:	07d9      	lsls	r1, r3, #31
 800d20c:	d405      	bmi.n	800d21a <_vfiprintf_r+0x2a>
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	059a      	lsls	r2, r3, #22
 800d212:	d402      	bmi.n	800d21a <_vfiprintf_r+0x2a>
 800d214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d216:	f7fe fa6c 	bl	800b6f2 <__retarget_lock_acquire_recursive>
 800d21a:	89ab      	ldrh	r3, [r5, #12]
 800d21c:	071b      	lsls	r3, r3, #28
 800d21e:	d501      	bpl.n	800d224 <_vfiprintf_r+0x34>
 800d220:	692b      	ldr	r3, [r5, #16]
 800d222:	b99b      	cbnz	r3, 800d24c <_vfiprintf_r+0x5c>
 800d224:	4629      	mov	r1, r5
 800d226:	4630      	mov	r0, r6
 800d228:	f000 f93a 	bl	800d4a0 <__swsetup_r>
 800d22c:	b170      	cbz	r0, 800d24c <_vfiprintf_r+0x5c>
 800d22e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d230:	07dc      	lsls	r4, r3, #31
 800d232:	d504      	bpl.n	800d23e <_vfiprintf_r+0x4e>
 800d234:	f04f 30ff 	mov.w	r0, #4294967295
 800d238:	b01d      	add	sp, #116	; 0x74
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	0598      	lsls	r0, r3, #22
 800d242:	d4f7      	bmi.n	800d234 <_vfiprintf_r+0x44>
 800d244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d246:	f7fe fa55 	bl	800b6f4 <__retarget_lock_release_recursive>
 800d24a:	e7f3      	b.n	800d234 <_vfiprintf_r+0x44>
 800d24c:	2300      	movs	r3, #0
 800d24e:	9309      	str	r3, [sp, #36]	; 0x24
 800d250:	2320      	movs	r3, #32
 800d252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d256:	f8cd 800c 	str.w	r8, [sp, #12]
 800d25a:	2330      	movs	r3, #48	; 0x30
 800d25c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d410 <_vfiprintf_r+0x220>
 800d260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d264:	f04f 0901 	mov.w	r9, #1
 800d268:	4623      	mov	r3, r4
 800d26a:	469a      	mov	sl, r3
 800d26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d270:	b10a      	cbz	r2, 800d276 <_vfiprintf_r+0x86>
 800d272:	2a25      	cmp	r2, #37	; 0x25
 800d274:	d1f9      	bne.n	800d26a <_vfiprintf_r+0x7a>
 800d276:	ebba 0b04 	subs.w	fp, sl, r4
 800d27a:	d00b      	beq.n	800d294 <_vfiprintf_r+0xa4>
 800d27c:	465b      	mov	r3, fp
 800d27e:	4622      	mov	r2, r4
 800d280:	4629      	mov	r1, r5
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff ffa2 	bl	800d1cc <__sfputs_r>
 800d288:	3001      	adds	r0, #1
 800d28a:	f000 80a9 	beq.w	800d3e0 <_vfiprintf_r+0x1f0>
 800d28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d290:	445a      	add	r2, fp
 800d292:	9209      	str	r2, [sp, #36]	; 0x24
 800d294:	f89a 3000 	ldrb.w	r3, [sl]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 80a1 	beq.w	800d3e0 <_vfiprintf_r+0x1f0>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a8:	f10a 0a01 	add.w	sl, sl, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	9307      	str	r3, [sp, #28]
 800d2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2205      	movs	r2, #5
 800d2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2be:	4854      	ldr	r0, [pc, #336]	; (800d410 <_vfiprintf_r+0x220>)
 800d2c0:	f7f3 f826 	bl	8000310 <memchr>
 800d2c4:	9a04      	ldr	r2, [sp, #16]
 800d2c6:	b9d8      	cbnz	r0, 800d300 <_vfiprintf_r+0x110>
 800d2c8:	06d1      	lsls	r1, r2, #27
 800d2ca:	bf44      	itt	mi
 800d2cc:	2320      	movmi	r3, #32
 800d2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d2:	0713      	lsls	r3, r2, #28
 800d2d4:	bf44      	itt	mi
 800d2d6:	232b      	movmi	r3, #43	; 0x2b
 800d2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2e2:	d015      	beq.n	800d310 <_vfiprintf_r+0x120>
 800d2e4:	9a07      	ldr	r2, [sp, #28]
 800d2e6:	4654      	mov	r4, sl
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f04f 0c0a 	mov.w	ip, #10
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f4:	3b30      	subs	r3, #48	; 0x30
 800d2f6:	2b09      	cmp	r3, #9
 800d2f8:	d94d      	bls.n	800d396 <_vfiprintf_r+0x1a6>
 800d2fa:	b1b0      	cbz	r0, 800d32a <_vfiprintf_r+0x13a>
 800d2fc:	9207      	str	r2, [sp, #28]
 800d2fe:	e014      	b.n	800d32a <_vfiprintf_r+0x13a>
 800d300:	eba0 0308 	sub.w	r3, r0, r8
 800d304:	fa09 f303 	lsl.w	r3, r9, r3
 800d308:	4313      	orrs	r3, r2
 800d30a:	9304      	str	r3, [sp, #16]
 800d30c:	46a2      	mov	sl, r4
 800d30e:	e7d2      	b.n	800d2b6 <_vfiprintf_r+0xc6>
 800d310:	9b03      	ldr	r3, [sp, #12]
 800d312:	1d19      	adds	r1, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	9103      	str	r1, [sp, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bfbb      	ittet	lt
 800d31c:	425b      	neglt	r3, r3
 800d31e:	f042 0202 	orrlt.w	r2, r2, #2
 800d322:	9307      	strge	r3, [sp, #28]
 800d324:	9307      	strlt	r3, [sp, #28]
 800d326:	bfb8      	it	lt
 800d328:	9204      	strlt	r2, [sp, #16]
 800d32a:	7823      	ldrb	r3, [r4, #0]
 800d32c:	2b2e      	cmp	r3, #46	; 0x2e
 800d32e:	d10c      	bne.n	800d34a <_vfiprintf_r+0x15a>
 800d330:	7863      	ldrb	r3, [r4, #1]
 800d332:	2b2a      	cmp	r3, #42	; 0x2a
 800d334:	d134      	bne.n	800d3a0 <_vfiprintf_r+0x1b0>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	1d1a      	adds	r2, r3, #4
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9203      	str	r2, [sp, #12]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	bfb8      	it	lt
 800d342:	f04f 33ff 	movlt.w	r3, #4294967295
 800d346:	3402      	adds	r4, #2
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d420 <_vfiprintf_r+0x230>
 800d34e:	7821      	ldrb	r1, [r4, #0]
 800d350:	2203      	movs	r2, #3
 800d352:	4650      	mov	r0, sl
 800d354:	f7f2 ffdc 	bl	8000310 <memchr>
 800d358:	b138      	cbz	r0, 800d36a <_vfiprintf_r+0x17a>
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	eba0 000a 	sub.w	r0, r0, sl
 800d360:	2240      	movs	r2, #64	; 0x40
 800d362:	4082      	lsls	r2, r0
 800d364:	4313      	orrs	r3, r2
 800d366:	3401      	adds	r4, #1
 800d368:	9304      	str	r3, [sp, #16]
 800d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36e:	4829      	ldr	r0, [pc, #164]	; (800d414 <_vfiprintf_r+0x224>)
 800d370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d374:	2206      	movs	r2, #6
 800d376:	f7f2 ffcb 	bl	8000310 <memchr>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d03f      	beq.n	800d3fe <_vfiprintf_r+0x20e>
 800d37e:	4b26      	ldr	r3, [pc, #152]	; (800d418 <_vfiprintf_r+0x228>)
 800d380:	bb1b      	cbnz	r3, 800d3ca <_vfiprintf_r+0x1da>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	3307      	adds	r3, #7
 800d386:	f023 0307 	bic.w	r3, r3, #7
 800d38a:	3308      	adds	r3, #8
 800d38c:	9303      	str	r3, [sp, #12]
 800d38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d390:	443b      	add	r3, r7
 800d392:	9309      	str	r3, [sp, #36]	; 0x24
 800d394:	e768      	b.n	800d268 <_vfiprintf_r+0x78>
 800d396:	fb0c 3202 	mla	r2, ip, r2, r3
 800d39a:	460c      	mov	r4, r1
 800d39c:	2001      	movs	r0, #1
 800d39e:	e7a6      	b.n	800d2ee <_vfiprintf_r+0xfe>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	3401      	adds	r4, #1
 800d3a4:	9305      	str	r3, [sp, #20]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	f04f 0c0a 	mov.w	ip, #10
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b2:	3a30      	subs	r2, #48	; 0x30
 800d3b4:	2a09      	cmp	r2, #9
 800d3b6:	d903      	bls.n	800d3c0 <_vfiprintf_r+0x1d0>
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d0c6      	beq.n	800d34a <_vfiprintf_r+0x15a>
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	e7c4      	b.n	800d34a <_vfiprintf_r+0x15a>
 800d3c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e7f0      	b.n	800d3ac <_vfiprintf_r+0x1bc>
 800d3ca:	ab03      	add	r3, sp, #12
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	462a      	mov	r2, r5
 800d3d0:	4b12      	ldr	r3, [pc, #72]	; (800d41c <_vfiprintf_r+0x22c>)
 800d3d2:	a904      	add	r1, sp, #16
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	f7fd fc3f 	bl	800ac58 <_printf_float>
 800d3da:	4607      	mov	r7, r0
 800d3dc:	1c78      	adds	r0, r7, #1
 800d3de:	d1d6      	bne.n	800d38e <_vfiprintf_r+0x19e>
 800d3e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3e2:	07d9      	lsls	r1, r3, #31
 800d3e4:	d405      	bmi.n	800d3f2 <_vfiprintf_r+0x202>
 800d3e6:	89ab      	ldrh	r3, [r5, #12]
 800d3e8:	059a      	lsls	r2, r3, #22
 800d3ea:	d402      	bmi.n	800d3f2 <_vfiprintf_r+0x202>
 800d3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ee:	f7fe f981 	bl	800b6f4 <__retarget_lock_release_recursive>
 800d3f2:	89ab      	ldrh	r3, [r5, #12]
 800d3f4:	065b      	lsls	r3, r3, #25
 800d3f6:	f53f af1d 	bmi.w	800d234 <_vfiprintf_r+0x44>
 800d3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fc:	e71c      	b.n	800d238 <_vfiprintf_r+0x48>
 800d3fe:	ab03      	add	r3, sp, #12
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	462a      	mov	r2, r5
 800d404:	4b05      	ldr	r3, [pc, #20]	; (800d41c <_vfiprintf_r+0x22c>)
 800d406:	a904      	add	r1, sp, #16
 800d408:	4630      	mov	r0, r6
 800d40a:	f7fd fead 	bl	800b168 <_printf_i>
 800d40e:	e7e4      	b.n	800d3da <_vfiprintf_r+0x1ea>
 800d410:	0800d9ac 	.word	0x0800d9ac
 800d414:	0800d9b6 	.word	0x0800d9b6
 800d418:	0800ac59 	.word	0x0800ac59
 800d41c:	0800d1cd 	.word	0x0800d1cd
 800d420:	0800d9b2 	.word	0x0800d9b2

0800d424 <__swbuf_r>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	460e      	mov	r6, r1
 800d428:	4614      	mov	r4, r2
 800d42a:	4605      	mov	r5, r0
 800d42c:	b118      	cbz	r0, 800d436 <__swbuf_r+0x12>
 800d42e:	6a03      	ldr	r3, [r0, #32]
 800d430:	b90b      	cbnz	r3, 800d436 <__swbuf_r+0x12>
 800d432:	f7fe f847 	bl	800b4c4 <__sinit>
 800d436:	69a3      	ldr	r3, [r4, #24]
 800d438:	60a3      	str	r3, [r4, #8]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	071a      	lsls	r2, r3, #28
 800d43e:	d525      	bpl.n	800d48c <__swbuf_r+0x68>
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	b31b      	cbz	r3, 800d48c <__swbuf_r+0x68>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	6922      	ldr	r2, [r4, #16]
 800d448:	1a98      	subs	r0, r3, r2
 800d44a:	6963      	ldr	r3, [r4, #20]
 800d44c:	b2f6      	uxtb	r6, r6
 800d44e:	4283      	cmp	r3, r0
 800d450:	4637      	mov	r7, r6
 800d452:	dc04      	bgt.n	800d45e <__swbuf_r+0x3a>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f7ff fdac 	bl	800cfb4 <_fflush_r>
 800d45c:	b9e0      	cbnz	r0, 800d498 <__swbuf_r+0x74>
 800d45e:	68a3      	ldr	r3, [r4, #8]
 800d460:	3b01      	subs	r3, #1
 800d462:	60a3      	str	r3, [r4, #8]
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	1c5a      	adds	r2, r3, #1
 800d468:	6022      	str	r2, [r4, #0]
 800d46a:	701e      	strb	r6, [r3, #0]
 800d46c:	6962      	ldr	r2, [r4, #20]
 800d46e:	1c43      	adds	r3, r0, #1
 800d470:	429a      	cmp	r2, r3
 800d472:	d004      	beq.n	800d47e <__swbuf_r+0x5a>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	07db      	lsls	r3, r3, #31
 800d478:	d506      	bpl.n	800d488 <__swbuf_r+0x64>
 800d47a:	2e0a      	cmp	r6, #10
 800d47c:	d104      	bne.n	800d488 <__swbuf_r+0x64>
 800d47e:	4621      	mov	r1, r4
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff fd97 	bl	800cfb4 <_fflush_r>
 800d486:	b938      	cbnz	r0, 800d498 <__swbuf_r+0x74>
 800d488:	4638      	mov	r0, r7
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	4621      	mov	r1, r4
 800d48e:	4628      	mov	r0, r5
 800d490:	f000 f806 	bl	800d4a0 <__swsetup_r>
 800d494:	2800      	cmp	r0, #0
 800d496:	d0d5      	beq.n	800d444 <__swbuf_r+0x20>
 800d498:	f04f 37ff 	mov.w	r7, #4294967295
 800d49c:	e7f4      	b.n	800d488 <__swbuf_r+0x64>
	...

0800d4a0 <__swsetup_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4b2a      	ldr	r3, [pc, #168]	; (800d54c <__swsetup_r+0xac>)
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	6818      	ldr	r0, [r3, #0]
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	b118      	cbz	r0, 800d4b4 <__swsetup_r+0x14>
 800d4ac:	6a03      	ldr	r3, [r0, #32]
 800d4ae:	b90b      	cbnz	r3, 800d4b4 <__swsetup_r+0x14>
 800d4b0:	f7fe f808 	bl	800b4c4 <__sinit>
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ba:	0718      	lsls	r0, r3, #28
 800d4bc:	d422      	bmi.n	800d504 <__swsetup_r+0x64>
 800d4be:	06d9      	lsls	r1, r3, #27
 800d4c0:	d407      	bmi.n	800d4d2 <__swsetup_r+0x32>
 800d4c2:	2309      	movs	r3, #9
 800d4c4:	602b      	str	r3, [r5, #0]
 800d4c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4ca:	81a3      	strh	r3, [r4, #12]
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	e034      	b.n	800d53c <__swsetup_r+0x9c>
 800d4d2:	0758      	lsls	r0, r3, #29
 800d4d4:	d512      	bpl.n	800d4fc <__swsetup_r+0x5c>
 800d4d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4d8:	b141      	cbz	r1, 800d4ec <__swsetup_r+0x4c>
 800d4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	d002      	beq.n	800d4e8 <__swsetup_r+0x48>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	f7fe ff0c 	bl	800c300 <_free_r>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6363      	str	r3, [r4, #52]	; 0x34
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	6063      	str	r3, [r4, #4]
 800d4f8:	6923      	ldr	r3, [r4, #16]
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	f043 0308 	orr.w	r3, r3, #8
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	b94b      	cbnz	r3, 800d51c <__swsetup_r+0x7c>
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d512:	d003      	beq.n	800d51c <__swsetup_r+0x7c>
 800d514:	4621      	mov	r1, r4
 800d516:	4628      	mov	r0, r5
 800d518:	f000 f884 	bl	800d624 <__smakebuf_r>
 800d51c:	89a0      	ldrh	r0, [r4, #12]
 800d51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d522:	f010 0301 	ands.w	r3, r0, #1
 800d526:	d00a      	beq.n	800d53e <__swsetup_r+0x9e>
 800d528:	2300      	movs	r3, #0
 800d52a:	60a3      	str	r3, [r4, #8]
 800d52c:	6963      	ldr	r3, [r4, #20]
 800d52e:	425b      	negs	r3, r3
 800d530:	61a3      	str	r3, [r4, #24]
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	b943      	cbnz	r3, 800d548 <__swsetup_r+0xa8>
 800d536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d53a:	d1c4      	bne.n	800d4c6 <__swsetup_r+0x26>
 800d53c:	bd38      	pop	{r3, r4, r5, pc}
 800d53e:	0781      	lsls	r1, r0, #30
 800d540:	bf58      	it	pl
 800d542:	6963      	ldrpl	r3, [r4, #20]
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	e7f4      	b.n	800d532 <__swsetup_r+0x92>
 800d548:	2000      	movs	r0, #0
 800d54a:	e7f7      	b.n	800d53c <__swsetup_r+0x9c>
 800d54c:	24000068 	.word	0x24000068

0800d550 <_raise_r>:
 800d550:	291f      	cmp	r1, #31
 800d552:	b538      	push	{r3, r4, r5, lr}
 800d554:	4604      	mov	r4, r0
 800d556:	460d      	mov	r5, r1
 800d558:	d904      	bls.n	800d564 <_raise_r+0x14>
 800d55a:	2316      	movs	r3, #22
 800d55c:	6003      	str	r3, [r0, #0]
 800d55e:	f04f 30ff 	mov.w	r0, #4294967295
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d566:	b112      	cbz	r2, 800d56e <_raise_r+0x1e>
 800d568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d56c:	b94b      	cbnz	r3, 800d582 <_raise_r+0x32>
 800d56e:	4620      	mov	r0, r4
 800d570:	f000 f830 	bl	800d5d4 <_getpid_r>
 800d574:	462a      	mov	r2, r5
 800d576:	4601      	mov	r1, r0
 800d578:	4620      	mov	r0, r4
 800d57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d57e:	f000 b817 	b.w	800d5b0 <_kill_r>
 800d582:	2b01      	cmp	r3, #1
 800d584:	d00a      	beq.n	800d59c <_raise_r+0x4c>
 800d586:	1c59      	adds	r1, r3, #1
 800d588:	d103      	bne.n	800d592 <_raise_r+0x42>
 800d58a:	2316      	movs	r3, #22
 800d58c:	6003      	str	r3, [r0, #0]
 800d58e:	2001      	movs	r0, #1
 800d590:	e7e7      	b.n	800d562 <_raise_r+0x12>
 800d592:	2400      	movs	r4, #0
 800d594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d598:	4628      	mov	r0, r5
 800d59a:	4798      	blx	r3
 800d59c:	2000      	movs	r0, #0
 800d59e:	e7e0      	b.n	800d562 <_raise_r+0x12>

0800d5a0 <raise>:
 800d5a0:	4b02      	ldr	r3, [pc, #8]	; (800d5ac <raise+0xc>)
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	6818      	ldr	r0, [r3, #0]
 800d5a6:	f7ff bfd3 	b.w	800d550 <_raise_r>
 800d5aa:	bf00      	nop
 800d5ac:	24000068 	.word	0x24000068

0800d5b0 <_kill_r>:
 800d5b0:	b538      	push	{r3, r4, r5, lr}
 800d5b2:	4d07      	ldr	r5, [pc, #28]	; (800d5d0 <_kill_r+0x20>)
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	4608      	mov	r0, r1
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	602b      	str	r3, [r5, #0]
 800d5be:	f7f3 ff45 	bl	800144c <_kill>
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	d102      	bne.n	800d5cc <_kill_r+0x1c>
 800d5c6:	682b      	ldr	r3, [r5, #0]
 800d5c8:	b103      	cbz	r3, 800d5cc <_kill_r+0x1c>
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	bd38      	pop	{r3, r4, r5, pc}
 800d5ce:	bf00      	nop
 800d5d0:	24000608 	.word	0x24000608

0800d5d4 <_getpid_r>:
 800d5d4:	f7f3 bf32 	b.w	800143c <_getpid>

0800d5d8 <__swhatbuf_r>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	460c      	mov	r4, r1
 800d5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	b096      	sub	sp, #88	; 0x58
 800d5e4:	4615      	mov	r5, r2
 800d5e6:	461e      	mov	r6, r3
 800d5e8:	da0d      	bge.n	800d606 <__swhatbuf_r+0x2e>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d5f0:	f04f 0100 	mov.w	r1, #0
 800d5f4:	bf0c      	ite	eq
 800d5f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d5fa:	2340      	movne	r3, #64	; 0x40
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	6031      	str	r1, [r6, #0]
 800d600:	602b      	str	r3, [r5, #0]
 800d602:	b016      	add	sp, #88	; 0x58
 800d604:	bd70      	pop	{r4, r5, r6, pc}
 800d606:	466a      	mov	r2, sp
 800d608:	f000 f848 	bl	800d69c <_fstat_r>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	dbec      	blt.n	800d5ea <__swhatbuf_r+0x12>
 800d610:	9901      	ldr	r1, [sp, #4]
 800d612:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d616:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d61a:	4259      	negs	r1, r3
 800d61c:	4159      	adcs	r1, r3
 800d61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d622:	e7eb      	b.n	800d5fc <__swhatbuf_r+0x24>

0800d624 <__smakebuf_r>:
 800d624:	898b      	ldrh	r3, [r1, #12]
 800d626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d628:	079d      	lsls	r5, r3, #30
 800d62a:	4606      	mov	r6, r0
 800d62c:	460c      	mov	r4, r1
 800d62e:	d507      	bpl.n	800d640 <__smakebuf_r+0x1c>
 800d630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	6123      	str	r3, [r4, #16]
 800d638:	2301      	movs	r3, #1
 800d63a:	6163      	str	r3, [r4, #20]
 800d63c:	b002      	add	sp, #8
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	ab01      	add	r3, sp, #4
 800d642:	466a      	mov	r2, sp
 800d644:	f7ff ffc8 	bl	800d5d8 <__swhatbuf_r>
 800d648:	9900      	ldr	r1, [sp, #0]
 800d64a:	4605      	mov	r5, r0
 800d64c:	4630      	mov	r0, r6
 800d64e:	f7fe fecb 	bl	800c3e8 <_malloc_r>
 800d652:	b948      	cbnz	r0, 800d668 <__smakebuf_r+0x44>
 800d654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d658:	059a      	lsls	r2, r3, #22
 800d65a:	d4ef      	bmi.n	800d63c <__smakebuf_r+0x18>
 800d65c:	f023 0303 	bic.w	r3, r3, #3
 800d660:	f043 0302 	orr.w	r3, r3, #2
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	e7e3      	b.n	800d630 <__smakebuf_r+0xc>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	6020      	str	r0, [r4, #0]
 800d66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	9b00      	ldr	r3, [sp, #0]
 800d674:	6163      	str	r3, [r4, #20]
 800d676:	9b01      	ldr	r3, [sp, #4]
 800d678:	6120      	str	r0, [r4, #16]
 800d67a:	b15b      	cbz	r3, 800d694 <__smakebuf_r+0x70>
 800d67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d680:	4630      	mov	r0, r6
 800d682:	f000 f81d 	bl	800d6c0 <_isatty_r>
 800d686:	b128      	cbz	r0, 800d694 <__smakebuf_r+0x70>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f023 0303 	bic.w	r3, r3, #3
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	89a3      	ldrh	r3, [r4, #12]
 800d696:	431d      	orrs	r5, r3
 800d698:	81a5      	strh	r5, [r4, #12]
 800d69a:	e7cf      	b.n	800d63c <__smakebuf_r+0x18>

0800d69c <_fstat_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d07      	ldr	r5, [pc, #28]	; (800d6bc <_fstat_r+0x20>)
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	602b      	str	r3, [r5, #0]
 800d6aa:	f7f3 ff2e 	bl	800150a <_fstat>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	d102      	bne.n	800d6b8 <_fstat_r+0x1c>
 800d6b2:	682b      	ldr	r3, [r5, #0]
 800d6b4:	b103      	cbz	r3, 800d6b8 <_fstat_r+0x1c>
 800d6b6:	6023      	str	r3, [r4, #0]
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ba:	bf00      	nop
 800d6bc:	24000608 	.word	0x24000608

0800d6c0 <_isatty_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d06      	ldr	r5, [pc, #24]	; (800d6dc <_isatty_r+0x1c>)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	602b      	str	r3, [r5, #0]
 800d6cc:	f7f3 ff2d 	bl	800152a <_isatty>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_isatty_r+0x1a>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_isatty_r+0x1a>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	24000608 	.word	0x24000608

0800d6e0 <_init>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr

0800d6ec <_fini>:
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	bf00      	nop
 800d6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f2:	bc08      	pop	{r3}
 800d6f4:	469e      	mov	lr, r3
 800d6f6:	4770      	bx	lr
