
Old_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800f290  0800f290  0001f290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f6dc  0800f6dc  0001f6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f6e4  0800f6e4  0001f6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f6e8  0800f6e8  0001f6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  24000000  0800f6ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000534  240001d8  0800f8c4  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400070c  0800f8c4  0002070c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020eda  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000405e  00000000  00000000  00041123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c8  00000000  00000000  00045188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001255  00000000  00000000  00046950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b453  00000000  00000000  00047ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024b58  00000000  00000000  00082ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ad46  00000000  00000000  000a7b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000072f0  00000000  00000000  00222898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  00229b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f278 	.word	0x0800f278

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800f278 	.word	0x0800f278

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <IMU_send_cmd>:
#include "spi.h"
#include "usart.h"
#include "gpio.h"

HAL_StatusTypeDef IMU_send_cmd(IMU *IMU_struct, uint8_t TX[], uint8_t RX[], uint16_t length)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	807b      	strh	r3, [r7, #2]

	//Sends and Receives two bytes to the Sensor
	uint32_t Timeout = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
	uint8_t TXD = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	74bb      	strb	r3, [r7, #18]
	uint8_t RXD = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	747b      	strb	r3, [r7, #17]
	HAL_SPI_TransmitReceive(&IMU_struct->SPI_handler, &TXD, &RXD, 1, Timeout);//Dummy SPI read
 80006d6:	68f8      	ldr	r0, [r7, #12]
 80006d8:	f107 0211 	add.w	r2, r7, #17
 80006dc:	f107 0112 	add.w	r1, r7, #18
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	f008 fe3d 	bl	8009364 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(IMU_struct->GPIO_port, IMU_struct->GPIO_Pin, GPIO_PIN_RESET );//Setting CS Pin
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f005 f94b 	bl	8005994 <HAL_GPIO_WritePin>
	const HAL_StatusTypeDef return_Value = HAL_SPI_TransmitReceive(&IMU_struct->SPI_handler, TX, RX, length, Timeout);
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	887a      	ldrh	r2, [r7, #2]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	4613      	mov	r3, r2
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	f008 fe2a 	bl	8009364 <HAL_SPI_TransmitReceive>
 8000710:	4603      	mov	r3, r0
 8000712:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(IMU_struct->GPIO_port, IMU_struct->GPIO_Pin, GPIO_PIN_SET );//unsetting CS Pin
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f005 f936 	bl	8005994 <HAL_GPIO_WritePin>

	return return_Value;
 8000728:	7cfb      	ldrb	r3, [r7, #19]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <IMU_struct_set_up>:
uint8_t IMU2_new_data = 0;
uint8_t IMU1_SPI_IT_Finished = 0;
uint8_t IMU2_SPI_IT_Finished = 0;

void IMU_struct_set_up(IMU *IMU_struct, uint16_t accel_scale, uint16_t gyro_scale, uint16_t freq)
{
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	4608      	mov	r0, r1
 800073e:	4611      	mov	r1, r2
 8000740:	461a      	mov	r2, r3
 8000742:	4603      	mov	r3, r0
 8000744:	817b      	strh	r3, [r7, #10]
 8000746:	460b      	mov	r3, r1
 8000748:	813b      	strh	r3, [r7, #8]
 800074a:	4613      	mov	r3, r2
 800074c:	80fb      	strh	r3, [r7, #6]
	//For SPI communication
	//IMU_struct->SPI_handler = 0; IMU_struct->GPIO_port = 0;  IMU_struct->GPIO_Pin = 0;

	//Setting IMU data to zero
	for(int i=0; i>2; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	e021      	b.n	8000798 <IMU_struct_set_up+0x64>
	{
		IMU_struct->int_accel[i] = 0;
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3344      	adds	r3, #68	; 0x44
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	80da      	strh	r2, [r3, #6]
		IMU_struct->int_gyro[i] = 0;
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3348      	adds	r3, #72	; 0x48
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	2200      	movs	r2, #0
 800076e:	809a      	strh	r2, [r3, #4]

		IMU_struct->float_accel[i] = 0;
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	3328      	adds	r3, #40	; 0x28
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	f04f 0200 	mov.w	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
		IMU_struct->float_gyro[i] = 0;
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	332a      	adds	r3, #42	; 0x2a
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	3304      	adds	r3, #4
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
	for(int i=0; i>2; i++)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b02      	cmp	r3, #2
 800079c:	dcda      	bgt.n	8000754 <IMU_struct_set_up+0x20>
	}

	IMU_struct->int_temp = 0;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	IMU_struct->float_temp = 25;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4a69      	ldr	r2, [pc, #420]	; (8000950 <IMU_struct_set_up+0x21c>)
 80007aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	//New data indicator
	IMU_struct->new_data = 0;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

	//IMU scale values
	IMU_struct->scale_write_area = REG_accel_gyro_write_area;
 80007b6:	22e0      	movs	r2, #224	; 0xe0
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
	switch (accel_scale)
 80007be:	897b      	ldrh	r3, [r7, #10]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d82e      	bhi.n	8000824 <IMU_struct_set_up+0xf0>
 80007c6:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <IMU_struct_set_up+0x98>)
 80007c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	080007ef 	.word	0x080007ef
 80007d4:	08000801 	.word	0x08000801
 80007d8:	08000813 	.word	0x08000813
	{
	case scale_2g:
		IMU_struct->scale_accel = Scale_accel_2g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_2g; break;
 80007dc:	4a5d      	ldr	r2, [pc, #372]	; (8000954 <IMU_struct_set_up+0x220>)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007e4:	2260      	movs	r2, #96	; 0x60
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80007ec:	e023      	b.n	8000836 <IMU_struct_set_up+0x102>
	case scale_4g:
		IMU_struct->scale_accel = Scale_accel_4g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_4g; break;
 80007ee:	4a5a      	ldr	r2, [pc, #360]	; (8000958 <IMU_struct_set_up+0x224>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80007f6:	2240      	movs	r2, #64	; 0x40
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80007fe:	e01a      	b.n	8000836 <IMU_struct_set_up+0x102>
	case scale_8g:
		IMU_struct->scale_accel = Scale_accel_8g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_8g; break;
 8000800:	4a56      	ldr	r2, [pc, #344]	; (800095c <IMU_struct_set_up+0x228>)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000808:	2220      	movs	r2, #32
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8000810:	e011      	b.n	8000836 <IMU_struct_set_up+0x102>
	case scale_16g:
		IMU_struct->scale_accel = Scale_accel_16g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_16g; break;
 8000812:	4a53      	ldr	r2, [pc, #332]	; (8000960 <IMU_struct_set_up+0x22c>)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800081a:	2200      	movs	r2, #0
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8000822:	e008      	b.n	8000836 <IMU_struct_set_up+0x102>
	default: IMU_struct->scale_accel = Scale_accel_16g; IMU_struct->imu_cmd_accel_scale = REG_accel_scale_16g; break;
 8000824:	4a4e      	ldr	r2, [pc, #312]	; (8000960 <IMU_struct_set_up+0x22c>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800082c:	2200      	movs	r2, #0
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8000834:	bf00      	nop
	}

	switch (gyro_scale)
 8000836:	893b      	ldrh	r3, [r7, #8]
 8000838:	3b01      	subs	r3, #1
 800083a:	2b04      	cmp	r3, #4
 800083c:	d839      	bhi.n	80008b2 <IMU_struct_set_up+0x17e>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <IMU_struct_set_up+0x110>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000859 	.word	0x08000859
 8000848:	0800086b 	.word	0x0800086b
 800084c:	0800087d 	.word	0x0800087d
 8000850:	0800088f 	.word	0x0800088f
 8000854:	080008a1 	.word	0x080008a1
	{
	case scale_15dps:
		IMU_struct->scale_gyro = Scale_gyro_15dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_15dps; break;
 8000858:	4a42      	ldr	r2, [pc, #264]	; (8000964 <IMU_struct_set_up+0x230>)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000860:	22e0      	movs	r2, #224	; 0xe0
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8000868:	e02c      	b.n	80008c4 <IMU_struct_set_up+0x190>
	case scale_62dps:
		IMU_struct->scale_gyro = Scale_gyro_62dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_62dps; break;
 800086a:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <IMU_struct_set_up+0x234>)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000872:	22a0      	movs	r2, #160	; 0xa0
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800087a:	e023      	b.n	80008c4 <IMU_struct_set_up+0x190>
	case scale_250dps:
		IMU_struct->scale_gyro = Scale_gyro_250dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_250dps; break;
 800087c:	4a3b      	ldr	r2, [pc, #236]	; (800096c <IMU_struct_set_up+0x238>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000884:	2260      	movs	r2, #96	; 0x60
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800088c:	e01a      	b.n	80008c4 <IMU_struct_set_up+0x190>
	case scale_1000dps:
		IMU_struct->scale_gyro = Scale_gyro_1000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_1000dps; break;
 800088e:	4a38      	ldr	r2, [pc, #224]	; (8000970 <IMU_struct_set_up+0x23c>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000896:	2220      	movs	r2, #32
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 800089e:	e011      	b.n	80008c4 <IMU_struct_set_up+0x190>
	case scale_2000dps:
		IMU_struct->scale_gyro = Scale_gyro_2000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_2000dps; break;
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <IMU_struct_set_up+0x240>)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80008a8:	2200      	movs	r2, #0
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80008b0:	e008      	b.n	80008c4 <IMU_struct_set_up+0x190>
	default: IMU_struct->scale_gyro = Scale_gyro_2000dps; IMU_struct->imu_cmd_gyro_scale = REG_gyro_scale_2000dps; break;
 80008b2:	4a30      	ldr	r2, [pc, #192]	; (8000974 <IMU_struct_set_up+0x240>)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80008ba:	2200      	movs	r2, #0
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80008c2:	bf00      	nop
	}
	IMU_struct->scale_temp = Scale_temp;
 80008c4:	4a2c      	ldr	r2, [pc, #176]	; (8000978 <IMU_struct_set_up+0x244>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	switch (freq)
 80008cc:	88fb      	ldrh	r3, [r7, #6]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d82f      	bhi.n	8000934 <IMU_struct_set_up+0x200>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <IMU_struct_set_up+0x1a8>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	080008ed 	.word	0x080008ed
 80008e0:	080008ff 	.word	0x080008ff
 80008e4:	08000911 	.word	0x08000911
 80008e8:	08000923 	.word	0x08000923
	{
	case freq_1kHz:
		IMU_struct->freq = 1./1000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_1kHz; break;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <IMU_struct_set_up+0x248>)
 80008f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80008f4:	2206      	movs	r2, #6
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80008fc:	e01a      	b.n	8000934 <IMU_struct_set_up+0x200>
	case freq_4kHz:
		IMU_struct->freq = 1./4000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_4kHz; break;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <IMU_struct_set_up+0x24c>)
 8000902:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000906:	2204      	movs	r2, #4
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800090e:	e011      	b.n	8000934 <IMU_struct_set_up+0x200>
	case freq_16kHz:
		IMU_struct->freq = 1./16000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_16kHz; break;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <IMU_struct_set_up+0x250>)
 8000914:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8000918:	2203      	movs	r2, #3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8000920:	e008      	b.n	8000934 <IMU_struct_set_up+0x200>
	case freq_32kHz:
		IMU_struct->freq = 1./32000.; IMU_struct->imu_cmd_freq = REG_IMU_odr_32kHz; break;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <IMU_struct_set_up+0x254>)
 8000926:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800092a:	2201      	movs	r2, #1
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8000932:	bf00      	nop
	}

	IMU_struct->freq_write_area =  REG_odr_write_area;
 8000934:	220f      	movs	r2, #15
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5

	//Other data
	IMU_struct->timestamp = 0;//in micro seconds
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2200      	movs	r2, #0
 8000940:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
}
 8000944:	bf00      	nop
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	41c80000 	.word	0x41c80000
 8000954:	3f194800 	.word	0x3f194800
 8000958:	3f994800 	.word	0x3f994800
 800095c:	40195196 	.word	0x40195196
 8000960:	40994800 	.word	0x40994800
 8000964:	39f9fe89 	.word	0x39f9fe89
 8000968:	3af9fe89 	.word	0x3af9fe89
 800096c:	3bfa232d 	.word	0x3bfa232d
 8000970:	3cf9c190 	.word	0x3cf9c190
 8000974:	3d79c190 	.word	0x3d79c190
 8000978:	3bf757cf 	.word	0x3bf757cf
 800097c:	3a83126f 	.word	0x3a83126f
 8000980:	3983126f 	.word	0x3983126f
 8000984:	3883126f 	.word	0x3883126f
 8000988:	3803126f 	.word	0x3803126f

0800098c <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2224      	movs	r2, #36	; 0x24
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f00c fbf8 	bl	800d18e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009a0:	4a2f      	ldr	r2, [pc, #188]	; (8000a60 <MX_ADC3_Init+0xd4>)
 80009a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009a4:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009ac:	2208      	movs	r2, #8
 80009ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009be:	2204      	movs	r2, #4
 80009c0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_ADC3_Init+0xd0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_ADC3_Init+0xd0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_ADC3_Init+0xd0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a10:	4812      	ldr	r0, [pc, #72]	; (8000a5c <MX_ADC3_Init+0xd0>)
 8000a12:	f001 fc7d 	bl	8002310 <HAL_ADC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000a1c:	f000 fbca 	bl	80011b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_ADC3_Init+0xd8>)
 8000a22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a24:	2306      	movs	r3, #6
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a32:	2304      	movs	r3, #4
 8000a34:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_ADC3_Init+0xd0>)
 8000a44:	f001 fe6c 	bl	8002720 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000a4e:	f000 fbb1 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	240001f8 	.word	0x240001f8
 8000a60:	58026000 	.word	0x58026000
 8000a64:	c7520000 	.word	0xc7520000

08000a68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_ADC_MspInit+0x3c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10e      	bne.n	8000a98 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_ADC_MspInit+0x40>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <HAL_ADC_MspInit+0x40>)
 8000a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_ADC_MspInit+0x40>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	58026000 	.word	0x58026000
 8000aa8:	58024400 	.word	0x58024400

08000aac <MX_CORDIC_Init>:

/* USER CODE END 0 */

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_Init 0 */

  /* USER CODE END CORDIC_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_CORDIC_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_CORDIC_Init+0x30>)
 8000ab4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <MX_CORDIC_Init+0x30>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_CORDIC_Init+0x30>)
 8000ac4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aec:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_DMA_Init+0x4c>)
 8000af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	200b      	movs	r0, #11
 8000b0a:	f002 fcfe 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f002 fd15 	bl	800353e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	200c      	movs	r0, #12
 8000b1a:	f002 fcf6 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b1e:	200c      	movs	r0, #12
 8000b20:	f002 fd0d 	bl	800353e <HAL_NVIC_EnableIRQ>

}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58024400 	.word	0x58024400

08000b30 <MX_DTS_Init>:

DTS_HandleTypeDef hdts;

/* DTS init function */
void MX_DTS_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_DTS_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_15_CYCLE;
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b4e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000b52:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_DTS_Init+0x4c>)
 8000b68:	f004 fc08 	bl	800537c <HAL_DTS_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 fb1f 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	24000268 	.word	0x24000268
 8000b80:	58006800 	.word	0x58006800

08000b84 <HAL_DTS_MspInit>:

void HAL_DTS_MspInit(DTS_HandleTypeDef* dtsHandle)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  if(dtsHandle->Instance==DTS)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <HAL_DTS_MspInit+0x3c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d10e      	bne.n	8000bb4 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* DTS clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <HAL_DTS_MspInit+0x40>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9c:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_DTS_MspInit+0x40>)
 8000b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_DTS_MspInit+0x40>)
 8000ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	58006800 	.word	0x58006800
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b50      	ldr	r3, [pc, #320]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bee:	4b4c      	ldr	r3, [pc, #304]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b48      	ldr	r3, [pc, #288]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	4a47      	ldr	r2, [pc, #284]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0c:	4b44      	ldr	r3, [pc, #272]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	4a3f      	ldr	r2, [pc, #252]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	4a38      	ldr	r2, [pc, #224]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5c:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x158>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2110      	movs	r1, #16
 8000c78:	482a      	ldr	r0, [pc, #168]	; (8000d24 <MX_GPIO_Init+0x15c>)
 8000c7a:	f004 fe8b 	bl	8005994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO2_NSS_GPIO_Port, GYRO2_NSS_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	4828      	ldr	r0, [pc, #160]	; (8000d28 <MX_GPIO_Init+0x160>)
 8000c86:	f004 fe85 	bl	8005994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Druck_INT_Pin;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Druck_INT_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x160>)
 8000ca0:	f004 fcd0 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481c      	ldr	r0, [pc, #112]	; (8000d2c <MX_GPIO_Init+0x164>)
 8000cba:	f004 fcc3 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO1_NSS_Pin;
 8000cbe:	2310      	movs	r3, #16
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_GPIO_Init+0x15c>)
 8000cd6:	f004 fcb5 	bl	8005644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO2_NSS_Pin;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_GPIO_Init+0x160>)
 8000cf4:	f004 fca6 	bl	8005644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f002 fc04 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d02:	200a      	movs	r0, #10
 8000d04:	f002 fc1b 	bl	800353e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2017      	movs	r0, #23
 8000d0e:	f002 fbfc 	bl	800350a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d12:	2017      	movs	r0, #23
 8000d14:	f002 fc13 	bl	800353e <HAL_NVIC_EnableIRQ>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020000 	.word	0x58020000
 8000d28:	58020400 	.word	0x58020400
 8000d2c:	58020800 	.word	0x58020800

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d38:	f000 ffee 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3c:	f000 f936 	bl	8000fac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d40:	f000 f9a4 	bl	800108c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f7ff ff40 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d48:	f7ff feca 	bl	8000ae0 <MX_DMA_Init>
  MX_UART4_Init();
 8000d4c:	f000 ff04 	bl	8001b58 <MX_UART4_Init>
  MX_SPI2_Init();
 8000d50:	f000 fa8c 	bl	800126c <MX_SPI2_Init>
  MX_TIM4_Init();
 8000d54:	f000 fe0c 	bl	8001970 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d58:	f000 fdbc 	bl	80018d4 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000d5c:	f7ff fe16 	bl	800098c <MX_ADC3_Init>
  MX_DTS_Init();
 8000d60:	f7ff fee6 	bl	8000b30 <MX_DTS_Init>
  MX_CORDIC_Init();
 8000d64:	f7ff fea2 	bl	8000aac <MX_CORDIC_Init>
  MX_SPI1_Init();
 8000d68:	f000 fa2a 	bl	80011c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //UART Debuging prep
  uint8_t buffer[50];
  memset(buffer, 0, sizeof(buffer));
 8000d6c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8000d70:	2232      	movs	r2, #50	; 0x32
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00c fa0a 	bl	800d18e <memset>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Start USER LED
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	487c      	ldr	r0, [pc, #496]	; (8000f70 <main+0x240>)
 8000d7e:	f009 f8c9 	bl	8009f14 <HAL_TIM_PWM_Start>
  TIM4->CCR1 = 6874; // f ~ +2Hz
 8000d82:	4b7c      	ldr	r3, [pc, #496]	; (8000f74 <main+0x244>)
 8000d84:	f641 22da 	movw	r2, #6874	; 0x1ada
 8000d88:	635a      	str	r2, [r3, #52]	; 0x34

  //Starten des empfangens einer UART Nachricht
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart4, rxbuffer, sizeof(rxbuffer));

  HAL_DTS_Start(&hdts);//Starts the digital tempreture sensor
 8000d8a:	487b      	ldr	r0, [pc, #492]	; (8000f78 <main+0x248>)
 8000d8c:	f004 fb90 	bl	80054b0 <HAL_DTS_Start>

  //Initialisation of the IMU structs
  IMU IMU1_data;
  IMU_struct_set_up(&IMU1_data, IMU1_accel_scale, IMU1_gyro_scale, IMU1_freq);
 8000d90:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8000d94:	2302      	movs	r3, #2
 8000d96:	2201      	movs	r2, #1
 8000d98:	2102      	movs	r1, #2
 8000d9a:	f7ff fccb 	bl	8000734 <IMU_struct_set_up>
  IMU1_data.SPI_handler = hspi1;
 8000d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000da2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000da6:	4a75      	ldr	r2, [pc, #468]	; (8000f7c <main+0x24c>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	4611      	mov	r1, r2
 8000dac:	2388      	movs	r3, #136	; 0x88
 8000dae:	461a      	mov	r2, r3
 8000db0:	f00c fa6d 	bl	800d28e <memcpy>
  IMU1_data.GPIO_port = GYRO1_NSS_GPIO_Port;
 8000db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000dbc:	4a70      	ldr	r2, [pc, #448]	; (8000f80 <main+0x250>)
 8000dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  IMU1_data.GPIO_Pin = GYRO1_NSS_Pin;
 8000dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dc6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000dca:	2210      	movs	r2, #16
 8000dcc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

  IMU IMU2_data;
  IMU_struct_set_up(&IMU2_data, IMU2_accel_scale, IMU2_gyro_scale, IMU2_freq);
 8000dd0:	f107 000c 	add.w	r0, r7, #12
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	2104      	movs	r1, #4
 8000dda:	f7ff fcab 	bl	8000734 <IMU_struct_set_up>
  IMU2_data.SPI_handler = hspi2;
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000de6:	4a67      	ldr	r2, [pc, #412]	; (8000f84 <main+0x254>)
 8000de8:	4618      	mov	r0, r3
 8000dea:	4611      	mov	r1, r2
 8000dec:	2388      	movs	r3, #136	; 0x88
 8000dee:	461a      	mov	r2, r3
 8000df0:	f00c fa4d 	bl	800d28e <memcpy>
  IMU2_data.GPIO_port = GYRO2_NSS_GPIO_Port;
 8000df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000dfc:	4a62      	ldr	r2, [pc, #392]	; (8000f88 <main+0x258>)
 8000dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  IMU2_data.GPIO_Pin = GYRO2_NSS_Pin;
 8000e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e06:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0e:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e12:	2023      	movs	r0, #35	; 0x23
 8000e14:	f002 fb93 	bl	800353e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e18:	2024      	movs	r0, #36	; 0x24
 8000e1a:	f002 fb90 	bl	800353e <HAL_NVIC_EnableIRQ>

	uint16_t length = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	uint8_t TXData[2] = {117 | 0x80, 0}; // 0x80 results in a Read-operation
 8000e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e28:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8000e2c:	22f5      	movs	r2, #245	; 0xf5
 8000e2e:	801a      	strh	r2, [r3, #0]
	uint8_t RXData[2] = {0, 111};
 8000e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e38:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8000e3c:	801a      	strh	r2, [r3, #0]

	uint8_t ERROR_NOTICE = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	uint32_t SPI1_ERROR_COUNT = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	uint32_t SPI2_ERROR_COUNT = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	HAL_Delay(50);
 8000e50:	2032      	movs	r0, #50	; 0x32
 8000e52:	f000 fff3 	bl	8001e3c <HAL_Delay>
	int i = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RXData[1] = 25;
 8000e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e64:	2219      	movs	r2, #25
 8000e66:	705a      	strb	r2, [r3, #1]

	  if(IMU_send_cmd(&IMU1_data, TXData, RXData, length) != HAL_OK)
 8000e68:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8000e6c:	1d3a      	adds	r2, r7, #4
 8000e6e:	f107 0108 	add.w	r1, r7, #8
 8000e72:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8000e76:	f7ff fc21 	bl	80006bc <IMU_send_cmd>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <main+0x156>
	  {
		  debug_uart4_write_text("\nSPI1 HAL ERROR");
 8000e80:	4842      	ldr	r0, [pc, #264]	; (8000f8c <main+0x25c>)
 8000e82:	f000 f97b 	bl	800117c <debug_uart4_write_text>

		}*/



	  debug_uart4_write_text("\nWHO AM I (1): ");debug_uart4_write_int((int)RXData[1]);
 8000e86:	4842      	ldr	r0, [pc, #264]	; (8000f90 <main+0x260>)
 8000e88:	f000 f978 	bl	800117c <debug_uart4_write_text>
 8000e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f946 	bl	8001128 <debug_uart4_write_int>

	  if(RXData[1] != 71)
 8000e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea4:	785b      	ldrb	r3, [r3, #1]
 8000ea6:	2b47      	cmp	r3, #71	; 0x47
 8000ea8:	d007      	beq.n	8000eba <main+0x18a>
	  {
		  SPI1_ERROR_COUNT++;
 8000eaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
		  ERROR_NOTICE = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	  }

	  RXData[1] = 25;
 8000eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ec2:	2219      	movs	r2, #25
 8000ec4:	705a      	strb	r2, [r3, #1]

	  if(IMU_send_cmd(&IMU2_data, TXData, RXData, length) != HAL_OK)
 8000ec6:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8000eca:	1d3a      	adds	r2, r7, #4
 8000ecc:	f107 0108 	add.w	r1, r7, #8
 8000ed0:	f107 000c 	add.w	r0, r7, #12
 8000ed4:	f7ff fbf2 	bl	80006bc <IMU_send_cmd>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <main+0x1b4>
	  {
		  debug_uart4_write_text("\nSPI2 HAL ERROR");
 8000ede:	482d      	ldr	r0, [pc, #180]	; (8000f94 <main+0x264>)
 8000ee0:	f000 f94c 	bl	800117c <debug_uart4_write_text>
	  HAL_SPI_TransmitReceive_IT(&hspi2, TXData, RXData, length);
	  while(IMU2_SPI_IT_Finished == 0);
	  */


	  debug_uart4_write_text("; WHO AM I (2): ");debug_uart4_write_int((int)RXData[1]);
 8000ee4:	482c      	ldr	r0, [pc, #176]	; (8000f98 <main+0x268>)
 8000ee6:	f000 f949 	bl	800117c <debug_uart4_write_text>
 8000eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f917 	bl	8001128 <debug_uart4_write_int>

	  if(RXData[1] != 71)
 8000efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	2b47      	cmp	r3, #71	; 0x47
 8000f06:	d007      	beq.n	8000f18 <main+0x1e8>
	  {
		  SPI2_ERROR_COUNT++;
 8000f08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
		  ERROR_NOTICE = 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	  }

	  if(ERROR_NOTICE == 1)
 8000f18:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d112      	bne.n	8000f46 <main+0x216>
	  {
		  debug_uart4_write_text("  ");debug_uart4_write_int((int)SPI1_ERROR_COUNT);debug_uart4_write_text(" SPI1 errors, ");debug_uart4_write_int((int)SPI2_ERROR_COUNT);debug_uart4_write_text(" SPI2 errors");
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <main+0x26c>)
 8000f22:	f000 f92b 	bl	800117c <debug_uart4_write_text>
 8000f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f8fc 	bl	8001128 <debug_uart4_write_int>
 8000f30:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <main+0x270>)
 8000f32:	f000 f923 	bl	800117c <debug_uart4_write_text>
 8000f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f8f4 	bl	8001128 <debug_uart4_write_int>
 8000f40:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <main+0x274>)
 8000f42:	f000 f91b 	bl	800117c <debug_uart4_write_text>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Debug_send_Tempreture();
 8000f46:	f000 f8d3 	bl	80010f0 <Debug_send_Tempreture>
	  HAL_Delay(i);
 8000f4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 ff74 	bl	8001e3c <HAL_Delay>

	  debug_uart4_write_text("\n Delay length(ms): ");debug_uart4_write_int(i);
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <main+0x278>)
 8000f56:	f000 f911 	bl	800117c <debug_uart4_write_text>
 8000f5a:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8000f5e:	f000 f8e3 	bl	8001128 <debug_uart4_write_int>
	  i++;
 8000f62:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f66:	3301      	adds	r3, #1
 8000f68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	  RXData[1] = 25;
 8000f6c:	e776      	b.n	8000e5c <main+0x12c>
 8000f6e:	bf00      	nop
 8000f70:	240004dc 	.word	0x240004dc
 8000f74:	40000800 	.word	0x40000800
 8000f78:	24000268 	.word	0x24000268
 8000f7c:	2400028c 	.word	0x2400028c
 8000f80:	58020000 	.word	0x58020000
 8000f84:	24000314 	.word	0x24000314
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	0800f290 	.word	0x0800f290
 8000f90:	0800f2a0 	.word	0x0800f2a0
 8000f94:	0800f2b0 	.word	0x0800f2b0
 8000f98:	0800f2c0 	.word	0x0800f2c0
 8000f9c:	0800f2d4 	.word	0x0800f2d4
 8000fa0:	0800f2d8 	.word	0x0800f2d8
 8000fa4:	0800f2e8 	.word	0x0800f2e8
 8000fa8:	0800f2f8 	.word	0x0800f2f8

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09c      	sub	sp, #112	; 0x70
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	224c      	movs	r2, #76	; 0x4c
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00c f8e7 	bl	800d18e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00c f8e1 	bl	800d18e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f004 fd1f 	bl	8005a10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <SystemClock_Config+0xdc>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fde:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <SystemClock_Config+0xdc>)
 8000fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemClock_Config+0xdc>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff2:	bf00      	nop
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <SystemClock_Config+0xdc>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001000:	d1f8      	bne.n	8000ff4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001002:	2301      	movs	r3, #1
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001010:	2302      	movs	r3, #2
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8001018:	2325      	movs	r3, #37	; 0x25
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001020:	2305      	movs	r3, #5
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001024:	2302      	movs	r3, #2
 8001026:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001028:	230c      	movs	r3, #12
 800102a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800102c:	2300      	movs	r3, #0
 800102e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fd22 	bl	8005a84 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001046:	f000 f8b5 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	233f      	movs	r3, #63	; 0x3f
 800104c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2303      	movs	r3, #3
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001056:	2308      	movs	r3, #8
 8001058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001066:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001068:	2340      	movs	r3, #64	; 0x40
 800106a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f005 f8e1 	bl	8006238 <HAL_RCC_ClockConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800107c:	f000 f89a 	bl	80011b4 <Error_Handler>
  }
}
 8001080:	bf00      	nop
 8001082:	3770      	adds	r7, #112	; 0x70
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58024800 	.word	0x58024800

0800108c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ae      	sub	sp, #184	; 0xb8
 8001090:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	22b8      	movs	r2, #184	; 0xb8
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00c f878 	bl	800d18e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI2
 800109e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80010ae:	2318      	movs	r3, #24
 80010b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010be:	23c0      	movs	r3, #192	; 0xc0
 80010c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 fc39 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80010e4:	f000 f866 	bl	80011b4 <Error_Handler>
  }
}
 80010e8:	bf00      	nop
 80010ea:	37b8      	adds	r7, #184	; 0xb8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Debug_send_Tempreture>:

/* USER CODE BEGIN 4 */
void Debug_send_Tempreture(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	//Digital temperature sensor has to be enabeled before call
	int32_t Temperature;
	  debug_uart4_write_text("\nMCU temp: ");
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <Debug_send_Tempreture+0x2c>)
 80010f8:	f000 f840 	bl	800117c <debug_uart4_write_text>
	  HAL_DTS_GetTemperature(&hdts, &Temperature);//acquires a sensor reading
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <Debug_send_Tempreture+0x30>)
 8001102:	f004 fa22 	bl	800554a <HAL_DTS_GetTemperature>
	  debug_uart4_write_int((int)Temperature);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f80d 	bl	8001128 <debug_uart4_write_int>
	  debug_uart4_write_text("° \n");
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <Debug_send_Tempreture+0x34>)
 8001110:	f000 f834 	bl	800117c <debug_uart4_write_text>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800f310 	.word	0x0800f310
 8001120:	24000268 	.word	0x24000268
 8001124:	0800f31c 	.word	0x0800f31c

08001128 <debug_uart4_write_int>:

HAL_StatusTypeDef debug_uart4_write_int(int number)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	//Sends a number over UART
	char temp[15] = {0};
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(temp, "%d", number );
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	490a      	ldr	r1, [pc, #40]	; (8001174 <debug_uart4_write_int+0x4c>)
 800114a:	4618      	mov	r0, r3
 800114c:	f00b ffbc 	bl	800d0c8 <siprintf>
	if (HAL_UART_Transmit(&huart4, temp, 10, 10000) != HAL_OK)
 8001150:	f107 0108 	add.w	r1, r7, #8
 8001154:	f242 7310 	movw	r3, #10000	; 0x2710
 8001158:	220a      	movs	r2, #10
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <debug_uart4_write_int+0x50>)
 800115c:	f00a f89e 	bl	800b29c <HAL_UART_Transmit>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <debug_uart4_write_int+0x42>
	  {
	    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <debug_uart4_write_int+0x44>
	  }
	return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0800f324 	.word	0x0800f324
 8001178:	24000528 	.word	0x24000528

0800117c <debug_uart4_write_text>:

HAL_StatusTypeDef debug_uart4_write_text(char *pData)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	//Sends a text message over UART
	if (HAL_UART_Transmit(&huart4, pData, strlen(pData), 10000) != HAL_OK)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff f913 	bl	80003b0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <debug_uart4_write_text+0x34>)
 8001196:	f00a f881 	bl	800b29c <HAL_UART_Transmit>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <debug_uart4_write_text+0x28>
	{
	  return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <debug_uart4_write_text+0x2a>
	}
	return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24000528 	.word	0x24000528

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	e7fe      	b.n	80011bc <Error_Handler+0x8>
	...

080011c0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011c6:	4a28      	ldr	r2, [pc, #160]	; (8001268 <MX_SPI1_Init+0xa8>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011da:	2207      	movs	r2, #7
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_SPI1_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_SPI1_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_SPI1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001234:	2200      	movs	r2, #0
 8001236:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_SPI1_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_SPI1_Init+0xa4>)
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_SPI1_Init+0xa4>)
 8001252:	f007 ff63 	bl	800911c <HAL_SPI_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800125c:	f7ff ffaa 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2400028c 	.word	0x2400028c
 8001268:	40013000 	.word	0x40013000

0800126c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001272:	4a28      	ldr	r2, [pc, #160]	; (8001314 <MX_SPI2_Init+0xa8>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001278:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800127c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001286:	2207      	movs	r2, #7
 8001288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_SPI2_Init+0xa4>)
 800128c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001290:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_SPI2_Init+0xa4>)
 8001294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001298:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_SPI2_Init+0xa4>)
 800129c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_SPI2_Init+0xa4>)
 80012fe:	f007 ff0d 	bl	800911c <HAL_SPI_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001308:	f7ff ff54 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	24000314 	.word	0x24000314
 8001314:	40003800 	.word	0x40003800

08001318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_SPI_MspInit+0x1c8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	f040 8091 	bne.w	800145e <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133c:	4b69      	ldr	r3, [pc, #420]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800133e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001342:	4a68      	ldr	r2, [pc, #416]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800134c:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800134e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	4a60      	ldr	r2, [pc, #384]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GYRO1_SCK_Pin|GYRO1_MISO_Pin|GYRO1_MOSI_Pin;
 8001378:	23e0      	movs	r3, #224	; 0xe0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001388:	2305      	movs	r3, #5
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4855      	ldr	r0, [pc, #340]	; (80014e8 <HAL_SPI_MspInit+0x1d0>)
 8001394:	f004 f956 	bl	8005644 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 800139a:	4a55      	ldr	r2, [pc, #340]	; (80014f0 <HAL_SPI_MspInit+0x1d8>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013a0:	2225      	movs	r2, #37	; 0x25
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013aa:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b0:	4b4e      	ldr	r3, [pc, #312]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b8:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013c4:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ca:	4b48      	ldr	r3, [pc, #288]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013d6:	4845      	ldr	r0, [pc, #276]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013d8:	f002 f8cc 	bl	8003574 <HAL_DMA_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80013e2:	f7ff fee7 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a40      	ldr	r2, [pc, #256]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80013ec:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <HAL_SPI_MspInit+0x1d4>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 80013f4:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_SPI_MspInit+0x1e0>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80013f8:	4b3e      	ldr	r3, [pc, #248]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 80013fa:	2226      	movs	r2, #38	; 0x26
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001400:	2240      	movs	r2, #64	; 0x40
 8001402:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001430:	4830      	ldr	r0, [pc, #192]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001432:	f002 f89f 	bl	8003574 <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800143c:	f7ff feba 	bl	80011b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a2c      	ldr	r2, [pc, #176]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001444:	679a      	str	r2, [r3, #120]	; 0x78
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_SPI_MspInit+0x1dc>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2023      	movs	r0, #35	; 0x23
 8001452:	f002 f85a 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001456:	2023      	movs	r0, #35	; 0x23
 8001458:	f002 f871 	bl	800353e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800145c:	e03b      	b.n	80014d6 <HAL_SPI_MspInit+0x1be>
  else if(spiHandle->Instance==SPI2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_SPI_MspInit+0x1e4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d136      	bne.n	80014d6 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800146a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146e:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800147a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_SPI_MspInit+0x1cc>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYRO2_MOSI_Pin|GYRO2_MISO_Pin|GYRO2_SCK_Pin;
 80014a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b6:	2305      	movs	r3, #5
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <HAL_SPI_MspInit+0x1e8>)
 80014c2:	f004 f8bf 	bl	8005644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2024      	movs	r0, #36	; 0x24
 80014cc:	f002 f81d 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80014d0:	2024      	movs	r0, #36	; 0x24
 80014d2:	f002 f834 	bl	800353e <HAL_NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3730      	adds	r7, #48	; 0x30
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40013000 	.word	0x40013000
 80014e4:	58024400 	.word	0x58024400
 80014e8:	58020000 	.word	0x58020000
 80014ec:	2400039c 	.word	0x2400039c
 80014f0:	40020010 	.word	0x40020010
 80014f4:	24000414 	.word	0x24000414
 80014f8:	40020028 	.word	0x40020028
 80014fc:	40003800 	.word	0x40003800
 8001500:	58020400 	.word	0x58020400

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_MspInit+0x30>)
 800150c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001510:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x30>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x30>)
 800151c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58024400 	.word	0x58024400

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 fc3a 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Druck_INT_Pin);
 8001590:	2010      	movs	r0, #16
 8001592:	f004 fa18 	bl	80059c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	HAL_GPIO_WritePin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin, GPIO_PIN_RESET );
 80015a0:	2200      	movs	r2, #0
 80015a2:	2110      	movs	r1, #16
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <DMA1_Stream0_IRQHandler+0x20>)
 80015a6:	f004 f9f5 	bl	8005994 <HAL_GPIO_WritePin>
	IMU1_SPI_IT_Finished = 1;
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <DMA1_Stream0_IRQHandler+0x24>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <DMA1_Stream0_IRQHandler+0x28>)
 80015b2:	f002 fd7d 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	58020000 	.word	0x58020000
 80015c0:	240001f4 	.word	0x240001f4
 80015c4:	2400039c 	.word	0x2400039c

080015c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <DMA1_Stream1_IRQHandler+0x10>)
 80015ce:	f002 fd6f 	bl	80040b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000414 	.word	0x24000414

080015dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT1_Pin);
 80015e0:	2080      	movs	r0, #128	; 0x80
 80015e2:	f004 f9f0 	bl	80059c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM4_IRQHandler+0x10>)
 80015f2:	f008 fdab 	bl	800a14c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	240004dc 	.word	0x240004dc

08001600 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

	HAL_GPIO_WritePin(GYRO1_NSS_GPIO_Port, GYRO1_NSS_Pin, GPIO_PIN_RESET );
 8001604:	2200      	movs	r2, #0
 8001606:	2110      	movs	r1, #16
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <SPI1_IRQHandler+0x20>)
 800160a:	f004 f9c3 	bl	8005994 <HAL_GPIO_WritePin>
	IMU1_SPI_IT_Finished = 1;
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SPI1_IRQHandler+0x24>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
	//SPI_READ_INDICATOR = 1;

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <SPI1_IRQHandler+0x28>)
 8001616:	f008 f8c1 	bl	800979c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	58020000 	.word	0x58020000
 8001624:	240001f4 	.word	0x240001f4
 8001628:	2400028c 	.word	0x2400028c

0800162c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

	HAL_GPIO_WritePin(GYRO2_NSS_GPIO_Port, GYRO2_NSS_Pin, GPIO_PIN_RESET );
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <SPI2_IRQHandler+0x20>)
 8001638:	f004 f9ac 	bl	8005994 <HAL_GPIO_WritePin>
	IMU2_SPI_IT_Finished = 1;
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SPI2_IRQHandler+0x24>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <SPI2_IRQHandler+0x28>)
 8001644:	f008 f8aa 	bl	800979c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	58020400 	.word	0x58020400
 8001650:	240001f5 	.word	0x240001f5
 8001654:	24000314 	.word	0x24000314

08001658 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001672:	f00b fddf 	bl	800d234 <__errno>
 8001676:	4603      	mov	r3, r0
 8001678:	2216      	movs	r2, #22
 800167a:	601a      	str	r2, [r3, #0]
  return -1;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_exit>:

void _exit (int status)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ffe7 	bl	8001668 <_kill>
  while (1) {}    /* Make sure we hang here */
 800169a:	e7fe      	b.n	800169a <_exit+0x12>

0800169c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e00a      	b.n	80016c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ae:	f3af 8000 	nop.w
 80016b2:	4601      	mov	r1, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60ba      	str	r2, [r7, #8]
 80016ba:	b2ca      	uxtb	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf0      	blt.n	80016ae <_read+0x12>
  }

  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e009      	b.n	80016fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf1      	blt.n	80016e8 <_write+0x12>
  }
  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_close>:

int _close(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <_isatty>:

int _isatty(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f00b fd44 	bl	800d234 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	24050000 	.word	0x24050000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	2400048c 	.word	0x2400048c
 80017e0:	24000710 	.word	0x24000710

080017e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <SystemInit+0xd0>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <SystemInit+0xd0>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <SystemInit+0xd4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	2b06      	cmp	r3, #6
 8001802:	d807      	bhi.n	8001814 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <SystemInit+0xd4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 030f 	bic.w	r3, r3, #15
 800180c:	4a2a      	ldr	r2, [pc, #168]	; (80018b8 <SystemInit+0xd4>)
 800180e:	f043 0307 	orr.w	r3, r3, #7
 8001812:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <SystemInit+0xd8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <SystemInit+0xd8>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <SystemInit+0xd8>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <SystemInit+0xd8>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4924      	ldr	r1, [pc, #144]	; (80018bc <SystemInit+0xd8>)
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <SystemInit+0xdc>)
 800182e:	4013      	ands	r3, r2
 8001830:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <SystemInit+0xd4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d007      	beq.n	800184e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <SystemInit+0xd4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 030f 	bic.w	r3, r3, #15
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <SystemInit+0xd4>)
 8001848:	f043 0307 	orr.w	r3, r3, #7
 800184c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <SystemInit+0xd8>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <SystemInit+0xd8>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <SystemInit+0xd8>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <SystemInit+0xd8>)
 8001862:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <SystemInit+0xe0>)
 8001864:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <SystemInit+0xd8>)
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <SystemInit+0xe4>)
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <SystemInit+0xd8>)
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <SystemInit+0xe8>)
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <SystemInit+0xd8>)
 8001874:	2200      	movs	r2, #0
 8001876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <SystemInit+0xd8>)
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <SystemInit+0xe8>)
 800187c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <SystemInit+0xd8>)
 8001880:	2200      	movs	r2, #0
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <SystemInit+0xd8>)
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <SystemInit+0xe8>)
 8001888:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <SystemInit+0xd8>)
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <SystemInit+0xd8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <SystemInit+0xd8>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <SystemInit+0xd8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <SystemInit+0xec>)
 80018a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	52002000 	.word	0x52002000
 80018bc:	58024400 	.word	0x58024400
 80018c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80018c4:	02020200 	.word	0x02020200
 80018c8:	01ff0000 	.word	0x01ff0000
 80018cc:	01010280 	.word	0x01010280
 80018d0:	52004000 	.word	0x52004000

080018d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <MX_TIM3_Init+0x94>)
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <MX_TIM3_Init+0x98>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <MX_TIM3_Init+0x94>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <MX_TIM3_Init+0x94>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8593;
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <MX_TIM3_Init+0x94>)
 8001906:	f242 1291 	movw	r2, #8593	; 0x2191
 800190a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_TIM3_Init+0x94>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM3_Init+0x94>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <MX_TIM3_Init+0x94>)
 800191a:	f008 fa42 	bl	8009da2 <HAL_TIM_Base_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001924:	f7ff fc46 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800192e:	f107 0310 	add.w	r3, r7, #16
 8001932:	4619      	mov	r1, r3
 8001934:	480c      	ldr	r0, [pc, #48]	; (8001968 <MX_TIM3_Init+0x94>)
 8001936:	f008 fe3d 	bl	800a5b4 <HAL_TIM_ConfigClockSource>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001940:	f7ff fc38 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <MX_TIM3_Init+0x94>)
 8001952:	f009 fb99 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800195c:	f7ff fc2a 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	24000490 	.word	0x24000490
 800196c:	40000400 	.word	0x40000400

08001970 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019a4:	4a2d      	ldr	r2, [pc, #180]	; (8001a5c <MX_TIM4_Init+0xec>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 13749;
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019b8:	f243 52b5 	movw	r2, #13749	; 0x35b5
 80019bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019cc:	f008 f9e9 	bl	8009da2 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f7ff fbed 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019e8:	f008 fde4 	bl	800a5b4 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80019f2:	f7ff fbdf 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <MX_TIM4_Init+0xe8>)
 80019f8:	f008 fa2a 	bl	8009e50 <HAL_TIM_PWM_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001a02:	f7ff fbd7 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4810      	ldr	r0, [pc, #64]	; (8001a58 <MX_TIM4_Init+0xe8>)
 8001a16:	f009 fb37 	bl	800b088 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a20:	f7ff fbc8 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a24:	2360      	movs	r3, #96	; 0x60
 8001a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM4_Init+0xe8>)
 8001a3c:	f008 fca6 	bl	800a38c <HAL_TIM_PWM_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001a46:	f7ff fbb5 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM4_Init+0xe8>)
 8001a4c:	f000 f848 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	240004dc 	.word	0x240004dc
 8001a5c:	40000800 	.word	0x40000800

08001a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_TIM_Base_MspInit+0x74>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10f      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a78:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a90:	e01b      	b.n	8001aca <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_TIM_Base_MspInit+0x7c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d116      	bne.n	8001aca <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_TIM_Base_MspInit+0x78>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	201e      	movs	r0, #30
 8001ac0:	f001 fd23 	bl	800350a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ac4:	201e      	movs	r0, #30
 8001ac6:	f001 fd3a 	bl	800353e <HAL_NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	40000800 	.word	0x40000800

08001ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11f      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = USER_LED_Pin;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <HAL_TIM_MspPostInit+0x74>)
 8001b3e:	f003 fd81 	bl	8005644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40000800 	.word	0x40000800
 8001b50:	58024400 	.word	0x58024400
 8001b54:	58020c00 	.word	0x58020c00

08001b58 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <MX_UART4_Init+0x94>)
 8001b60:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 500000;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b64:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <MX_UART4_Init+0x98>)
 8001b66:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_UART4_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b9e:	4812      	ldr	r0, [pc, #72]	; (8001be8 <MX_UART4_Init+0x90>)
 8001ba0:	f009 fb2c 	bl	800b1fc <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8001baa:	f7ff fb03 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bae:	2100      	movs	r1, #0
 8001bb0:	480d      	ldr	r0, [pc, #52]	; (8001be8 <MX_UART4_Init+0x90>)
 8001bb2:	f00a fcc0 	bl	800c536 <HAL_UARTEx_SetTxFifoThreshold>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8001bbc:	f7ff fafa 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_UART4_Init+0x90>)
 8001bc4:	f00a fcf5 	bl	800c5b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8001bce:	f7ff faf1 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_UART4_Init+0x90>)
 8001bd4:	f00a fc76 	bl	800c4c4 <HAL_UARTEx_DisableFifoMode>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8001bde:	f7ff fae9 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	24000528 	.word	0x24000528
 8001bec:	40004c00 	.word	0x40004c00
 8001bf0:	0007a120 	.word	0x0007a120

08001bf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0b8      	sub	sp, #224	; 0xe0
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	22b8      	movs	r2, #184	; 0xb8
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00b faba 	bl	800d18e <memset>
  if(uartHandle->Instance==UART4)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_UART_MspInit+0xc4>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d145      	bne.n	8001cb0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c24:	f04f 0202 	mov.w	r2, #2
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fe88 	bl	8006950 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c46:	f7ff fab5 	bl	80011b4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c50:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_UART_MspInit+0xc8>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c86:	2303      	movs	r3, #3
 8001c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_UART_MspInit+0xcc>)
 8001cac:	f003 fcca 	bl	8005644 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	37e0      	adds	r7, #224	; 0xe0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40004c00 	.word	0x40004c00
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc8:	f7ff fd8c 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f00b faa5 	bl	800d240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff f81b 	bl	8000d30 <main>
  bx  lr
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cfc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d04:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001d08:	0800f6ec 	.word	0x0800f6ec
  ldr r2, =_sbss
 8001d0c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001d10:	2400070c 	.word	0x2400070c

08001d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC3_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f001 fbe8 	bl	80034f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d24:	f004 fc3e 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_Init+0x68>)
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	4913      	ldr	r1, [pc, #76]	; (8001d84 <HAL_Init+0x6c>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_Init+0x68>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_Init+0x6c>)
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_Init+0x70>)
 8001d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <HAL_Init+0x74>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	200f      	movs	r0, #15
 8001d64:	f000 f814 	bl	8001d90 <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e002      	b.n	8001d78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d72:	f7ff fbc7 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	58024400 	.word	0x58024400
 8001d84:	0800f32c 	.word	0x0800f32c
 8001d88:	24000004 	.word	0x24000004
 8001d8c:	24000000 	.word	0x24000000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_InitTick+0x60>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e021      	b.n	8001de8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <HAL_InitTick+0x64>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_InitTick+0x60>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fbcd 	bl	800355a <HAL_SYSTICK_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d80a      	bhi.n	8001de6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f001 fb97 	bl	800350a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <HAL_InitTick+0x68>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	2400000c 	.word	0x2400000c
 8001df4:	24000000 	.word	0x24000000
 8001df8:	24000008 	.word	0x24000008

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2400000c 	.word	0x2400000c
 8001e20:	240005bc 	.word	0x240005bc

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	240005bc 	.word	0x240005bc

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2400000c 	.word	0x2400000c

08001e84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3360      	adds	r3, #96	; 0x60
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <LL_ADC_SetOffset+0x60>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d10b      	bne.n	8001f28 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f26:	e00b      	b.n	8001f40 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	58026000 	.word	0x58026000

08001f50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3360      	adds	r3, #96	; 0x60
 8001f5e:	461a      	mov	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00e      	beq.n	8001fe2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3360      	adds	r3, #96	; 0x60
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	58026000 	.word	0x58026000

08001ff4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <LL_ADC_SetOffsetSaturation+0x40>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d10e      	bne.n	8002026 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	58026000 	.word	0x58026000

08002038 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <LL_ADC_SetOffsetSign+0x40>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d10e      	bne.n	800206a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3360      	adds	r3, #96	; 0x60
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	431a      	orrs	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	58026000 	.word	0x58026000

0800207c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3360      	adds	r3, #96	; 0x60
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <LL_ADC_SetOffsetState+0x50>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d108      	bne.n	80020b0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80020ae:	e007      	b.n	80020c0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	601a      	str	r2, [r3, #0]
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	58026000 	.word	0x58026000

080020d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3330      	adds	r3, #48	; 0x30
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	4413      	add	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	211f      	movs	r1, #31
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0e9b      	lsrs	r3, r3, #26
 8002108:	f003 011f 	and.w	r1, r3, #31
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	431a      	orrs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3314      	adds	r3, #20
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0e5b      	lsrs	r3, r3, #25
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0d1b      	lsrs	r3, r3, #20
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2107      	movs	r1, #7
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	401a      	ands	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0d1b      	lsrs	r3, r3, #20
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d115      	bne.n	80021c0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a0:	43db      	mvns	r3, r3
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0318 	and.w	r3, r3, #24
 80021aa:	4914      	ldr	r1, [pc, #80]	; (80021fc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80021ac:	40d9      	lsrs	r1, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	400b      	ands	r3, r1
 80021b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80021be:	e014      	b.n	80021ea <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0318 	and.w	r3, r3, #24
 80021d6:	4909      	ldr	r1, [pc, #36]	; (80021fc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80021d8:	40d9      	lsrs	r1, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	400b      	ands	r3, r1
 80021de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e2:	431a      	orrs	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	58026000 	.word	0x58026000
 80021fc:	000fffff 	.word	0x000fffff

08002200 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <LL_ADC_DisableDeepPowerDown+0x20>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6093      	str	r3, [r2, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	5fffffc0 	.word	0x5fffffc0

08002224 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <LL_ADC_EnableInternalRegulator+0x24>)
 800225a:	4013      	ands	r3, r2
 800225c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	6fffffc0 	.word	0x6fffffc0

08002274 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002288:	d101      	bne.n	800228e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_IsEnabled+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_IsEnabled+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d101      	bne.n	80022da <LL_ADC_REG_IsConversionOngoing+0x18>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d101      	bne.n	8002300 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1ee      	b.n	8002708 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	2b00      	cmp	r3, #0
 8002336:	d109      	bne.n	800234c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7fe fb95 	bl	8000a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff67 	bl	8002224 <LL_ADC_IsDeepPowerDownEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff4d 	bl	8002200 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff82 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d114      	bne.n	80023a0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff66 	bl	800224c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002380:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_ADC_Init+0x2ac>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	4a8e      	ldr	r2, [pc, #568]	; (80025c0 <HAL_ADC_Init+0x2b0>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	3301      	adds	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002392:	e002      	b.n	800239a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f9      	bne.n	8002394 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff65 	bl	8002274 <LL_ADC_IsInternalRegulatorEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	f043 0210 	orr.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff76 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f040 8188 	bne.w	80026f6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 8184 	bne.w	80026f6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff4a 	bl	800229c <LL_ADC_IsEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d136      	bne.n	800247c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_ADC_Init+0x2b4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_ADC_Init+0x112>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_ADC_Init+0x2b8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10e      	bne.n	8002440 <HAL_ADC_Init+0x130>
 8002422:	4868      	ldr	r0, [pc, #416]	; (80025c4 <HAL_ADC_Init+0x2b4>)
 8002424:	f7ff ff3a 	bl	800229c <LL_ADC_IsEnabled>
 8002428:	4604      	mov	r4, r0
 800242a:	4867      	ldr	r0, [pc, #412]	; (80025c8 <HAL_ADC_Init+0x2b8>)
 800242c:	f7ff ff36 	bl	800229c <LL_ADC_IsEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	4323      	orrs	r3, r4
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e008      	b.n	8002452 <HAL_ADC_Init+0x142>
 8002440:	4862      	ldr	r0, [pc, #392]	; (80025cc <HAL_ADC_Init+0x2bc>)
 8002442:	f7ff ff2b 	bl	800229c <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a5a      	ldr	r2, [pc, #360]	; (80025c4 <HAL_ADC_Init+0x2b4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_ADC_Init+0x15a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_ADC_Init+0x2b8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_ADC_Init+0x15e>
 800246a:	4a59      	ldr	r2, [pc, #356]	; (80025d0 <HAL_ADC_Init+0x2c0>)
 800246c:	e000      	b.n	8002470 <HAL_ADC_Init+0x160>
 800246e:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <HAL_ADC_Init+0x2c4>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff fd04 	bl	8001e84 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_ADC_Init+0x2bc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d129      	bne.n	80024da <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e5b      	ldrb	r3, [r3, #25]
 800248a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002490:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002496:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d013      	beq.n	80024c8 <HAL_ADC_Init+0x1b8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b0c      	cmp	r3, #12
 80024a6:	d00d      	beq.n	80024c4 <HAL_ADC_Init+0x1b4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b1c      	cmp	r3, #28
 80024ae:	d007      	beq.n	80024c0 <HAL_ADC_Init+0x1b0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b18      	cmp	r3, #24
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_Init+0x1ac>
 80024b8:	2318      	movs	r3, #24
 80024ba:	e006      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024bc:	2300      	movs	r3, #0
 80024be:	e004      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c0:	2310      	movs	r3, #16
 80024c2:	e002      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c4:	2308      	movs	r3, #8
 80024c6:	e000      	b.n	80024ca <HAL_ADC_Init+0x1ba>
 80024c8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80024ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
 80024d8:	e00e      	b.n	80024f8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7e5b      	ldrb	r3, [r3, #25]
 80024de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	045b      	lsls	r3, r3, #17
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a26      	ldr	r2, [pc, #152]	; (80025cc <HAL_ADC_Init+0x2bc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d115      	bne.n	8002562 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_ADC_Init+0x2c8>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	69b9      	ldr	r1, [r7, #24]
 8002546:	430b      	orrs	r3, r1
 8002548:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	e009      	b.n	8002576 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_ADC_Init+0x2cc>)
 800256a:	4013      	ands	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	69b9      	ldr	r1, [r7, #24]
 8002572:	430b      	orrs	r3, r1
 8002574:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fea1 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 8002580:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff feae 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 800258c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 808e 	bne.w	80026b2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 808a 	bne.w	80026b2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_ADC_Init+0x2bc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d11b      	bne.n	80025e0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7e1b      	ldrb	r3, [r3, #24]
 80025ac:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e018      	b.n	80025ee <HAL_ADC_Init+0x2de>
 80025bc:	24000000 	.word	0x24000000
 80025c0:	053e2d63 	.word	0x053e2d63
 80025c4:	40022000 	.word	0x40022000
 80025c8:	40022100 	.word	0x40022100
 80025cc:	58026000 	.word	0x58026000
 80025d0:	40022300 	.word	0x40022300
 80025d4:	58026300 	.word	0x58026300
 80025d8:	fff04007 	.word	0xfff04007
 80025dc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7e1b      	ldrb	r3, [r3, #24]
 80025e4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <HAL_ADC_Init+0x400>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	69b9      	ldr	r1, [r7, #24]
 80025fe:	430b      	orrs	r3, r1
 8002600:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002608:	2b01      	cmp	r3, #1
 800260a:	d137      	bne.n	800267c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <HAL_ADC_Init+0x404>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d116      	bne.n	800264a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691a      	ldr	r2, [r3, #16]
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_ADC_Init+0x408>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800263a:	430a      	orrs	r2, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	e020      	b.n	800268c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_ADC_Init+0x40c>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002658:	3a01      	subs	r2, #1
 800265a:	0411      	lsls	r1, r2, #16
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800266c:	430a      	orrs	r2, r1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	611a      	str	r2, [r3, #16]
 800267a:	e007      	b.n	800268c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_ADC_Init+0x404>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d002      	beq.n	80026b2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fd63 	bl	8003178 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f023 010f 	bic.w	r1, r3, #15
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
 80026d2:	e007      	b.n	80026e4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020f 	bic.w	r2, r2, #15
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	f023 0303 	bic.w	r3, r3, #3
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
 80026f4:	e007      	b.n	8002706 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f043 0210 	orr.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002706:	7ffb      	ldrb	r3, [r7, #31]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	ffffbffc 	.word	0xffffbffc
 8002714:	58026000 	.word	0x58026000
 8002718:	fc00f81f 	.word	0xfc00f81f
 800271c:	fc00f81e 	.word	0xfc00f81e

08002720 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b0b9      	sub	sp, #228	; 0xe4
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800273a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4aa9      	ldr	r2, [pc, #676]	; (80029e8 <HAL_ADC_ConfigChannel+0x2c8>)
 8002742:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x34>
 800274e:	2302      	movs	r3, #2
 8002750:	f000 bcfa 	b.w	8003148 <HAL_ADC_ConfigChannel+0xa28>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fdae 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 84de 	bne.w	800312a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a9e      	ldr	r2, [pc, #632]	; (80029ec <HAL_ADC_ConfigChannel+0x2cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d033      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x76>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	e01d      	b.n	80027d2 <HAL_ADC_ConfigChannel+0xb2>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80027ba:	2320      	movs	r3, #32
 80027bc:	e004      	b.n	80027c8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80027be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	2201      	movs	r2, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69d1      	ldr	r1, [r2, #28]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	430b      	orrs	r3, r1
 80027de:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f7ff fc6f 	bl	80020d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fd63 	bl	80022c2 <LL_ADC_REG_IsConversionOngoing>
 80027fc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fd6f 	bl	80022e8 <LL_ADC_INJ_IsConversionOngoing>
 800280a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800280e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 8270 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002818:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 826b 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	461a      	mov	r2, r3
 8002830:	f7ff fc7a 	bl	8002128 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6c      	ldr	r2, [pc, #432]	; (80029ec <HAL_ADC_ConfigChannel+0x2cc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10d      	bne.n	800285a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002858:	e032      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_ADC_ConfigChannel+0x2d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002866:	d10b      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x160>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	e01d      	b.n	80028bc <HAL_ADC_ConfigChannel+0x19c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10b      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x186>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	e00a      	b.n	80028bc <HAL_ADC_ConfigChannel+0x19c>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d048      	beq.n	800295a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6919      	ldr	r1, [r3, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028d8:	f7ff fb08 	bl	8001eec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_ADC_ConfigChannel+0x2cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d119      	bne.n	800291a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7ff fba0 	bl	8002038 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6919      	ldr	r1, [r3, #16]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1f0>
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x1f2>
 8002910:	2300      	movs	r3, #0
 8002912:	461a      	mov	r2, r3
 8002914:	f7ff fb6e 	bl	8001ff4 <LL_ADC_SetOffsetSaturation>
 8002918:	e1ee      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6919      	ldr	r1, [r3, #16]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x212>
 800292c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002930:	e000      	b.n	8002934 <HAL_ADC_ConfigChannel+0x214>
 8002932:	2300      	movs	r3, #0
 8002934:	461a      	mov	r2, r3
 8002936:	f7ff fb3b 	bl	8001fb0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6919      	ldr	r1, [r3, #16]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	7e1b      	ldrb	r3, [r3, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x230>
 800294a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294e:	e000      	b.n	8002952 <HAL_ADC_ConfigChannel+0x232>
 8002950:	2300      	movs	r3, #0
 8002952:	461a      	mov	r2, r3
 8002954:	f7ff fb12 	bl	8001f7c <LL_ADC_SetDataRightShift>
 8002958:	e1ce      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_ADC_ConfigChannel+0x2cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f040 8181 	bne.w	8002c68 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff faef 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x272>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fae4 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	e01e      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x2b0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fad9 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80029b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80029b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e004      	b.n	80029ce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80029c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x2d4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	e01e      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x306>
 80029e8:	47ff0000 	.word	0x47ff0000
 80029ec:	58026000 	.word	0x58026000
 80029f0:	5c001000 	.word	0x5c001000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e004      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d106      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fb22 	bl	800207c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fa86 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x344>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fa7b 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	0e9b      	lsrs	r3, r3, #26
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	e01e      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x382>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa70 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e004      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002a96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d105      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x39a>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	e018      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3cc>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ad2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e004      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fabf 	bl	800207c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fa23 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x40a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fa18 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	e01e      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x448>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fa0d 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x460>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	e014      	b.n	8002baa <HAL_ADC_ConfigChannel+0x48a>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e004      	b.n	8002baa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d106      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fa60 	bl	800207c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f9c4 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x4c8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2103      	movs	r1, #3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff f9b9 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 021f 	and.w	r2, r3, #31
 8002be6:	e017      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x4f8>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2103      	movs	r1, #3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff f9ae 	bl	8001f50 <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e003      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x510>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	e011      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x534>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c40:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e003      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d14f      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa0b 	bl	800207c <LL_ADC_SetOffsetState>
 8002c66:	e047      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	069b      	lsls	r3, r3, #26
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d107      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c8a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	069b      	lsls	r3, r3, #26
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cd2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	069b      	lsls	r3, r3, #26
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002cf6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff facd 	bl	800229c <LL_ADC_IsEnabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8219 	bne.w	800313c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7ff fa32 	bl	8002180 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4aa1      	ldr	r2, [pc, #644]	; (8002fa8 <HAL_ADC_ConfigChannel+0x888>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f040 812e 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x630>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	bf94      	ite	ls
 8002d48:	2301      	movls	r3, #1
 8002d4a:	2300      	movhi	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e019      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x664>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d60:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	bf94      	ite	ls
 8002d7e:	2301      	movls	r3, #1
 8002d80:	2300      	movhi	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d079      	beq.n	8002e7c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x684>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x6b0>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x6d0>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x700>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x726>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	051b      	lsls	r3, r3, #20
 8002e44:	e018      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x758>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e003      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	e07e      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d107      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x778>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	3301      	adds	r3, #1
 8002e90:	069b      	lsls	r3, r3, #26
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	e015      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x7a4>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	069b      	lsls	r3, r3, #26
 8002ec0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x7c4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	e017      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x7f4>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x820>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	3b1e      	subs	r3, #30
 8002f38:	051b      	lsls	r3, r3, #20
 8002f3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	e01b      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x858>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
  return result;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	051b      	lsls	r3, r3, #20
 8002f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6892      	ldr	r2, [r2, #8]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff f8d2 	bl	8002128 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f280 80d7 	bge.w	800313c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_ADC_ConfigChannel+0x88c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x882>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_ADC_ConfigChannel+0x890>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x898>
 8002fa2:	4b04      	ldr	r3, [pc, #16]	; (8002fb4 <HAL_ADC_ConfigChannel+0x894>)
 8002fa4:	e009      	b.n	8002fba <HAL_ADC_ConfigChannel+0x89a>
 8002fa6:	bf00      	nop
 8002fa8:	47ff0000 	.word	0x47ff0000
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022100 	.word	0x40022100
 8002fb4:	40022300 	.word	0x40022300
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <HAL_ADC_ConfigChannel+0xa30>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe ff88 	bl	8001ed0 <LL_ADC_GetCommonPathInternalCh>
 8002fc0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a62      	ldr	r2, [pc, #392]	; (8003154 <HAL_ADC_ConfigChannel+0xa34>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x8b8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a61      	ldr	r2, [pc, #388]	; (8003158 <HAL_ADC_ConfigChannel+0xa38>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x8d6>
 8002fd8:	485e      	ldr	r0, [pc, #376]	; (8003154 <HAL_ADC_ConfigChannel+0xa34>)
 8002fda:	f7ff f95f 	bl	800229c <LL_ADC_IsEnabled>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	485d      	ldr	r0, [pc, #372]	; (8003158 <HAL_ADC_ConfigChannel+0xa38>)
 8002fe2:	f7ff f95b 	bl	800229c <LL_ADC_IsEnabled>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4323      	orrs	r3, r4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e008      	b.n	8003008 <HAL_ADC_ConfigChannel+0x8e8>
 8002ff6:	4859      	ldr	r0, [pc, #356]	; (800315c <HAL_ADC_ConfigChannel+0xa3c>)
 8002ff8:	f7ff f950 	bl	800229c <LL_ADC_IsEnabled>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8084 	beq.w	8003116 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a53      	ldr	r2, [pc, #332]	; (8003160 <HAL_ADC_ConfigChannel+0xa40>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d132      	bne.n	800307e <HAL_ADC_ConfigChannel+0x95e>
 8003018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d12c      	bne.n	800307e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a4c      	ldr	r2, [pc, #304]	; (800315c <HAL_ADC_ConfigChannel+0xa3c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f040 8086 	bne.w	800313c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a47      	ldr	r2, [pc, #284]	; (8003154 <HAL_ADC_ConfigChannel+0xa34>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x924>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a46      	ldr	r2, [pc, #280]	; (8003158 <HAL_ADC_ConfigChannel+0xa38>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x928>
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_ADC_ConfigChannel+0xa44>)
 8003046:	e000      	b.n	800304a <HAL_ADC_ConfigChannel+0x92a>
 8003048:	4a41      	ldr	r2, [pc, #260]	; (8003150 <HAL_ADC_ConfigChannel+0xa30>)
 800304a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800304e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7fe ff28 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_ADC_ConfigChannel+0xa48>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	4a42      	ldr	r2, [pc, #264]	; (800316c <HAL_ADC_ConfigChannel+0xa4c>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	099b      	lsrs	r3, r3, #6
 8003068:	3301      	adds	r3, #1
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800306e:	e002      	b.n	8003076 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f9      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800307c:	e05e      	b.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a3b      	ldr	r2, [pc, #236]	; (8003170 <HAL_ADC_ConfigChannel+0xa50>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d120      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x9aa>
 8003088:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800308c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11a      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a30      	ldr	r2, [pc, #192]	; (800315c <HAL_ADC_ConfigChannel+0xa3c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d14e      	bne.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <HAL_ADC_ConfigChannel+0xa34>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_ADC_ConfigChannel+0x992>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <HAL_ADC_ConfigChannel+0xa38>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x996>
 80030b2:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <HAL_ADC_ConfigChannel+0xa44>)
 80030b4:	e000      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x998>
 80030b6:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_ADC_ConfigChannel+0xa30>)
 80030b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f7fe fef1 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030c8:	e038      	b.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a29      	ldr	r2, [pc, #164]	; (8003174 <HAL_ADC_ConfigChannel+0xa54>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d133      	bne.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
 80030d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d12d      	bne.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1d      	ldr	r2, [pc, #116]	; (800315c <HAL_ADC_ConfigChannel+0xa3c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d128      	bne.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a19      	ldr	r2, [pc, #100]	; (8003154 <HAL_ADC_ConfigChannel+0xa34>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x9de>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a17      	ldr	r2, [pc, #92]	; (8003158 <HAL_ADC_ConfigChannel+0xa38>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x9e2>
 80030fe:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_ADC_ConfigChannel+0xa44>)
 8003100:	e000      	b.n	8003104 <HAL_ADC_ConfigChannel+0x9e4>
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <HAL_ADC_ConfigChannel+0xa30>)
 8003104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7fe fecb 	bl	8001eaa <LL_ADC_SetCommonPathInternalCh>
 8003114:	e012      	b.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003128:	e008      	b.n	800313c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003144:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003148:	4618      	mov	r0, r3
 800314a:	37e4      	adds	r7, #228	; 0xe4
 800314c:	46bd      	mov	sp, r7
 800314e:	bd90      	pop	{r4, r7, pc}
 8003150:	58026300 	.word	0x58026300
 8003154:	40022000 	.word	0x40022000
 8003158:	40022100 	.word	0x40022100
 800315c:	58026000 	.word	0x58026000
 8003160:	c7520000 	.word	0xc7520000
 8003164:	40022300 	.word	0x40022300
 8003168:	24000000 	.word	0x24000000
 800316c:	053e2d63 	.word	0x053e2d63
 8003170:	c3210000 	.word	0xc3210000
 8003174:	cb840000 	.word	0xcb840000

08003178 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a6c      	ldr	r2, [pc, #432]	; (8003338 <ADC_ConfigureBoostMode+0x1c0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <ADC_ConfigureBoostMode+0x1c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6b      	ldr	r2, [pc, #428]	; (800333c <ADC_ConfigureBoostMode+0x1c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d109      	bne.n	80031a8 <ADC_ConfigureBoostMode+0x30>
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <ADC_ConfigureBoostMode+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <ADC_ConfigureBoostMode+0x42>
 80031a8:	4b66      	ldr	r3, [pc, #408]	; (8003344 <ADC_ConfigureBoostMode+0x1cc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01c      	beq.n	80031f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80031be:	f003 fb6b 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 80031c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031cc:	d010      	beq.n	80031f0 <ADC_ConfigureBoostMode+0x78>
 80031ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031d2:	d873      	bhi.n	80032bc <ADC_ConfigureBoostMode+0x144>
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d002      	beq.n	80031e0 <ADC_ConfigureBoostMode+0x68>
 80031da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031de:	d16d      	bne.n	80032bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60fb      	str	r3, [r7, #12]
        break;
 80031ee:	e068      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	60fb      	str	r3, [r7, #12]
        break;
 80031f6:	e064      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80031f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	f004 fd46 	bl	8007c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8003204:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800320e:	d051      	beq.n	80032b4 <ADC_ConfigureBoostMode+0x13c>
 8003210:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003214:	d854      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003216:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800321a:	d047      	beq.n	80032ac <ADC_ConfigureBoostMode+0x134>
 800321c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003220:	d84e      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003222:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003226:	d03d      	beq.n	80032a4 <ADC_ConfigureBoostMode+0x12c>
 8003228:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800322c:	d848      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800322e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003232:	d033      	beq.n	800329c <ADC_ConfigureBoostMode+0x124>
 8003234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003238:	d842      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800323a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800323e:	d029      	beq.n	8003294 <ADC_ConfigureBoostMode+0x11c>
 8003240:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003244:	d83c      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003246:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800324a:	d01a      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800324c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003250:	d836      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003252:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003256:	d014      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003258:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800325c:	d830      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800325e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003262:	d00e      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003268:	d82a      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 800326a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800326e:	d008      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 8003270:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003274:	d824      	bhi.n	80032c0 <ADC_ConfigureBoostMode+0x148>
 8003276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800327a:	d002      	beq.n	8003282 <ADC_ConfigureBoostMode+0x10a>
 800327c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003280:	d11e      	bne.n	80032c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0c9b      	lsrs	r3, r3, #18
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	60fb      	str	r3, [r7, #12]
        break;
 8003292:	e016      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
        break;
 800329a:	e012      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	60fb      	str	r3, [r7, #12]
        break;
 80032a2:	e00e      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	60fb      	str	r3, [r7, #12]
        break;
 80032aa:	e00a      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	09db      	lsrs	r3, r3, #7
 80032b0:	60fb      	str	r3, [r7, #12]
        break;
 80032b2:	e006      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	60fb      	str	r3, [r7, #12]
        break;
 80032ba:	e002      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80032c0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <ADC_ConfigureBoostMode+0x1d0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d808      	bhi.n	80032e2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80032e0:	e025      	b.n	800332e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a19      	ldr	r2, [pc, #100]	; (800334c <ADC_ConfigureBoostMode+0x1d4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d80a      	bhi.n	8003300 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fc:	609a      	str	r2, [r3, #8]
}
 80032fe:	e016      	b.n	800332e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <ADC_ConfigureBoostMode+0x1d8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d80a      	bhi.n	800331e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	609a      	str	r2, [r3, #8]
}
 800331c:	e007      	b.n	800332e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800332c:	609a      	str	r2, [r3, #8]
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40022000 	.word	0x40022000
 800333c:	40022100 	.word	0x40022100
 8003340:	40022300 	.word	0x40022300
 8003344:	58026300 	.word	0x58026300
 8003348:	005f5e10 	.word	0x005f5e10
 800334c:	00bebc20 	.word	0x00bebc20
 8003350:	017d7840 	.word	0x017d7840

08003354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003370:	4013      	ands	r3, r2
 8003372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <__NVIC_SetPriorityGrouping+0x44>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x40>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	05fa0000 	.word	0x05fa0000

0800339c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <__NVIC_GetPriorityGrouping+0x18>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	f003 0307 	and.w	r3, r3, #7
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80033c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	db0b      	blt.n	80033e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	f003 021f 	and.w	r2, r3, #31
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <__NVIC_EnableIRQ+0x38>)
 80033d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2001      	movs	r0, #1
 80033da:	fa00 f202 	lsl.w	r2, r0, r2
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100

080033f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	db0a      	blt.n	800341e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <__NVIC_SetPriority+0x4c>)
 800340e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	440b      	add	r3, r1
 8003418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800341c:	e00a      	b.n	8003434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4908      	ldr	r1, [pc, #32]	; (8003444 <__NVIC_SetPriority+0x50>)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	3b04      	subs	r3, #4
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	440b      	add	r3, r1
 8003432:	761a      	strb	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000e100 	.word	0xe000e100
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f1c3 0307 	rsb	r3, r3, #7
 8003462:	2b04      	cmp	r3, #4
 8003464:	bf28      	it	cs
 8003466:	2304      	movcs	r3, #4
 8003468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3304      	adds	r3, #4
 800346e:	2b06      	cmp	r3, #6
 8003470:	d902      	bls.n	8003478 <NVIC_EncodePriority+0x30>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3b03      	subs	r3, #3
 8003476:	e000      	b.n	800347a <NVIC_EncodePriority+0x32>
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800347c:	f04f 32ff 	mov.w	r2, #4294967295
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	401a      	ands	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003490:	f04f 31ff 	mov.w	r1, #4294967295
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43d9      	mvns	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	4313      	orrs	r3, r2
         );
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3724      	adds	r7, #36	; 0x24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d301      	bcc.n	80034c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c2:	2301      	movs	r3, #1
 80034c4:	e00f      	b.n	80034e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <SysTick_Config+0x40>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ce:	210f      	movs	r1, #15
 80034d0:	f04f 30ff 	mov.w	r0, #4294967295
 80034d4:	f7ff ff8e 	bl	80033f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Config+0x40>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034de:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <SysTick_Config+0x40>)
 80034e0:	2207      	movs	r2, #7
 80034e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff29 	bl	8003354 <__NVIC_SetPriorityGrouping>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	4603      	mov	r3, r0
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003518:	f7ff ff40 	bl	800339c <__NVIC_GetPriorityGrouping>
 800351c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7ff ff90 	bl	8003448 <NVIC_EncodePriority>
 8003528:	4602      	mov	r2, r0
 800352a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff5f 	bl	80033f4 <__NVIC_SetPriority>
}
 8003536:	bf00      	nop
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff33 	bl	80033b8 <__NVIC_EnableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ffa4 	bl	80034b0 <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800357c:	f7fe fc52 	bl	8001e24 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e312      	b.n	8003bb2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a66      	ldr	r2, [pc, #408]	; (800372c <HAL_DMA_Init+0x1b8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d04a      	beq.n	800362c <HAL_DMA_Init+0xb8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_DMA_Init+0x1bc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d045      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a63      	ldr	r2, [pc, #396]	; (8003734 <HAL_DMA_Init+0x1c0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d040      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a62      	ldr	r2, [pc, #392]	; (8003738 <HAL_DMA_Init+0x1c4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d03b      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a60      	ldr	r2, [pc, #384]	; (800373c <HAL_DMA_Init+0x1c8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d036      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5f      	ldr	r2, [pc, #380]	; (8003740 <HAL_DMA_Init+0x1cc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d031      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a5d      	ldr	r2, [pc, #372]	; (8003744 <HAL_DMA_Init+0x1d0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d02c      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_DMA_Init+0x1d4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d027      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5a      	ldr	r2, [pc, #360]	; (800374c <HAL_DMA_Init+0x1d8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d022      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a59      	ldr	r2, [pc, #356]	; (8003750 <HAL_DMA_Init+0x1dc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d01d      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a57      	ldr	r2, [pc, #348]	; (8003754 <HAL_DMA_Init+0x1e0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d018      	beq.n	800362c <HAL_DMA_Init+0xb8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a56      	ldr	r2, [pc, #344]	; (8003758 <HAL_DMA_Init+0x1e4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_DMA_Init+0xb8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a54      	ldr	r2, [pc, #336]	; (800375c <HAL_DMA_Init+0x1e8>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_DMA_Init+0xb8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a53      	ldr	r2, [pc, #332]	; (8003760 <HAL_DMA_Init+0x1ec>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_DMA_Init+0xb8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a51      	ldr	r2, [pc, #324]	; (8003764 <HAL_DMA_Init+0x1f0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_DMA_Init+0xb8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a50      	ldr	r2, [pc, #320]	; (8003768 <HAL_DMA_Init+0x1f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_DMA_Init+0xbc>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_DMA_Init+0xbe>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 813c 	beq.w	80038b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a37      	ldr	r2, [pc, #220]	; (800372c <HAL_DMA_Init+0x1b8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d04a      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a36      	ldr	r2, [pc, #216]	; (8003730 <HAL_DMA_Init+0x1bc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d045      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a34      	ldr	r2, [pc, #208]	; (8003734 <HAL_DMA_Init+0x1c0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d040      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a33      	ldr	r2, [pc, #204]	; (8003738 <HAL_DMA_Init+0x1c4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d03b      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_DMA_Init+0x1c8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d036      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_DMA_Init+0x1cc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d031      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <HAL_DMA_Init+0x1d0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2d      	ldr	r2, [pc, #180]	; (8003748 <HAL_DMA_Init+0x1d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2b      	ldr	r2, [pc, #172]	; (800374c <HAL_DMA_Init+0x1d8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2a      	ldr	r2, [pc, #168]	; (8003750 <HAL_DMA_Init+0x1dc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d01d      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_DMA_Init+0x1e0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a27      	ldr	r2, [pc, #156]	; (8003758 <HAL_DMA_Init+0x1e4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <HAL_DMA_Init+0x1e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a24      	ldr	r2, [pc, #144]	; (8003760 <HAL_DMA_Init+0x1ec>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMA_Init+0x1f0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Init+0x174>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_DMA_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d108      	bne.n	80036fa <HAL_DMA_Init+0x186>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e007      	b.n	800370a <HAL_DMA_Init+0x196>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800370a:	e02f      	b.n	800376c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370c:	f7fe fb8a 	bl	8001e24 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b05      	cmp	r3, #5
 8003718:	d928      	bls.n	800376c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2203      	movs	r2, #3
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e242      	b.n	8003bb2 <HAL_DMA_Init+0x63e>
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1c8      	bne.n	800370c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4b83      	ldr	r3, [pc, #524]	; (8003994 <HAL_DMA_Init+0x420>)
 8003786:	4013      	ands	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003792:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	4313      	orrs	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b28      	cmp	r3, #40	; 0x28
 80037d6:	d903      	bls.n	80037e0 <HAL_DMA_Init+0x26c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b2e      	cmp	r3, #46	; 0x2e
 80037de:	d91f      	bls.n	8003820 <HAL_DMA_Init+0x2ac>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b3e      	cmp	r3, #62	; 0x3e
 80037e6:	d903      	bls.n	80037f0 <HAL_DMA_Init+0x27c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b42      	cmp	r3, #66	; 0x42
 80037ee:	d917      	bls.n	8003820 <HAL_DMA_Init+0x2ac>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b46      	cmp	r3, #70	; 0x46
 80037f6:	d903      	bls.n	8003800 <HAL_DMA_Init+0x28c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b48      	cmp	r3, #72	; 0x48
 80037fe:	d90f      	bls.n	8003820 <HAL_DMA_Init+0x2ac>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b4e      	cmp	r3, #78	; 0x4e
 8003806:	d903      	bls.n	8003810 <HAL_DMA_Init+0x29c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b52      	cmp	r3, #82	; 0x52
 800380e:	d907      	bls.n	8003820 <HAL_DMA_Init+0x2ac>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b73      	cmp	r3, #115	; 0x73
 8003816:	d905      	bls.n	8003824 <HAL_DMA_Init+0x2b0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b77      	cmp	r3, #119	; 0x77
 800381e:	d801      	bhi.n	8003824 <HAL_DMA_Init+0x2b0>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <HAL_DMA_Init+0x2b2>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	2b04      	cmp	r3, #4
 800385a:	d117      	bne.n	800388c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00e      	beq.n	800388c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 fbfa 	bl	8005068 <DMA_CheckFifoParam>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e192      	b.n	8003bb2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 fb35 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 800389a:	4603      	mov	r3, r0
 800389c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	223f      	movs	r2, #63	; 0x3f
 80038a8:	409a      	lsls	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	e0c8      	b.n	8003a42 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a38      	ldr	r2, [pc, #224]	; (8003998 <HAL_DMA_Init+0x424>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a37      	ldr	r2, [pc, #220]	; (800399c <HAL_DMA_Init+0x428>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d01d      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a35      	ldr	r2, [pc, #212]	; (80039a0 <HAL_DMA_Init+0x42c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <HAL_DMA_Init+0x430>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <HAL_DMA_Init+0x434>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a31      	ldr	r2, [pc, #196]	; (80039ac <HAL_DMA_Init+0x438>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_DMA_Init+0x43c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_DMA_Init+0x38c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <HAL_DMA_Init+0x440>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_DMA_Init+0x390>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_DMA_Init+0x392>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8092 	beq.w	8003a30 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a21      	ldr	r2, [pc, #132]	; (8003998 <HAL_DMA_Init+0x424>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d021      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_DMA_Init+0x428>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d01c      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_DMA_Init+0x42c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d017      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_DMA_Init+0x430>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d012      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_DMA_Init+0x434>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_DMA_Init+0x438>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d008      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <HAL_DMA_Init+0x43c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d003      	beq.n	800395a <HAL_DMA_Init+0x3e6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_DMA_Init+0x440>)
 8003958:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_DMA_Init+0x444>)
 8003976:	4013      	ands	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d01c      	beq.n	80039bc <HAL_DMA_Init+0x448>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d102      	bne.n	8003990 <HAL_DMA_Init+0x41c>
 800398a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800398e:	e016      	b.n	80039be <HAL_DMA_Init+0x44a>
 8003990:	2300      	movs	r3, #0
 8003992:	e014      	b.n	80039be <HAL_DMA_Init+0x44a>
 8003994:	fe10803f 	.word	0xfe10803f
 8003998:	58025408 	.word	0x58025408
 800399c:	5802541c 	.word	0x5802541c
 80039a0:	58025430 	.word	0x58025430
 80039a4:	58025444 	.word	0x58025444
 80039a8:	58025458 	.word	0x58025458
 80039ac:	5802546c 	.word	0x5802546c
 80039b0:	58025480 	.word	0x58025480
 80039b4:	58025494 	.word	0x58025494
 80039b8:	fffe000f 	.word	0xfffe000f
 80039bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b6e      	ldr	r3, [pc, #440]	; (8003bbc <HAL_DMA_Init+0x648>)
 8003a04:	4413      	add	r3, r2
 8003a06:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_DMA_Init+0x64c>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f001 fa75 	bl	8004f04 <DMA_CalcBaseAndBitshift>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2201      	movs	r2, #1
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e008      	b.n	8003a42 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0b7      	b.n	8003bb2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a5f      	ldr	r2, [pc, #380]	; (8003bc4 <HAL_DMA_Init+0x650>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d072      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5d      	ldr	r2, [pc, #372]	; (8003bc8 <HAL_DMA_Init+0x654>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d06d      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a5c      	ldr	r2, [pc, #368]	; (8003bcc <HAL_DMA_Init+0x658>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d068      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5a      	ldr	r2, [pc, #360]	; (8003bd0 <HAL_DMA_Init+0x65c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d063      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a59      	ldr	r2, [pc, #356]	; (8003bd4 <HAL_DMA_Init+0x660>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d05e      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a57      	ldr	r2, [pc, #348]	; (8003bd8 <HAL_DMA_Init+0x664>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d059      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a56      	ldr	r2, [pc, #344]	; (8003bdc <HAL_DMA_Init+0x668>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d054      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <HAL_DMA_Init+0x66c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d04f      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a53      	ldr	r2, [pc, #332]	; (8003be4 <HAL_DMA_Init+0x670>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04a      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a51      	ldr	r2, [pc, #324]	; (8003be8 <HAL_DMA_Init+0x674>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a50      	ldr	r2, [pc, #320]	; (8003bec <HAL_DMA_Init+0x678>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4e      	ldr	r2, [pc, #312]	; (8003bf0 <HAL_DMA_Init+0x67c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d03b      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <HAL_DMA_Init+0x680>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d036      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a4b      	ldr	r2, [pc, #300]	; (8003bf8 <HAL_DMA_Init+0x684>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d031      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	; (8003bfc <HAL_DMA_Init+0x688>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02c      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a48      	ldr	r2, [pc, #288]	; (8003c00 <HAL_DMA_Init+0x68c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d027      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <HAL_DMA_Init+0x690>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a45      	ldr	r2, [pc, #276]	; (8003c08 <HAL_DMA_Init+0x694>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a44      	ldr	r2, [pc, #272]	; (8003c0c <HAL_DMA_Init+0x698>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	; (8003c10 <HAL_DMA_Init+0x69c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a41      	ldr	r2, [pc, #260]	; (8003c14 <HAL_DMA_Init+0x6a0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3f      	ldr	r2, [pc, #252]	; (8003c18 <HAL_DMA_Init+0x6a4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3e      	ldr	r2, [pc, #248]	; (8003c1c <HAL_DMA_Init+0x6a8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_DMA_Init+0x5be>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <HAL_DMA_Init+0x6ac>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_DMA_Init+0x5c2>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_DMA_Init+0x5c4>
 8003b36:	2300      	movs	r3, #0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d032      	beq.n	8003ba2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f001 fb0f 	bl	8005160 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d102      	bne.n	8003b50 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_DMA_Init+0x61c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d80c      	bhi.n	8003b90 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 fb8c 	bl	8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e008      	b.n	8003ba2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	a7fdabf8 	.word	0xa7fdabf8
 8003bc0:	cccccccd 	.word	0xcccccccd
 8003bc4:	40020010 	.word	0x40020010
 8003bc8:	40020028 	.word	0x40020028
 8003bcc:	40020040 	.word	0x40020040
 8003bd0:	40020058 	.word	0x40020058
 8003bd4:	40020070 	.word	0x40020070
 8003bd8:	40020088 	.word	0x40020088
 8003bdc:	400200a0 	.word	0x400200a0
 8003be0:	400200b8 	.word	0x400200b8
 8003be4:	40020410 	.word	0x40020410
 8003be8:	40020428 	.word	0x40020428
 8003bec:	40020440 	.word	0x40020440
 8003bf0:	40020458 	.word	0x40020458
 8003bf4:	40020470 	.word	0x40020470
 8003bf8:	40020488 	.word	0x40020488
 8003bfc:	400204a0 	.word	0x400204a0
 8003c00:	400204b8 	.word	0x400204b8
 8003c04:	58025408 	.word	0x58025408
 8003c08:	5802541c 	.word	0x5802541c
 8003c0c:	58025430 	.word	0x58025430
 8003c10:	58025444 	.word	0x58025444
 8003c14:	58025458 	.word	0x58025458
 8003c18:	5802546c 	.word	0x5802546c
 8003c1c:	58025480 	.word	0x58025480
 8003c20:	58025494 	.word	0x58025494

08003c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e237      	b.n	80040a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e22c      	b.n	80040a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5c      	ldr	r2, [pc, #368]	; (8003dc4 <HAL_DMA_Abort_IT+0x1a0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d04a      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5b      	ldr	r2, [pc, #364]	; (8003dc8 <HAL_DMA_Abort_IT+0x1a4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d045      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a59      	ldr	r2, [pc, #356]	; (8003dcc <HAL_DMA_Abort_IT+0x1a8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d040      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_DMA_Abort_IT+0x1ac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d03b      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a56      	ldr	r2, [pc, #344]	; (8003dd4 <HAL_DMA_Abort_IT+0x1b0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d036      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a55      	ldr	r2, [pc, #340]	; (8003dd8 <HAL_DMA_Abort_IT+0x1b4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d031      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a53      	ldr	r2, [pc, #332]	; (8003ddc <HAL_DMA_Abort_IT+0x1b8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02c      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a52      	ldr	r2, [pc, #328]	; (8003de0 <HAL_DMA_Abort_IT+0x1bc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d027      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_DMA_Abort_IT+0x1c0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d022      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_DMA_Abort_IT+0x1c4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d01d      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	; (8003dec <HAL_DMA_Abort_IT+0x1c8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d018      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a4c      	ldr	r2, [pc, #304]	; (8003df0 <HAL_DMA_Abort_IT+0x1cc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_DMA_Abort_IT+0x1d0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a49      	ldr	r2, [pc, #292]	; (8003df8 <HAL_DMA_Abort_IT+0x1d4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a47      	ldr	r2, [pc, #284]	; (8003dfc <HAL_DMA_Abort_IT+0x1d8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_Abort_IT+0xc8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a46      	ldr	r2, [pc, #280]	; (8003e00 <HAL_DMA_Abort_IT+0x1dc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_DMA_Abort_IT+0xcc>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_Abort_IT+0xce>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8086 	beq.w	8003e04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <HAL_DMA_Abort_IT+0x1a0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d04a      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2e      	ldr	r2, [pc, #184]	; (8003dc8 <HAL_DMA_Abort_IT+0x1a4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d045      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_DMA_Abort_IT+0x1a8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d040      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_DMA_Abort_IT+0x1ac>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03b      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <HAL_DMA_Abort_IT+0x1b0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d036      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <HAL_DMA_Abort_IT+0x1b4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d031      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a26      	ldr	r2, [pc, #152]	; (8003ddc <HAL_DMA_Abort_IT+0x1b8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02c      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_DMA_Abort_IT+0x1bc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d027      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_DMA_Abort_IT+0x1c0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d022      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_DMA_Abort_IT+0x1c4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01d      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <HAL_DMA_Abort_IT+0x1c8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d018      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <HAL_DMA_Abort_IT+0x1cc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_DMA_Abort_IT+0x1d0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00e      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_DMA_Abort_IT+0x1d4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_DMA_Abort_IT+0x1d8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x17c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a19      	ldr	r2, [pc, #100]	; (8003e00 <HAL_DMA_Abort_IT+0x1dc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d108      	bne.n	8003db2 <HAL_DMA_Abort_IT+0x18e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e178      	b.n	80040a4 <HAL_DMA_Abort_IT+0x480>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	e16f      	b.n	80040a4 <HAL_DMA_Abort_IT+0x480>
 8003dc4:	40020010 	.word	0x40020010
 8003dc8:	40020028 	.word	0x40020028
 8003dcc:	40020040 	.word	0x40020040
 8003dd0:	40020058 	.word	0x40020058
 8003dd4:	40020070 	.word	0x40020070
 8003dd8:	40020088 	.word	0x40020088
 8003ddc:	400200a0 	.word	0x400200a0
 8003de0:	400200b8 	.word	0x400200b8
 8003de4:	40020410 	.word	0x40020410
 8003de8:	40020428 	.word	0x40020428
 8003dec:	40020440 	.word	0x40020440
 8003df0:	40020458 	.word	0x40020458
 8003df4:	40020470 	.word	0x40020470
 8003df8:	40020488 	.word	0x40020488
 8003dfc:	400204a0 	.word	0x400204a0
 8003e00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020e 	bic.w	r2, r2, #14
 8003e12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6c      	ldr	r2, [pc, #432]	; (8003fcc <HAL_DMA_Abort_IT+0x3a8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04a      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6b      	ldr	r2, [pc, #428]	; (8003fd0 <HAL_DMA_Abort_IT+0x3ac>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d045      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a69      	ldr	r2, [pc, #420]	; (8003fd4 <HAL_DMA_Abort_IT+0x3b0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a68      	ldr	r2, [pc, #416]	; (8003fd8 <HAL_DMA_Abort_IT+0x3b4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a66      	ldr	r2, [pc, #408]	; (8003fdc <HAL_DMA_Abort_IT+0x3b8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d036      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a65      	ldr	r2, [pc, #404]	; (8003fe0 <HAL_DMA_Abort_IT+0x3bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d031      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a63      	ldr	r2, [pc, #396]	; (8003fe4 <HAL_DMA_Abort_IT+0x3c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a62      	ldr	r2, [pc, #392]	; (8003fe8 <HAL_DMA_Abort_IT+0x3c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a60      	ldr	r2, [pc, #384]	; (8003fec <HAL_DMA_Abort_IT+0x3c8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a5f      	ldr	r2, [pc, #380]	; (8003ff0 <HAL_DMA_Abort_IT+0x3cc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5d      	ldr	r2, [pc, #372]	; (8003ff4 <HAL_DMA_Abort_IT+0x3d0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5c      	ldr	r2, [pc, #368]	; (8003ff8 <HAL_DMA_Abort_IT+0x3d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a5a      	ldr	r2, [pc, #360]	; (8003ffc <HAL_DMA_Abort_IT+0x3d8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a59      	ldr	r2, [pc, #356]	; (8004000 <HAL_DMA_Abort_IT+0x3dc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_DMA_Abort_IT+0x3e0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x290>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_DMA_Abort_IT+0x3e4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <HAL_DMA_Abort_IT+0x2a2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e007      	b.n	8003ed6 <HAL_DMA_Abort_IT+0x2b2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <HAL_DMA_Abort_IT+0x3a8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d072      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <HAL_DMA_Abort_IT+0x3ac>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d06d      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a39      	ldr	r2, [pc, #228]	; (8003fd4 <HAL_DMA_Abort_IT+0x3b0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d068      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <HAL_DMA_Abort_IT+0x3b4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d063      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a36      	ldr	r2, [pc, #216]	; (8003fdc <HAL_DMA_Abort_IT+0x3b8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d05e      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a34      	ldr	r2, [pc, #208]	; (8003fe0 <HAL_DMA_Abort_IT+0x3bc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d059      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <HAL_DMA_Abort_IT+0x3c0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d054      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_DMA_Abort_IT+0x3c4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d04f      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a30      	ldr	r2, [pc, #192]	; (8003fec <HAL_DMA_Abort_IT+0x3c8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04a      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a2e      	ldr	r2, [pc, #184]	; (8003ff0 <HAL_DMA_Abort_IT+0x3cc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d045      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a2d      	ldr	r2, [pc, #180]	; (8003ff4 <HAL_DMA_Abort_IT+0x3d0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d040      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_DMA_Abort_IT+0x3d4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d03b      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <HAL_DMA_Abort_IT+0x3d8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d036      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <HAL_DMA_Abort_IT+0x3dc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d031      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a27      	ldr	r2, [pc, #156]	; (8004004 <HAL_DMA_Abort_IT+0x3e0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d02c      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_DMA_Abort_IT+0x3e4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a24      	ldr	r2, [pc, #144]	; (800400c <HAL_DMA_Abort_IT+0x3e8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a22      	ldr	r2, [pc, #136]	; (8004010 <HAL_DMA_Abort_IT+0x3ec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01d      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	; (8004014 <HAL_DMA_Abort_IT+0x3f0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_DMA_Abort_IT+0x3f4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	; (800401c <HAL_DMA_Abort_IT+0x3f8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_DMA_Abort_IT+0x3fc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d009      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <HAL_DMA_Abort_IT+0x400>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_DMA_Abort_IT+0x3a2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_DMA_Abort_IT+0x404>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d132      	bne.n	800402c <HAL_DMA_Abort_IT+0x408>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e031      	b.n	800402e <HAL_DMA_Abort_IT+0x40a>
 8003fca:	bf00      	nop
 8003fcc:	40020010 	.word	0x40020010
 8003fd0:	40020028 	.word	0x40020028
 8003fd4:	40020040 	.word	0x40020040
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020070 	.word	0x40020070
 8003fe0:	40020088 	.word	0x40020088
 8003fe4:	400200a0 	.word	0x400200a0
 8003fe8:	400200b8 	.word	0x400200b8
 8003fec:	40020410 	.word	0x40020410
 8003ff0:	40020428 	.word	0x40020428
 8003ff4:	40020440 	.word	0x40020440
 8003ff8:	40020458 	.word	0x40020458
 8003ffc:	40020470 	.word	0x40020470
 8004000:	40020488 	.word	0x40020488
 8004004:	400204a0 	.word	0x400204a0
 8004008:	400204b8 	.word	0x400204b8
 800400c:	58025408 	.word	0x58025408
 8004010:	5802541c 	.word	0x5802541c
 8004014:	58025430 	.word	0x58025430
 8004018:	58025444 	.word	0x58025444
 800401c:	58025458 	.word	0x58025458
 8004020:	5802546c 	.word	0x5802546c
 8004024:	58025480 	.word	0x58025480
 8004028:	58025494 	.word	0x58025494
 800402c:	2300      	movs	r3, #0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d028      	beq.n	8004084 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004040:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004046:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004060:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004078:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004082:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop

080040b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040bc:	4b67      	ldr	r3, [pc, #412]	; (800425c <HAL_DMA_IRQHandler+0x1ac>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a67      	ldr	r2, [pc, #412]	; (8004260 <HAL_DMA_IRQHandler+0x1b0>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5f      	ldr	r2, [pc, #380]	; (8004264 <HAL_DMA_IRQHandler+0x1b4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d04a      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_DMA_IRQHandler+0x1b8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d045      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5c      	ldr	r2, [pc, #368]	; (800426c <HAL_DMA_IRQHandler+0x1bc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d040      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5a      	ldr	r2, [pc, #360]	; (8004270 <HAL_DMA_IRQHandler+0x1c0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d03b      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a59      	ldr	r2, [pc, #356]	; (8004274 <HAL_DMA_IRQHandler+0x1c4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d036      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a57      	ldr	r2, [pc, #348]	; (8004278 <HAL_DMA_IRQHandler+0x1c8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d031      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_DMA_IRQHandler+0x1cc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d02c      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a54      	ldr	r2, [pc, #336]	; (8004280 <HAL_DMA_IRQHandler+0x1d0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d027      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a53      	ldr	r2, [pc, #332]	; (8004284 <HAL_DMA_IRQHandler+0x1d4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_DMA_IRQHandler+0x1d8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01d      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a50      	ldr	r2, [pc, #320]	; (800428c <HAL_DMA_IRQHandler+0x1dc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4e      	ldr	r2, [pc, #312]	; (8004290 <HAL_DMA_IRQHandler+0x1e0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4d      	ldr	r2, [pc, #308]	; (8004294 <HAL_DMA_IRQHandler+0x1e4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4b      	ldr	r2, [pc, #300]	; (8004298 <HAL_DMA_IRQHandler+0x1e8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_DMA_IRQHandler+0x1ec>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_DMA_IRQHandler+0xd2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a48      	ldr	r2, [pc, #288]	; (80042a0 <HAL_DMA_IRQHandler+0x1f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d101      	bne.n	8004186 <HAL_DMA_IRQHandler+0xd6>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_DMA_IRQHandler+0xd8>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 842b 	beq.w	80049e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a2 	beq.w	80042e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <HAL_DMA_IRQHandler+0x1b4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d04a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <HAL_DMA_IRQHandler+0x1b8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d045      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2b      	ldr	r2, [pc, #172]	; (800426c <HAL_DMA_IRQHandler+0x1bc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d040      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <HAL_DMA_IRQHandler+0x1c0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d03b      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a28      	ldr	r2, [pc, #160]	; (8004274 <HAL_DMA_IRQHandler+0x1c4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d036      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_DMA_IRQHandler+0x1c8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d031      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a25      	ldr	r2, [pc, #148]	; (800427c <HAL_DMA_IRQHandler+0x1cc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02c      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_DMA_IRQHandler+0x1d0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d027      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a22      	ldr	r2, [pc, #136]	; (8004284 <HAL_DMA_IRQHandler+0x1d4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a21      	ldr	r2, [pc, #132]	; (8004288 <HAL_DMA_IRQHandler+0x1d8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d01d      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_DMA_IRQHandler+0x1dc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_DMA_IRQHandler+0x1e0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_DMA_IRQHandler+0x1e4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_DMA_IRQHandler+0x1e8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a19      	ldr	r2, [pc, #100]	; (800429c <HAL_DMA_IRQHandler+0x1ec>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_DMA_IRQHandler+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_DMA_IRQHandler+0x1f0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d12f      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x1f4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	e02e      	b.n	80042b8 <HAL_DMA_IRQHandler+0x208>
 800425a:	bf00      	nop
 800425c:	24000000 	.word	0x24000000
 8004260:	1b4e81b5 	.word	0x1b4e81b5
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0204 	bic.w	r2, r2, #4
 80042ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2208      	movs	r2, #8
 80042d6:	409a      	lsls	r2, r3
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f043 0201 	orr.w	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	fa22 f303 	lsr.w	r3, r2, r3
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d06e      	beq.n	80043dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a69      	ldr	r2, [pc, #420]	; (80044a8 <HAL_DMA_IRQHandler+0x3f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d04a      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_DMA_IRQHandler+0x3fc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d045      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a66      	ldr	r2, [pc, #408]	; (80044b0 <HAL_DMA_IRQHandler+0x400>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d040      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a64      	ldr	r2, [pc, #400]	; (80044b4 <HAL_DMA_IRQHandler+0x404>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d03b      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_DMA_IRQHandler+0x408>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d036      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_DMA_IRQHandler+0x40c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d031      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a60      	ldr	r2, [pc, #384]	; (80044c0 <HAL_DMA_IRQHandler+0x410>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d02c      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5e      	ldr	r2, [pc, #376]	; (80044c4 <HAL_DMA_IRQHandler+0x414>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d027      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_DMA_IRQHandler+0x418>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_DMA_IRQHandler+0x41c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5a      	ldr	r2, [pc, #360]	; (80044d0 <HAL_DMA_IRQHandler+0x420>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_DMA_IRQHandler+0x424>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a57      	ldr	r2, [pc, #348]	; (80044d8 <HAL_DMA_IRQHandler+0x428>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a55      	ldr	r2, [pc, #340]	; (80044dc <HAL_DMA_IRQHandler+0x42c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_DMA_IRQHandler+0x430>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ee>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_DMA_IRQHandler+0x434>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10a      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x304>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e003      	b.n	80043bc <HAL_DMA_IRQHandler+0x30c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	f043 0202 	orr.w	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	f003 031f 	and.w	r3, r3, #31
 80043e4:	2204      	movs	r2, #4
 80043e6:	409a      	lsls	r2, r3
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 808f 	beq.w	8004510 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <HAL_DMA_IRQHandler+0x3f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04a      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <HAL_DMA_IRQHandler+0x3fc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d045      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <HAL_DMA_IRQHandler+0x400>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d040      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <HAL_DMA_IRQHandler+0x404>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d03b      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_DMA_IRQHandler+0x408>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d036      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a24      	ldr	r2, [pc, #144]	; (80044bc <HAL_DMA_IRQHandler+0x40c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d031      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a23      	ldr	r2, [pc, #140]	; (80044c0 <HAL_DMA_IRQHandler+0x410>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d02c      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_DMA_IRQHandler+0x414>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d027      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <HAL_DMA_IRQHandler+0x418>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_DMA_IRQHandler+0x41c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <HAL_DMA_IRQHandler+0x420>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <HAL_DMA_IRQHandler+0x424>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1a      	ldr	r2, [pc, #104]	; (80044d8 <HAL_DMA_IRQHandler+0x428>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a18      	ldr	r2, [pc, #96]	; (80044dc <HAL_DMA_IRQHandler+0x42c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <HAL_DMA_IRQHandler+0x430>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_DMA_IRQHandler+0x3e2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <HAL_DMA_IRQHandler+0x434>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d12a      	bne.n	80044e8 <HAL_DMA_IRQHandler+0x438>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e023      	b.n	80044f0 <HAL_DMA_IRQHandler+0x440>
 80044a8:	40020010 	.word	0x40020010
 80044ac:	40020028 	.word	0x40020028
 80044b0:	40020040 	.word	0x40020040
 80044b4:	40020058 	.word	0x40020058
 80044b8:	40020070 	.word	0x40020070
 80044bc:	40020088 	.word	0x40020088
 80044c0:	400200a0 	.word	0x400200a0
 80044c4:	400200b8 	.word	0x400200b8
 80044c8:	40020410 	.word	0x40020410
 80044cc:	40020428 	.word	0x40020428
 80044d0:	40020440 	.word	0x40020440
 80044d4:	40020458 	.word	0x40020458
 80044d8:	40020470 	.word	0x40020470
 80044dc:	40020488 	.word	0x40020488
 80044e0:	400204a0 	.word	0x400204a0
 80044e4:	400204b8 	.word	0x400204b8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2210      	movs	r2, #16
 800451a:	409a      	lsls	r2, r3
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80a6 	beq.w	8004672 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a85      	ldr	r2, [pc, #532]	; (8004740 <HAL_DMA_IRQHandler+0x690>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d04a      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a83      	ldr	r2, [pc, #524]	; (8004744 <HAL_DMA_IRQHandler+0x694>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d045      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a82      	ldr	r2, [pc, #520]	; (8004748 <HAL_DMA_IRQHandler+0x698>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d040      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a80      	ldr	r2, [pc, #512]	; (800474c <HAL_DMA_IRQHandler+0x69c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d03b      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7f      	ldr	r2, [pc, #508]	; (8004750 <HAL_DMA_IRQHandler+0x6a0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d036      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7d      	ldr	r2, [pc, #500]	; (8004754 <HAL_DMA_IRQHandler+0x6a4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d031      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7c      	ldr	r2, [pc, #496]	; (8004758 <HAL_DMA_IRQHandler+0x6a8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d02c      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7a      	ldr	r2, [pc, #488]	; (800475c <HAL_DMA_IRQHandler+0x6ac>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d027      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a79      	ldr	r2, [pc, #484]	; (8004760 <HAL_DMA_IRQHandler+0x6b0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d022      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a77      	ldr	r2, [pc, #476]	; (8004764 <HAL_DMA_IRQHandler+0x6b4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01d      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a76      	ldr	r2, [pc, #472]	; (8004768 <HAL_DMA_IRQHandler+0x6b8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d018      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a74      	ldr	r2, [pc, #464]	; (800476c <HAL_DMA_IRQHandler+0x6bc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a73      	ldr	r2, [pc, #460]	; (8004770 <HAL_DMA_IRQHandler+0x6c0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_DMA_IRQHandler+0x6c4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d009      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a70      	ldr	r2, [pc, #448]	; (8004778 <HAL_DMA_IRQHandler+0x6c8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x516>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6e      	ldr	r2, [pc, #440]	; (800477c <HAL_DMA_IRQHandler+0x6cc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10a      	bne.n	80045dc <HAL_DMA_IRQHandler+0x52c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e009      	b.n	80045f0 <HAL_DMA_IRQHandler+0x540>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d03e      	beq.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2210      	movs	r2, #16
 80045fe:	409a      	lsls	r2, r3
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d024      	beq.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
 8004630:	e01f      	b.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01b      	beq.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	e016      	b.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0208 	bic.w	r2, r2, #8
 8004660:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	2220      	movs	r2, #32
 800467c:	409a      	lsls	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8110 	beq.w	80048a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2c      	ldr	r2, [pc, #176]	; (8004740 <HAL_DMA_IRQHandler+0x690>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d04a      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <HAL_DMA_IRQHandler+0x694>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d045      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_DMA_IRQHandler+0x698>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d040      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a28      	ldr	r2, [pc, #160]	; (800474c <HAL_DMA_IRQHandler+0x69c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d03b      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <HAL_DMA_IRQHandler+0x6a0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d036      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <HAL_DMA_IRQHandler+0x6a4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d031      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_DMA_IRQHandler+0x6a8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02c      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_DMA_IRQHandler+0x6ac>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d027      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_DMA_IRQHandler+0x6b0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d022      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_DMA_IRQHandler+0x6b4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d01d      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_DMA_IRQHandler+0x6b8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d018      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_DMA_IRQHandler+0x6bc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <HAL_DMA_IRQHandler+0x6c0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00e      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <HAL_DMA_IRQHandler+0x6c4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_DMA_IRQHandler+0x6c8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_DMA_IRQHandler+0x678>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_DMA_IRQHandler+0x6cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d12b      	bne.n	8004780 <HAL_DMA_IRQHandler+0x6d0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e02a      	b.n	8004794 <HAL_DMA_IRQHandler+0x6e4>
 800473e:	bf00      	nop
 8004740:	40020010 	.word	0x40020010
 8004744:	40020028 	.word	0x40020028
 8004748:	40020040 	.word	0x40020040
 800474c:	40020058 	.word	0x40020058
 8004750:	40020070 	.word	0x40020070
 8004754:	40020088 	.word	0x40020088
 8004758:	400200a0 	.word	0x400200a0
 800475c:	400200b8 	.word	0x400200b8
 8004760:	40020410 	.word	0x40020410
 8004764:	40020428 	.word	0x40020428
 8004768:	40020440 	.word	0x40020440
 800476c:	40020458 	.word	0x40020458
 8004770:	40020470 	.word	0x40020470
 8004774:	40020488 	.word	0x40020488
 8004778:	400204a0 	.word	0x400204a0
 800477c:	400204b8 	.word	0x400204b8
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8087 	beq.w	80048a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	f003 031f 	and.w	r3, r3, #31
 80047a2:	2220      	movs	r2, #32
 80047a4:	409a      	lsls	r2, r3
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d139      	bne.n	800482a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0216 	bic.w	r2, r2, #22
 80047c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <HAL_DMA_IRQHandler+0x736>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0208 	bic.w	r2, r2, #8
 80047f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	223f      	movs	r2, #63	; 0x3f
 8004800:	409a      	lsls	r2, r3
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 834a 	beq.w	8004eb4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
          }
          return;
 8004828:	e344      	b.n	8004eb4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d018      	beq.n	800486a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02c      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
 8004856:	e027      	b.n	80048a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d023      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	4798      	blx	r3
 8004868:	e01e      	b.n	80048a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0210 	bic.w	r2, r2, #16
 8004886:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8306 	beq.w	8004ebe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8088 	beq.w	80049d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2204      	movs	r2, #4
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7a      	ldr	r2, [pc, #488]	; (8004ab8 <HAL_DMA_IRQHandler+0xa08>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d04a      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a79      	ldr	r2, [pc, #484]	; (8004abc <HAL_DMA_IRQHandler+0xa0c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d045      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <HAL_DMA_IRQHandler+0xa10>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d040      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a76      	ldr	r2, [pc, #472]	; (8004ac4 <HAL_DMA_IRQHandler+0xa14>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d03b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a74      	ldr	r2, [pc, #464]	; (8004ac8 <HAL_DMA_IRQHandler+0xa18>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d036      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a73      	ldr	r2, [pc, #460]	; (8004acc <HAL_DMA_IRQHandler+0xa1c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d031      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a71      	ldr	r2, [pc, #452]	; (8004ad0 <HAL_DMA_IRQHandler+0xa20>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a70      	ldr	r2, [pc, #448]	; (8004ad4 <HAL_DMA_IRQHandler+0xa24>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d027      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6e      	ldr	r2, [pc, #440]	; (8004ad8 <HAL_DMA_IRQHandler+0xa28>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d022      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6d      	ldr	r2, [pc, #436]	; (8004adc <HAL_DMA_IRQHandler+0xa2c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d01d      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6b      	ldr	r2, [pc, #428]	; (8004ae0 <HAL_DMA_IRQHandler+0xa30>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d018      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6a      	ldr	r2, [pc, #424]	; (8004ae4 <HAL_DMA_IRQHandler+0xa34>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d013      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	; (8004ae8 <HAL_DMA_IRQHandler+0xa38>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00e      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a67      	ldr	r2, [pc, #412]	; (8004aec <HAL_DMA_IRQHandler+0xa3c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d009      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <HAL_DMA_IRQHandler+0xa40>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_DMA_IRQHandler+0x8b8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a64      	ldr	r2, [pc, #400]	; (8004af4 <HAL_DMA_IRQHandler+0xa44>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <HAL_DMA_IRQHandler+0x8ca>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e007      	b.n	800498a <HAL_DMA_IRQHandler+0x8da>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	429a      	cmp	r2, r3
 8004994:	d307      	bcc.n	80049a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f2      	bne.n	800498a <HAL_DMA_IRQHandler+0x8da>
 80049a4:	e000      	b.n	80049a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049a6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049be:	e003      	b.n	80049c8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8272 	beq.w	8004ebe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
 80049e2:	e26c      	b.n	8004ebe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a43      	ldr	r2, [pc, #268]	; (8004af8 <HAL_DMA_IRQHandler+0xa48>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d022      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a42      	ldr	r2, [pc, #264]	; (8004afc <HAL_DMA_IRQHandler+0xa4c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d01d      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a40      	ldr	r2, [pc, #256]	; (8004b00 <HAL_DMA_IRQHandler+0xa50>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d018      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a3f      	ldr	r2, [pc, #252]	; (8004b04 <HAL_DMA_IRQHandler+0xa54>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3d      	ldr	r2, [pc, #244]	; (8004b08 <HAL_DMA_IRQHandler+0xa58>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3c      	ldr	r2, [pc, #240]	; (8004b0c <HAL_DMA_IRQHandler+0xa5c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d009      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3a      	ldr	r2, [pc, #232]	; (8004b10 <HAL_DMA_IRQHandler+0xa60>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x984>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a39      	ldr	r2, [pc, #228]	; (8004b14 <HAL_DMA_IRQHandler+0xa64>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x988>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <HAL_DMA_IRQHandler+0x98a>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 823f 	beq.w	8004ebe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	2204      	movs	r2, #4
 8004a52:	409a      	lsls	r2, r3
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80cd 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xb48>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 80c7 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2204      	movs	r2, #4
 8004a74:	409a      	lsls	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d049      	beq.n	8004b18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8210 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa0:	e20a      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8206 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab4:	e200      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe08>
 8004ab6:	bf00      	nop
 8004ab8:	40020010 	.word	0x40020010
 8004abc:	40020028 	.word	0x40020028
 8004ac0:	40020040 	.word	0x40020040
 8004ac4:	40020058 	.word	0x40020058
 8004ac8:	40020070 	.word	0x40020070
 8004acc:	40020088 	.word	0x40020088
 8004ad0:	400200a0 	.word	0x400200a0
 8004ad4:	400200b8 	.word	0x400200b8
 8004ad8:	40020410 	.word	0x40020410
 8004adc:	40020428 	.word	0x40020428
 8004ae0:	40020440 	.word	0x40020440
 8004ae4:	40020458 	.word	0x40020458
 8004ae8:	40020470 	.word	0x40020470
 8004aec:	40020488 	.word	0x40020488
 8004af0:	400204a0 	.word	0x400204a0
 8004af4:	400204b8 	.word	0x400204b8
 8004af8:	58025408 	.word	0x58025408
 8004afc:	5802541c 	.word	0x5802541c
 8004b00:	58025430 	.word	0x58025430
 8004b04:	58025444 	.word	0x58025444
 8004b08:	58025458 	.word	0x58025458
 8004b0c:	5802546c 	.word	0x5802546c
 8004b10:	58025480 	.word	0x58025480
 8004b14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d160      	bne.n	8004be4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7f      	ldr	r2, [pc, #508]	; (8004d24 <HAL_DMA_IRQHandler+0xc74>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d04a      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a7d      	ldr	r2, [pc, #500]	; (8004d28 <HAL_DMA_IRQHandler+0xc78>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d045      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7c      	ldr	r2, [pc, #496]	; (8004d2c <HAL_DMA_IRQHandler+0xc7c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d040      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_DMA_IRQHandler+0xc80>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a79      	ldr	r2, [pc, #484]	; (8004d34 <HAL_DMA_IRQHandler+0xc84>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d036      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a77      	ldr	r2, [pc, #476]	; (8004d38 <HAL_DMA_IRQHandler+0xc88>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d031      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a76      	ldr	r2, [pc, #472]	; (8004d3c <HAL_DMA_IRQHandler+0xc8c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d02c      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a74      	ldr	r2, [pc, #464]	; (8004d40 <HAL_DMA_IRQHandler+0xc90>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d027      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a73      	ldr	r2, [pc, #460]	; (8004d44 <HAL_DMA_IRQHandler+0xc94>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a71      	ldr	r2, [pc, #452]	; (8004d48 <HAL_DMA_IRQHandler+0xc98>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a70      	ldr	r2, [pc, #448]	; (8004d4c <HAL_DMA_IRQHandler+0xc9c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a6e      	ldr	r2, [pc, #440]	; (8004d50 <HAL_DMA_IRQHandler+0xca0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6d      	ldr	r2, [pc, #436]	; (8004d54 <HAL_DMA_IRQHandler+0xca4>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a6b      	ldr	r2, [pc, #428]	; (8004d58 <HAL_DMA_IRQHandler+0xca8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6a      	ldr	r2, [pc, #424]	; (8004d5c <HAL_DMA_IRQHandler+0xcac>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0xb12>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a68      	ldr	r2, [pc, #416]	; (8004d60 <HAL_DMA_IRQHandler+0xcb0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d108      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0xb24>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e007      	b.n	8004be4 <HAL_DMA_IRQHandler+0xb34>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8165 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf6:	e15f      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2202      	movs	r2, #2
 8004c02:	409a      	lsls	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80c5 	beq.w	8004d98 <HAL_DMA_IRQHandler+0xce8>
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80bf 	beq.w	8004d98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2202      	movs	r2, #2
 8004c24:	409a      	lsls	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d018      	beq.n	8004c66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 813a 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c50:	e134      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8130 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	e12a      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f003 0320 	and.w	r3, r3, #32
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f040 8089 	bne.w	8004d84 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2b      	ldr	r2, [pc, #172]	; (8004d24 <HAL_DMA_IRQHandler+0xc74>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d04a      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <HAL_DMA_IRQHandler+0xc78>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d045      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a28      	ldr	r2, [pc, #160]	; (8004d2c <HAL_DMA_IRQHandler+0xc7c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d040      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <HAL_DMA_IRQHandler+0xc80>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d03b      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <HAL_DMA_IRQHandler+0xc84>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d036      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <HAL_DMA_IRQHandler+0xc88>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d031      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <HAL_DMA_IRQHandler+0xc8c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d02c      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	; (8004d40 <HAL_DMA_IRQHandler+0xc90>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d027      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <HAL_DMA_IRQHandler+0xc94>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d022      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <HAL_DMA_IRQHandler+0xc98>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01d      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_DMA_IRQHandler+0xc9c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d018      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	; (8004d50 <HAL_DMA_IRQHandler+0xca0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_DMA_IRQHandler+0xca4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00e      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_DMA_IRQHandler+0xca8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d009      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_DMA_IRQHandler+0xcac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d004      	beq.n	8004d12 <HAL_DMA_IRQHandler+0xc62>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a14      	ldr	r2, [pc, #80]	; (8004d60 <HAL_DMA_IRQHandler+0xcb0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d128      	bne.n	8004d64 <HAL_DMA_IRQHandler+0xcb4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0214 	bic.w	r2, r2, #20
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e027      	b.n	8004d74 <HAL_DMA_IRQHandler+0xcc4>
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 020a 	bic.w	r2, r2, #10
 8004d72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8097 	beq.w	8004ebc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d96:	e091      	b.n	8004ebc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2208      	movs	r2, #8
 8004da2:	409a      	lsls	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8088 	beq.w	8004ebe <HAL_DMA_IRQHandler+0xe0e>
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8082 	beq.w	8004ebe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a41      	ldr	r2, [pc, #260]	; (8004ec4 <HAL_DMA_IRQHandler+0xe14>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d04a      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a3f      	ldr	r2, [pc, #252]	; (8004ec8 <HAL_DMA_IRQHandler+0xe18>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d045      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a3e      	ldr	r2, [pc, #248]	; (8004ecc <HAL_DMA_IRQHandler+0xe1c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d040      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3c      	ldr	r2, [pc, #240]	; (8004ed0 <HAL_DMA_IRQHandler+0xe20>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d03b      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3b      	ldr	r2, [pc, #236]	; (8004ed4 <HAL_DMA_IRQHandler+0xe24>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d036      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a39      	ldr	r2, [pc, #228]	; (8004ed8 <HAL_DMA_IRQHandler+0xe28>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a38      	ldr	r2, [pc, #224]	; (8004edc <HAL_DMA_IRQHandler+0xe2c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d02c      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a36      	ldr	r2, [pc, #216]	; (8004ee0 <HAL_DMA_IRQHandler+0xe30>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d027      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a35      	ldr	r2, [pc, #212]	; (8004ee4 <HAL_DMA_IRQHandler+0xe34>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a33      	ldr	r2, [pc, #204]	; (8004ee8 <HAL_DMA_IRQHandler+0xe38>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01d      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a32      	ldr	r2, [pc, #200]	; (8004eec <HAL_DMA_IRQHandler+0xe3c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <HAL_DMA_IRQHandler+0xe40>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <HAL_DMA_IRQHandler+0xe44>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2d      	ldr	r2, [pc, #180]	; (8004ef8 <HAL_DMA_IRQHandler+0xe48>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2c      	ldr	r2, [pc, #176]	; (8004efc <HAL_DMA_IRQHandler+0xe4c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xdaa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <HAL_DMA_IRQHandler+0xe50>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <HAL_DMA_IRQHandler+0xdbc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 021c 	bic.w	r2, r2, #28
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e007      	b.n	8004e7c <HAL_DMA_IRQHandler+0xdcc>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 020e 	bic.w	r2, r2, #14
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	2201      	movs	r2, #1
 8004e86:	409a      	lsls	r2, r3
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
 8004eb2:	e004      	b.n	8004ebe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ebc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ebe:	3728      	adds	r7, #40	; 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40020010 	.word	0x40020010
 8004ec8:	40020028 	.word	0x40020028
 8004ecc:	40020040 	.word	0x40020040
 8004ed0:	40020058 	.word	0x40020058
 8004ed4:	40020070 	.word	0x40020070
 8004ed8:	40020088 	.word	0x40020088
 8004edc:	400200a0 	.word	0x400200a0
 8004ee0:	400200b8 	.word	0x400200b8
 8004ee4:	40020410 	.word	0x40020410
 8004ee8:	40020428 	.word	0x40020428
 8004eec:	40020440 	.word	0x40020440
 8004ef0:	40020458 	.word	0x40020458
 8004ef4:	40020470 	.word	0x40020470
 8004ef8:	40020488 	.word	0x40020488
 8004efc:	400204a0 	.word	0x400204a0
 8004f00:	400204b8 	.word	0x400204b8

08004f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a42      	ldr	r2, [pc, #264]	; (800501c <DMA_CalcBaseAndBitshift+0x118>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d04a      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a41      	ldr	r2, [pc, #260]	; (8005020 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d045      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3f      	ldr	r2, [pc, #252]	; (8005024 <DMA_CalcBaseAndBitshift+0x120>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d040      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3e      	ldr	r2, [pc, #248]	; (8005028 <DMA_CalcBaseAndBitshift+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d03b      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3c      	ldr	r2, [pc, #240]	; (800502c <DMA_CalcBaseAndBitshift+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d036      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d031      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a39      	ldr	r2, [pc, #228]	; (8005034 <DMA_CalcBaseAndBitshift+0x130>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02c      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a38      	ldr	r2, [pc, #224]	; (8005038 <DMA_CalcBaseAndBitshift+0x134>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d027      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a36      	ldr	r2, [pc, #216]	; (800503c <DMA_CalcBaseAndBitshift+0x138>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a35      	ldr	r2, [pc, #212]	; (8005040 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a33      	ldr	r2, [pc, #204]	; (8005044 <DMA_CalcBaseAndBitshift+0x140>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a32      	ldr	r2, [pc, #200]	; (8005048 <DMA_CalcBaseAndBitshift+0x144>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a30      	ldr	r2, [pc, #192]	; (800504c <DMA_CalcBaseAndBitshift+0x148>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <DMA_CalcBaseAndBitshift+0x150>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <DMA_CalcBaseAndBitshift+0xa8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <DMA_CalcBaseAndBitshift+0x154>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <DMA_CalcBaseAndBitshift+0xac>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <DMA_CalcBaseAndBitshift+0xae>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d024      	beq.n	8005000 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3b10      	subs	r3, #16
 8004fbe:	4a27      	ldr	r2, [pc, #156]	; (800505c <DMA_CalcBaseAndBitshift+0x158>)
 8004fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	4a24      	ldr	r2, [pc, #144]	; (8005060 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fd0:	5cd3      	ldrb	r3, [r2, r3]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d908      	bls.n	8004ff0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	; (8005064 <DMA_CalcBaseAndBitshift+0x160>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	1d1a      	adds	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	659a      	str	r2, [r3, #88]	; 0x58
 8004fee:	e00d      	b.n	800500c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	; (8005064 <DMA_CalcBaseAndBitshift+0x160>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ffe:	e005      	b.n	800500c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	40020010 	.word	0x40020010
 8005020:	40020028 	.word	0x40020028
 8005024:	40020040 	.word	0x40020040
 8005028:	40020058 	.word	0x40020058
 800502c:	40020070 	.word	0x40020070
 8005030:	40020088 	.word	0x40020088
 8005034:	400200a0 	.word	0x400200a0
 8005038:	400200b8 	.word	0x400200b8
 800503c:	40020410 	.word	0x40020410
 8005040:	40020428 	.word	0x40020428
 8005044:	40020440 	.word	0x40020440
 8005048:	40020458 	.word	0x40020458
 800504c:	40020470 	.word	0x40020470
 8005050:	40020488 	.word	0x40020488
 8005054:	400204a0 	.word	0x400204a0
 8005058:	400204b8 	.word	0x400204b8
 800505c:	aaaaaaab 	.word	0xaaaaaaab
 8005060:	0800f33c 	.word	0x0800f33c
 8005064:	fffffc00 	.word	0xfffffc00

08005068 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d120      	bne.n	80050be <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	2b03      	cmp	r3, #3
 8005082:	d858      	bhi.n	8005136 <DMA_CheckFifoParam+0xce>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <DMA_CheckFifoParam+0x24>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050af 	.word	0x080050af
 8005094:	0800509d 	.word	0x0800509d
 8005098:	08005137 	.word	0x08005137
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d048      	beq.n	800513a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ac:	e045      	b.n	800513a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b6:	d142      	bne.n	800513e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050bc:	e03f      	b.n	800513e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d123      	bne.n	8005110 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d838      	bhi.n	8005142 <DMA_CheckFifoParam+0xda>
 80050d0:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <DMA_CheckFifoParam+0x70>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050ef 	.word	0x080050ef
 80050e0:	080050e9 	.word	0x080050e9
 80050e4:	08005101 	.word	0x08005101
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
        break;
 80050ec:	e030      	b.n	8005150 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d025      	beq.n	8005146 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050fe:	e022      	b.n	8005146 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005108:	d11f      	bne.n	800514a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800510e:	e01c      	b.n	800514a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	2b02      	cmp	r3, #2
 8005116:	d902      	bls.n	800511e <DMA_CheckFifoParam+0xb6>
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800511c:	e018      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
        break;
 8005122:	e015      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
    break;
 8005134:	e00b      	b.n	800514e <DMA_CheckFifoParam+0xe6>
        break;
 8005136:	bf00      	nop
 8005138:	e00a      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800513a:	bf00      	nop
 800513c:	e008      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e006      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 8005142:	bf00      	nop
 8005144:	e004      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
        break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <DMA_CheckFifoParam+0xe8>
    break;
 800514e:	bf00      	nop
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop

08005160 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a38      	ldr	r2, [pc, #224]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d022      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a36      	ldr	r2, [pc, #216]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a35      	ldr	r2, [pc, #212]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d018      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a33      	ldr	r2, [pc, #204]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a32      	ldr	r2, [pc, #200]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a30      	ldr	r2, [pc, #192]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	; (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a2d      	ldr	r2, [pc, #180]	; (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d101      	bne.n	80051c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051c2:	2300      	movs	r3, #0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	3b08      	subs	r3, #8
 80051d0:	4a28      	ldr	r2, [pc, #160]	; (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4b26      	ldr	r3, [pc, #152]	; (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a24      	ldr	r2, [pc, #144]	; (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051fc:	e024      	b.n	8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	3b10      	subs	r3, #16
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4a1c      	ldr	r2, [pc, #112]	; (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d806      	bhi.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4a1b      	ldr	r2, [pc, #108]	; (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d902      	bls.n	8005226 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	3308      	adds	r3, #8
 8005224:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005238:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494
 8005274:	cccccccd 	.word	0xcccccccd
 8005278:	16009600 	.word	0x16009600
 800527c:	58025880 	.word	0x58025880
 8005280:	aaaaaaab 	.word	0xaaaaaaab
 8005284:	400204b8 	.word	0x400204b8
 8005288:	4002040f 	.word	0x4002040f
 800528c:	10008200 	.word	0x10008200
 8005290:	40020880 	.word	0x40020880

08005294 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04a      	beq.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d847      	bhi.n	8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a25      	ldr	r2, [pc, #148]	; (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a22      	ldr	r2, [pc, #136]	; (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a21      	ldr	r2, [pc, #132]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	; (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800531c:	671a      	str	r2, [r3, #112]	; 0x70
 800531e:	e009      	b.n	8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4b14      	ldr	r3, [pc, #80]	; (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	461a      	mov	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a11      	ldr	r2, [pc, #68]	; (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005332:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b01      	subs	r3, #1
 8005338:	2201      	movs	r2, #1
 800533a:	409a      	lsls	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	58025408 	.word	0x58025408
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025430 	.word	0x58025430
 8005358:	58025444 	.word	0x58025444
 800535c:	58025458 	.word	0x58025458
 8005360:	5802546c 	.word	0x5802546c
 8005364:	58025480 	.word	0x58025480
 8005368:	58025494 	.word	0x58025494
 800536c:	1600963f 	.word	0x1600963f
 8005370:	58025940 	.word	0x58025940
 8005374:	1000823f 	.word	0x1000823f
 8005378:	40020940 	.word	0x40020940

0800537c <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e089      	b.n	80054a2 <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fbf2 	bl	8000b84 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e075      	b.n	80054a2 <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e06e      	b.n	80054a2 <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d108      	bne.n	80053de <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e00e      	b.n	80053fc <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e6:	d001      	beq.n	80053ec <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e05a      	b.n	80054a2 <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80053fa:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005404:	d108      	bne.n	8005418 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e007      	b.n	8005428 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005426:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	061a      	lsls	r2, r3, #24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	b299      	uxth	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	041a      	lsls	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	4b08      	ldr	r3, [pc, #32]	; (80054ac <HAL_DTS_Init+0x130>)
 800548a:	4013      	ands	r3, r2
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	69d1      	ldr	r1, [r2, #28]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	ffff0000 	.word	0xffff0000

080054b0 <HAL_DTS_Start>:
  * @brief  Start the DTS sensor.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Start(DTS_HandleTypeDef *hdts)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t Ref_Time;

  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_DTS_Start+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e03f      	b.n	8005542 <HAL_DTS_Start+0x92>
  }

  if (hdts->State == HAL_DTS_STATE_READY)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d138      	bne.n	8005540 <HAL_DTS_Start+0x90>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Enable DTS sensor */
    __HAL_DTS_ENABLE(hdts);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    Ref_Time = HAL_GetTick();
 80054e6:	f7fc fc9d 	bl	8001e24 <HAL_GetTick>
 80054ea:	60f8      	str	r0, [r7, #12]

    /* Wait till TS1_RDY flag is set */
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_DTS_Start+0x50>
    {
      if ((HAL_GetTick() - Ref_Time) > DTS_DELAY_STARTUP)
 80054ee:	f7fc fc99 	bl	8001e24 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d901      	bls.n	8005500 <HAL_DTS_Start+0x50>
      {
        return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e020      	b.n	8005542 <HAL_DTS_Start+0x92>
    while (__HAL_DTS_GET_FLAG(hdts, DTS_FLAG_TS1_RDY) == RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800550e:	d1ee      	bne.n	80054ee <HAL_DTS_Start+0x3e>
      }
    }

    if (__HAL_DTS_GET_TRIGGER(hdts) == DTS_TRIGGER_HW_NONE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <HAL_DTS_Start+0x84>
    {
      /* Start continuous measures */
      SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_TS1_START);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0210 	orr.w	r2, r2, #16
 800552c:	601a      	str	r2, [r3, #0]

      /* Ensure start is taken into account */
      HAL_Delay(TS_TIMEOUT_MS);
 800552e:	2005      	movs	r0, #5
 8005530:	f7fc fc84 	bl	8001e3c <HAL_Delay>
    }

    hdts->State = HAL_DTS_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	e000      	b.n	8005542 <HAL_DTS_Start+0x92>
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_DTS_GetTemperature>:
  * @param  Temperature  Temperature in deg C
  * @note This function retrieves latest available measure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_GetTemperature(DTS_HandleTypeDef *hdts, int32_t *Temperature)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b088      	sub	sp, #32
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t samples;
  uint32_t t0_temp;
  uint32_t t0_freq;
  uint32_t ramp_coeff;

  if (hdts->State == HAL_DTS_STATE_READY)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	d16c      	bne.n	800563a <HAL_DTS_GetTemperature+0xf0>
  {
    hdts->State = HAL_DTS_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get the total number of samples */
    samples = (hdts->Instance->DR & DTS_DR_TS1_MFREQ);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	b29b      	uxth	r3, r3
 8005570:	617b      	str	r3, [r7, #20]

    if ((hdts->Init.SamplingTime == 0UL) || (samples == 0UL))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_DTS_GetTemperature+0x36>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <HAL_DTS_GetTemperature+0x42>
    {
      hdts->State = HAL_DTS_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e057      	b.n	800563c <HAL_DTS_GetTemperature+0xf2>
    }

    if ((hdts->Init.RefClock) == DTS_REFCLKSEL_LSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005594:	d108      	bne.n	80055a8 <HAL_DTS_GetTemperature+0x5e>
    {
      freq_meas = (LSE_VALUE * samples) / (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos); /* On Hz */
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	03da      	lsls	r2, r3, #15
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	e00b      	b.n	80055c0 <HAL_DTS_GetTemperature+0x76>
    }
    else
    {
      freq_meas = (HAL_RCCEx_GetD3PCLK1Freq() * (hdts->Init.SamplingTime >> DTS_CFGR1_TS1_SMP_TIME_Pos)) / samples; /* On Hz */
 80055a8:	f003 f844 	bl	8008634 <HAL_RCCEx_GetD3PCLK1Freq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	fb03 f202 	mul.w	r2, r3, r2
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	61fb      	str	r3, [r7, #28]
    }

    /* Read factory settings */
    t0_temp = hdts->Instance->T0VALR1 >> DTS_T0VALR1_TS1_T0_Pos;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	61bb      	str	r3, [r7, #24]

    if (t0_temp == 0UL)
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <HAL_DTS_GetTemperature+0x8c>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE1; /* 30 deg C */
 80055d0:	231e      	movs	r3, #30
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e00b      	b.n	80055ee <HAL_DTS_GetTemperature+0xa4>
    }
    else if (t0_temp == 1UL)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d102      	bne.n	80055e2 <HAL_DTS_GetTemperature+0x98>
    {
      t0_temp = DTS_FACTORY_TEMPERATURE2; /* 130 deg C */
 80055dc:	2382      	movs	r3, #130	; 0x82
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	e005      	b.n	80055ee <HAL_DTS_GetTemperature+0xa4>
    }
    else
    {
      hdts->State = HAL_DTS_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e026      	b.n	800563c <HAL_DTS_GetTemperature+0xf2>
    }

    t0_freq = (hdts->Instance->T0VALR1 & DTS_T0VALR1_TS1_FMT0) * 100UL; /* Hz */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2264      	movs	r2, #100	; 0x64
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
 80055fc:	613b      	str	r3, [r7, #16]

    ramp_coeff = hdts->Instance->RAMPVALR & DTS_RAMPVALR_TS1_RAMP_COEFF; /* deg C/Hz */
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	b29b      	uxth	r3, r3
 8005606:	60fb      	str	r3, [r7, #12]

    if (ramp_coeff == 0UL)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d105      	bne.n	800561a <HAL_DTS_GetTemperature+0xd0>
    {
      hdts->State = HAL_DTS_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e010      	b.n	800563c <HAL_DTS_GetTemperature+0xf2>
    }

    /* Figure out the temperature deg C */
    *Temperature = (int32_t)t0_temp + (((int32_t)freq_meas - (int32_t)t0_freq) / (int32_t)ramp_coeff);
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad2      	subs	r2, r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	fb92 f2f3 	sdiv	r2, r2, r3
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	441a      	add	r2, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	601a      	str	r2, [r3, #0]

    hdts->State = HAL_DTS_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_BUSY;
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e000      	b.n	800563c <HAL_DTS_GetTemperature+0xf2>
    return HAL_BUSY;
 800563a:	2302      	movs	r3, #2
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005652:	4b86      	ldr	r3, [pc, #536]	; (800586c <HAL_GPIO_Init+0x228>)
 8005654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005656:	e18c      	b.n	8005972 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2101      	movs	r1, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa01 f303 	lsl.w	r3, r1, r3
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 817e 	beq.w	800596c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d005      	beq.n	8005688 <HAL_GPIO_Init+0x44>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d130      	bne.n	80056ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056be:	2201      	movs	r2, #1
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f003 0201 	and.w	r2, r3, #1
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d017      	beq.n	8005726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d123      	bne.n	800577a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	08da      	lsrs	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3208      	adds	r2, #8
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	220f      	movs	r2, #15
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43db      	mvns	r3, r3
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	4013      	ands	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	08da      	lsrs	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3208      	adds	r2, #8
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	2203      	movs	r2, #3
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0203 	and.w	r2, r3, #3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80d8 	beq.w	800596c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057bc:	4b2c      	ldr	r3, [pc, #176]	; (8005870 <HAL_GPIO_Init+0x22c>)
 80057be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057c2:	4a2b      	ldr	r2, [pc, #172]	; (8005870 <HAL_GPIO_Init+0x22c>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057cc:	4b28      	ldr	r3, [pc, #160]	; (8005870 <HAL_GPIO_Init+0x22c>)
 80057ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057da:	4a26      	ldr	r2, [pc, #152]	; (8005874 <HAL_GPIO_Init+0x230>)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	4013      	ands	r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1d      	ldr	r2, [pc, #116]	; (8005878 <HAL_GPIO_Init+0x234>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d04a      	beq.n	800589c <HAL_GPIO_Init+0x258>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_GPIO_Init+0x238>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d02b      	beq.n	8005866 <HAL_GPIO_Init+0x222>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <HAL_GPIO_Init+0x23c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d025      	beq.n	8005862 <HAL_GPIO_Init+0x21e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1a      	ldr	r2, [pc, #104]	; (8005884 <HAL_GPIO_Init+0x240>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01f      	beq.n	800585e <HAL_GPIO_Init+0x21a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_GPIO_Init+0x244>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d019      	beq.n	800585a <HAL_GPIO_Init+0x216>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_GPIO_Init+0x248>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_GPIO_Init+0x212>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a17      	ldr	r2, [pc, #92]	; (8005890 <HAL_GPIO_Init+0x24c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00d      	beq.n	8005852 <HAL_GPIO_Init+0x20e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a16      	ldr	r2, [pc, #88]	; (8005894 <HAL_GPIO_Init+0x250>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <HAL_GPIO_Init+0x20a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <HAL_GPIO_Init+0x254>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d101      	bne.n	800584a <HAL_GPIO_Init+0x206>
 8005846:	2309      	movs	r3, #9
 8005848:	e029      	b.n	800589e <HAL_GPIO_Init+0x25a>
 800584a:	230a      	movs	r3, #10
 800584c:	e027      	b.n	800589e <HAL_GPIO_Init+0x25a>
 800584e:	2307      	movs	r3, #7
 8005850:	e025      	b.n	800589e <HAL_GPIO_Init+0x25a>
 8005852:	2306      	movs	r3, #6
 8005854:	e023      	b.n	800589e <HAL_GPIO_Init+0x25a>
 8005856:	2305      	movs	r3, #5
 8005858:	e021      	b.n	800589e <HAL_GPIO_Init+0x25a>
 800585a:	2304      	movs	r3, #4
 800585c:	e01f      	b.n	800589e <HAL_GPIO_Init+0x25a>
 800585e:	2303      	movs	r3, #3
 8005860:	e01d      	b.n	800589e <HAL_GPIO_Init+0x25a>
 8005862:	2302      	movs	r3, #2
 8005864:	e01b      	b.n	800589e <HAL_GPIO_Init+0x25a>
 8005866:	2301      	movs	r3, #1
 8005868:	e019      	b.n	800589e <HAL_GPIO_Init+0x25a>
 800586a:	bf00      	nop
 800586c:	58000080 	.word	0x58000080
 8005870:	58024400 	.word	0x58024400
 8005874:	58000400 	.word	0x58000400
 8005878:	58020000 	.word	0x58020000
 800587c:	58020400 	.word	0x58020400
 8005880:	58020800 	.word	0x58020800
 8005884:	58020c00 	.word	0x58020c00
 8005888:	58021000 	.word	0x58021000
 800588c:	58021400 	.word	0x58021400
 8005890:	58021800 	.word	0x58021800
 8005894:	58021c00 	.word	0x58021c00
 8005898:	58022400 	.word	0x58022400
 800589c:	2300      	movs	r3, #0
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	f002 0203 	and.w	r2, r2, #3
 80058a4:	0092      	lsls	r2, r2, #2
 80058a6:	4093      	lsls	r3, r2
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058ae:	4938      	ldr	r1, [pc, #224]	; (8005990 <HAL_GPIO_Init+0x34c>)
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	3302      	adds	r3, #2
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f ae6b 	bne.w	8005658 <HAL_GPIO_Init+0x14>
  }
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	3724      	adds	r7, #36	; 0x24
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	58000400 	.word	0x58000400

08005994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
 80059a0:	4613      	mov	r3, r2
 80059a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059a4:	787b      	ldrb	r3, [r7, #1]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059aa:	887a      	ldrh	r2, [r7, #2]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059b0:	e003      	b.n	80059ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059b2:	887b      	ldrh	r3, [r7, #2]
 80059b4:	041a      	lsls	r2, r3, #16
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	619a      	str	r2, [r3, #24]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	4603      	mov	r3, r0
 80059ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 f804 	bl	80059fa <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a18:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d00a      	beq.n	8005a3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e01f      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e01d      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a3a:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	490f      	ldr	r1, [pc, #60]	; (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a4a:	f7fc f9eb 	bl	8001e24 <HAL_GetTick>
 8005a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a50:	e009      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a52:	f7fc f9e7 	bl	8001e24 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a60:	d901      	bls.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e007      	b.n	8005a76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_PWREx_ConfigSupply+0x70>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d1ee      	bne.n	8005a52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	58024800 	.word	0x58024800

08005a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	; 0x30
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e3c8      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 8087 	beq.w	8005bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aa4:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005aae:	4b86      	ldr	r3, [pc, #536]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d007      	beq.n	8005aca <HAL_RCC_OscConfig+0x46>
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2b18      	cmp	r3, #24
 8005abe:	d110      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x5e>
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d10b      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aca:	4b7f      	ldr	r3, [pc, #508]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d06c      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x12c>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d168      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e3a2      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d106      	bne.n	8005afa <HAL_RCC_OscConfig+0x76>
 8005aec:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a75      	ldr	r2, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e02e      	b.n	8005b58 <HAL_RCC_OscConfig+0xd4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x98>
 8005b02:	4b71      	ldr	r3, [pc, #452]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a70      	ldr	r2, [pc, #448]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b6e      	ldr	r3, [pc, #440]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a6d      	ldr	r2, [pc, #436]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e01d      	b.n	8005b58 <HAL_RCC_OscConfig+0xd4>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0xbc>
 8005b26:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a67      	ldr	r2, [pc, #412]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a64      	ldr	r2, [pc, #400]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xd4>
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a60      	ldr	r2, [pc, #384]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b5e      	ldr	r3, [pc, #376]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a5d      	ldr	r2, [pc, #372]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fc f960 	bl	8001e24 <HAL_GetTick>
 8005b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fc f95c 	bl	8001e24 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	; 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e356      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b7a:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0xe4>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fc f94c 	bl	8001e24 <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fc f948 	bl	8001e24 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	; 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e342      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ba2:	4b49      	ldr	r3, [pc, #292]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x10c>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 808c 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc0:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bca:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_RCC_OscConfig+0x162>
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	2b18      	cmp	r3, #24
 8005bda:	d137      	bne.n	8005c4c <HAL_RCC_OscConfig+0x1c8>
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d132      	bne.n	8005c4c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005be6:	4b38      	ldr	r3, [pc, #224]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_RCC_OscConfig+0x17a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e314      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bfe:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 0219 	bic.w	r2, r3, #25
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	492f      	ldr	r1, [pc, #188]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fc f908 	bl	8001e24 <HAL_GetTick>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fc f904 	bl	8001e24 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e2fe      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c2a:	4b27      	ldr	r3, [pc, #156]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	4920      	ldr	r1, [pc, #128]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c4a:	e045      	b.n	8005cd8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d026      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c54:	4b1c      	ldr	r3, [pc, #112]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 0219 	bic.w	r2, r3, #25
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4919      	ldr	r1, [pc, #100]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c66:	f7fc f8dd 	bl	8001e24 <HAL_GetTick>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c6e:	f7fc f8d9 	bl	8001e24 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e2d3      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c80:	4b11      	ldr	r3, [pc, #68]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	061b      	lsls	r3, r3, #24
 8005c9a:	490b      	ldr	r1, [pc, #44]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	e01a      	b.n	8005cd8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <HAL_RCC_OscConfig+0x244>)
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fc f8b9 	bl	8001e24 <HAL_GetTick>
 8005cb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fc f8b5 	bl	8001e24 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d903      	bls.n	8005ccc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e2af      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
 8005cc8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ee      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d06a      	beq.n	8005dba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce4:	4b90      	ldr	r3, [pc, #576]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cee:	4b8e      	ldr	r3, [pc, #568]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d007      	beq.n	8005d0a <HAL_RCC_OscConfig+0x286>
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b18      	cmp	r3, #24
 8005cfe:	d11b      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2b4>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d116      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0a:	4b87      	ldr	r3, [pc, #540]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_RCC_OscConfig+0x29e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e282      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d22:	4b81      	ldr	r3, [pc, #516]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	061b      	lsls	r3, r3, #24
 8005d30:	497d      	ldr	r1, [pc, #500]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d36:	e040      	b.n	8005dba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d023      	beq.n	8005d88 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d40:	4b79      	ldr	r3, [pc, #484]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a78      	ldr	r2, [pc, #480]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fc f86a 	bl	8001e24 <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d54:	f7fc f866 	bl	8001e24 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e260      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d66:	4b70      	ldr	r3, [pc, #448]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d72:	4b6d      	ldr	r3, [pc, #436]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	4969      	ldr	r1, [pc, #420]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60cb      	str	r3, [r1, #12]
 8005d86:	e018      	b.n	8005dba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d88:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a66      	ldr	r2, [pc, #408]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc f846 	bl	8001e24 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d9c:	f7fc f842 	bl	8001e24 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e23c      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dae:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d036      	beq.n	8005e34 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d019      	beq.n	8005e02 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dce:	4b56      	ldr	r3, [pc, #344]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd2:	4a55      	ldr	r2, [pc, #340]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dda:	f7fc f823 	bl	8001e24 <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de2:	f7fc f81f 	bl	8001e24 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e219      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005df4:	4b4c      	ldr	r3, [pc, #304]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x35e>
 8005e00:	e018      	b.n	8005e34 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e02:	4b49      	ldr	r3, [pc, #292]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e06:	4a48      	ldr	r2, [pc, #288]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0e:	f7fc f809 	bl	8001e24 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e16:	f7fc f805 	bl	8001e24 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1ff      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e28:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d036      	beq.n	8005eae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e48:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a36      	ldr	r2, [pc, #216]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e54:	f7fb ffe6 	bl	8001e24 <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e5c:	f7fb ffe2 	bl	8001e24 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e1dc      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e6e:	4b2e      	ldr	r3, [pc, #184]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x3d8>
 8005e7a:	e018      	b.n	8005eae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e88:	f7fb ffcc 	bl	8001e24 <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e90:	f7fb ffc8 	bl	8001e24 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e1c2      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ea2:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8086 	beq.w	8005fc8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ebc:	4b1b      	ldr	r3, [pc, #108]	; (8005f2c <HAL_RCC_OscConfig+0x4a8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_RCC_OscConfig+0x4a8>)
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec8:	f7fb ffac 	bl	8001e24 <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed0:	f7fb ffa8 	bl	8001e24 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1a2      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee2:	4b12      	ldr	r3, [pc, #72]	; (8005f2c <HAL_RCC_OscConfig+0x4a8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCC_OscConfig+0x480>
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	4a0b      	ldr	r2, [pc, #44]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6713      	str	r3, [r2, #112]	; 0x70
 8005f02:	e032      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4ac>
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a02      	ldr	r2, [pc, #8]	; (8005f28 <HAL_RCC_OscConfig+0x4a4>)
 8005f1e:	f023 0304 	bic.w	r3, r3, #4
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	e021      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e6>
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	58024800 	.word	0x58024800
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d10c      	bne.n	8005f52 <HAL_RCC_OscConfig+0x4ce>
 8005f38:	4b83      	ldr	r3, [pc, #524]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a82      	ldr	r2, [pc, #520]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f3e:	f043 0304 	orr.w	r3, r3, #4
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
 8005f44:	4b80      	ldr	r3, [pc, #512]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a7f      	ldr	r2, [pc, #508]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f4a:	f043 0301 	orr.w	r3, r3, #1
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f50:	e00b      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e6>
 8005f52:	4b7d      	ldr	r3, [pc, #500]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	4a7c      	ldr	r2, [pc, #496]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5e:	4b7a      	ldr	r3, [pc, #488]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	4a79      	ldr	r2, [pc, #484]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f72:	f7fb ff57 	bl	8001e24 <HAL_GetTick>
 8005f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f78:	e00a      	b.n	8005f90 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7a:	f7fb ff53 	bl	8001e24 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e14b      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f90:	4b6d      	ldr	r3, [pc, #436]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0ee      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4f6>
 8005f9c:	e014      	b.n	8005fc8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fb ff41 	bl	8001e24 <HAL_GetTick>
 8005fa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fb ff3d 	bl	8001e24 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e135      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fbc:	4b62      	ldr	r3, [pc, #392]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ee      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 812a 	beq.w	8006226 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fd2:	4b5d      	ldr	r3, [pc, #372]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fda:	2b18      	cmp	r3, #24
 8005fdc:	f000 80ba 	beq.w	8006154 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	f040 8095 	bne.w	8006114 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fea:	4b57      	ldr	r3, [pc, #348]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a56      	ldr	r2, [pc, #344]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8005ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fb ff15 	bl	8001e24 <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffe:	f7fb ff11 	bl	8001e24 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e10b      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006010:	4b4d      	ldr	r3, [pc, #308]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f0      	bne.n	8005ffe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800601c:	4b4a      	ldr	r3, [pc, #296]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800601e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006020:	4b4a      	ldr	r3, [pc, #296]	; (800614c <HAL_RCC_OscConfig+0x6c8>)
 8006022:	4013      	ands	r3, r2
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800602c:	0112      	lsls	r2, r2, #4
 800602e:	430a      	orrs	r2, r1
 8006030:	4945      	ldr	r1, [pc, #276]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006032:	4313      	orrs	r3, r2
 8006034:	628b      	str	r3, [r1, #40]	; 0x28
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	3b01      	subs	r3, #1
 800603c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006044:	3b01      	subs	r3, #1
 8006046:	025b      	lsls	r3, r3, #9
 8006048:	b29b      	uxth	r3, r3
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	3b01      	subs	r3, #1
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	3b01      	subs	r3, #1
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006066:	4938      	ldr	r1, [pc, #224]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006068:	4313      	orrs	r3, r2
 800606a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800606c:	4b36      	ldr	r3, [pc, #216]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	4a35      	ldr	r2, [pc, #212]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006078:	4b33      	ldr	r3, [pc, #204]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800607a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800607c:	4b34      	ldr	r3, [pc, #208]	; (8006150 <HAL_RCC_OscConfig+0x6cc>)
 800607e:	4013      	ands	r3, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006084:	00d2      	lsls	r2, r2, #3
 8006086:	4930      	ldr	r1, [pc, #192]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006088:	4313      	orrs	r3, r2
 800608a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f023 020c 	bic.w	r2, r3, #12
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	492b      	ldr	r1, [pc, #172]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800609e:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	f023 0202 	bic.w	r2, r3, #2
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	4927      	ldr	r1, [pc, #156]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a24      	ldr	r2, [pc, #144]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4b22      	ldr	r3, [pc, #136]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060c8:	4b1f      	ldr	r3, [pc, #124]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060d4:	4b1c      	ldr	r3, [pc, #112]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 80060e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fb fe9a 	bl	8001e24 <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fb fe96 	bl	8001e24 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e090      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x670>
 8006112:	e088      	b.n	8006226 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800611a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800611e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fb fe80 	bl	8001e24 <HAL_GetTick>
 8006124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fb fe7c 	bl	8001e24 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e076      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800613a:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCC_OscConfig+0x6c4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x6a4>
 8006146:	e06e      	b.n	8006226 <HAL_RCC_OscConfig+0x7a2>
 8006148:	58024400 	.word	0x58024400
 800614c:	fffffc0c 	.word	0xfffffc0c
 8006150:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006154:	4b36      	ldr	r3, [pc, #216]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800615a:	4b35      	ldr	r3, [pc, #212]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b01      	cmp	r3, #1
 8006166:	d031      	beq.n	80061cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f003 0203 	and.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d12a      	bne.n	80061cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d122      	bne.n	80061cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006190:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11a      	bne.n	80061cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	0a5b      	lsrs	r3, r3, #9
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d111      	bne.n	80061cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d108      	bne.n	80061cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	0e1b      	lsrs	r3, r3, #24
 80061be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e02b      	b.n	8006228 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061d0:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 80061d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d01f      	beq.n	8006226 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061e6:	4b12      	ldr	r3, [pc, #72]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	4a11      	ldr	r2, [pc, #68]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061f2:	f7fb fe17 	bl	8001e24 <HAL_GetTick>
 80061f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061f8:	bf00      	nop
 80061fa:	f7fb fe13 	bl	8001e24 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	4293      	cmp	r3, r2
 8006204:	d0f9      	beq.n	80061fa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 8006208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <HAL_RCC_OscConfig+0x7b0>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4906      	ldr	r1, [pc, #24]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 8006216:	4313      	orrs	r3, r2
 8006218:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a04      	ldr	r2, [pc, #16]	; (8006230 <HAL_RCC_OscConfig+0x7ac>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3730      	adds	r7, #48	; 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	58024400 	.word	0x58024400
 8006234:	ffff0007 	.word	0xffff0007

08006238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e19c      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800624c:	4b8a      	ldr	r3, [pc, #552]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d910      	bls.n	800627c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800625a:	4b87      	ldr	r3, [pc, #540]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f023 020f 	bic.w	r2, r3, #15
 8006262:	4985      	ldr	r1, [pc, #532]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4313      	orrs	r3, r2
 8006268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800626a:	4b83      	ldr	r3, [pc, #524]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d001      	beq.n	800627c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e184      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	4b7b      	ldr	r3, [pc, #492]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006294:	429a      	cmp	r2, r3
 8006296:	d908      	bls.n	80062aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006298:	4b78      	ldr	r3, [pc, #480]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	4975      	ldr	r1, [pc, #468]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d010      	beq.n	80062d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	695a      	ldr	r2, [r3, #20]
 80062ba:	4b70      	ldr	r3, [pc, #448]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d908      	bls.n	80062d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c6:	4b6d      	ldr	r3, [pc, #436]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	496a      	ldr	r1, [pc, #424]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	4b64      	ldr	r3, [pc, #400]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d908      	bls.n	8006306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	495e      	ldr	r1, [pc, #376]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006302:	4313      	orrs	r3, r2
 8006304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631e:	429a      	cmp	r2, r3
 8006320:	d908      	bls.n	8006334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006322:	4b56      	ldr	r3, [pc, #344]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	4953      	ldr	r1, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006330:	4313      	orrs	r3, r2
 8006332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	4b4d      	ldr	r3, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b4a      	ldr	r3, [pc, #296]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f023 020f 	bic.w	r2, r3, #15
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4947      	ldr	r1, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800635e:	4313      	orrs	r3, r2
 8006360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d055      	beq.n	800641a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4940      	ldr	r1, [pc, #256]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800637c:	4313      	orrs	r3, r2
 800637e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d107      	bne.n	8006398 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006388:	4b3c      	ldr	r3, [pc, #240]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d121      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0f6      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063a0:	4b36      	ldr	r3, [pc, #216]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d115      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e0ea      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063b8:	4b30      	ldr	r3, [pc, #192]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0de      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c8:	4b2c      	ldr	r3, [pc, #176]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0d6      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d8:	4b28      	ldr	r3, [pc, #160]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f023 0207 	bic.w	r2, r3, #7
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4925      	ldr	r1, [pc, #148]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ea:	f7fb fd1b 	bl	8001e24 <HAL_GetTick>
 80063ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f2:	f7fb fd17 	bl	8001e24 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006400:	4293      	cmp	r3, r2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0be      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	429a      	cmp	r2, r3
 8006418:	d1eb      	bne.n	80063f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	4b14      	ldr	r3, [pc, #80]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	429a      	cmp	r2, r3
 8006434:	d208      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006436:	4b11      	ldr	r3, [pc, #68]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f023 020f 	bic.w	r2, r3, #15
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x244>)
 8006444:	4313      	orrs	r3, r2
 8006446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d214      	bcs.n	8006480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 020f 	bic.w	r2, r3, #15
 800645e:	4906      	ldr	r1, [pc, #24]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	4313      	orrs	r3, r2
 8006464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b04      	ldr	r3, [pc, #16]	; (8006478 <HAL_RCC_ClockConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d005      	beq.n	8006480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e086      	b.n	8006586 <HAL_RCC_ClockConfig+0x34e>
 8006478:	52002000 	.word	0x52002000
 800647c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	4b3f      	ldr	r3, [pc, #252]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006498:	429a      	cmp	r2, r3
 800649a:	d208      	bcs.n	80064ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800649c:	4b3c      	ldr	r3, [pc, #240]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	4939      	ldr	r1, [pc, #228]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d010      	beq.n	80064dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	4b34      	ldr	r3, [pc, #208]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d208      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ca:	4b31      	ldr	r3, [pc, #196]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	492e      	ldr	r1, [pc, #184]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0310 	and.w	r3, r3, #16
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	4b28      	ldr	r3, [pc, #160]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d208      	bcs.n	800650a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	4922      	ldr	r1, [pc, #136]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006506:	4313      	orrs	r3, r2
 8006508:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69da      	ldr	r2, [r3, #28]
 800651a:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006522:	429a      	cmp	r2, r3
 8006524:	d208      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006526:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4917      	ldr	r1, [pc, #92]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006534:	4313      	orrs	r3, r2
 8006536:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006538:	f000 f834 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	4912      	ldr	r1, [pc, #72]	; (8006594 <HAL_RCC_ClockConfig+0x35c>)
 800654a:	5ccb      	ldrb	r3, [r1, r3]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	fa22 f303 	lsr.w	r3, r2, r3
 8006554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_RCC_ClockConfig+0x358>)
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	4a0d      	ldr	r2, [pc, #52]	; (8006594 <HAL_RCC_ClockConfig+0x35c>)
 8006560:	5cd3      	ldrb	r3, [r2, r3]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_RCC_ClockConfig+0x360>)
 800656e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x364>)
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006576:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <HAL_RCC_ClockConfig+0x368>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fb fc08 	bl	8001d90 <HAL_InitTick>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
 8006594:	0800f32c 	.word	0x0800f32c
 8006598:	24000004 	.word	0x24000004
 800659c:	24000000 	.word	0x24000000
 80065a0:	24000008 	.word	0x24000008

080065a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065aa:	4bb3      	ldr	r3, [pc, #716]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b2:	2b18      	cmp	r3, #24
 80065b4:	f200 8155 	bhi.w	8006862 <HAL_RCC_GetSysClockFreq+0x2be>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006863 	.word	0x08006863
 80065c8:	08006863 	.word	0x08006863
 80065cc:	08006863 	.word	0x08006863
 80065d0:	08006863 	.word	0x08006863
 80065d4:	08006863 	.word	0x08006863
 80065d8:	08006863 	.word	0x08006863
 80065dc:	08006863 	.word	0x08006863
 80065e0:	0800664b 	.word	0x0800664b
 80065e4:	08006863 	.word	0x08006863
 80065e8:	08006863 	.word	0x08006863
 80065ec:	08006863 	.word	0x08006863
 80065f0:	08006863 	.word	0x08006863
 80065f4:	08006863 	.word	0x08006863
 80065f8:	08006863 	.word	0x08006863
 80065fc:	08006863 	.word	0x08006863
 8006600:	08006651 	.word	0x08006651
 8006604:	08006863 	.word	0x08006863
 8006608:	08006863 	.word	0x08006863
 800660c:	08006863 	.word	0x08006863
 8006610:	08006863 	.word	0x08006863
 8006614:	08006863 	.word	0x08006863
 8006618:	08006863 	.word	0x08006863
 800661c:	08006863 	.word	0x08006863
 8006620:	08006657 	.word	0x08006657
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006624:	4b94      	ldr	r3, [pc, #592]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006630:	4b91      	ldr	r3, [pc, #580]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	08db      	lsrs	r3, r3, #3
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	4a90      	ldr	r2, [pc, #576]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
 8006640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006642:	e111      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006644:	4b8d      	ldr	r3, [pc, #564]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006646:	61bb      	str	r3, [r7, #24]
      break;
 8006648:	e10e      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800664a:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800664c:	61bb      	str	r3, [r7, #24]
      break;
 800664e:	e10b      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006650:	4b8c      	ldr	r3, [pc, #560]	; (8006884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006652:	61bb      	str	r3, [r7, #24]
      break;
 8006654:	e108      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006656:	4b88      	ldr	r3, [pc, #544]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006660:	4b85      	ldr	r3, [pc, #532]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800666a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800666c:	4b82      	ldr	r3, [pc, #520]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006676:	4b80      	ldr	r3, [pc, #512]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	08db      	lsrs	r3, r3, #3
 800667c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 80e1 	beq.w	800685c <HAL_RCC_GetSysClockFreq+0x2b8>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b02      	cmp	r3, #2
 800669e:	f000 8083 	beq.w	80067a8 <HAL_RCC_GetSysClockFreq+0x204>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f200 80a1 	bhi.w	80067ec <HAL_RCC_GetSysClockFreq+0x248>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_RCC_GetSysClockFreq+0x114>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d056      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066b6:	e099      	b.n	80067ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066b8:	4b6f      	ldr	r3, [pc, #444]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d02d      	beq.n	8006720 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066c4:	4b6c      	ldr	r3, [pc, #432]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	08db      	lsrs	r3, r3, #3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	4a6b      	ldr	r2, [pc, #428]	; (800687c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ee:	4b62      	ldr	r3, [pc, #392]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800671e:	e087      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	ee07 3a90 	vmov	s15, r3
 8006726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800672a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800688c <HAL_RCC_GetSysClockFreq+0x2e8>
 800672e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006732:	4b51      	ldr	r3, [pc, #324]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	ed97 6a02 	vldr	s12, [r7, #8]
 8006746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800674a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006762:	e065      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006776:	4b40      	ldr	r3, [pc, #256]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677e:	ee07 3a90 	vmov	s15, r3
 8006782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006786:	ed97 6a02 	vldr	s12, [r7, #8]
 800678a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800678e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067a6:	e043      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	ee07 3a90 	vmov	s15, r3
 80067ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ba:	4b2f      	ldr	r3, [pc, #188]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067ea:	e021      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	ee07 3a90 	vmov	s15, r3
 80067f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067fe:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006806:	ee07 3a90 	vmov	s15, r3
 800680a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800682e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006830:	4b11      	ldr	r3, [pc, #68]	; (8006878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	0a5b      	lsrs	r3, r3, #9
 8006836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683a:	3301      	adds	r3, #1
 800683c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006848:	edd7 6a07 	vldr	s13, [r7, #28]
 800684c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006854:	ee17 3a90 	vmov	r3, s15
 8006858:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800685a:	e005      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
      break;
 8006860:	e002      	b.n	8006868 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006862:	4b07      	ldr	r3, [pc, #28]	; (8006880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006864:	61bb      	str	r3, [r7, #24]
      break;
 8006866:	bf00      	nop
  }

  return sysclockfreq;
 8006868:	69bb      	ldr	r3, [r7, #24]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3724      	adds	r7, #36	; 0x24
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
 8006884:	007a1200 	.word	0x007a1200
 8006888:	46000000 	.word	0x46000000
 800688c:	4c742400 	.word	0x4c742400
 8006890:	4a742400 	.word	0x4a742400
 8006894:	4af42400 	.word	0x4af42400

08006898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800689e:	f7ff fe81 	bl	80065a4 <HAL_RCC_GetSysClockFreq>
 80068a2:	4602      	mov	r2, r0
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	490f      	ldr	r1, [pc, #60]	; (80068ec <HAL_RCC_GetHCLKFreq+0x54>)
 80068b0:	5ccb      	ldrb	r3, [r1, r3]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	4a09      	ldr	r2, [pc, #36]	; (80068ec <HAL_RCC_GetHCLKFreq+0x54>)
 80068c6:	5cd3      	ldrb	r3, [r2, r3]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	fa22 f303 	lsr.w	r3, r2, r3
 80068d2:	4a07      	ldr	r2, [pc, #28]	; (80068f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068d6:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	58024400 	.word	0x58024400
 80068ec:	0800f32c 	.word	0x0800f32c
 80068f0:	24000004 	.word	0x24000004
 80068f4:	24000000 	.word	0x24000000

080068f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068fc:	f7ff ffcc 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4904      	ldr	r1, [pc, #16]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	58024400 	.word	0x58024400
 8006920:	0800f32c 	.word	0x0800f32c

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006928:	f7ff ffb6 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4904      	ldr	r1, [pc, #16]	; (800694c <HAL_RCC_GetPCLK2Freq+0x28>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	58024400 	.word	0x58024400
 800694c:	0800f32c 	.word	0x0800f32c

08006950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006954:	b0c6      	sub	sp, #280	; 0x118
 8006956:	af00      	add	r7, sp, #0
 8006958:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800695c:	2300      	movs	r3, #0
 800695e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006962:	2300      	movs	r3, #0
 8006964:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006974:	2500      	movs	r5, #0
 8006976:	ea54 0305 	orrs.w	r3, r4, r5
 800697a:	d049      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006986:	d02f      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800698c:	d828      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800698e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006992:	d01a      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006994:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006998:	d822      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800699e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a2:	d007      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80069a4:	e01c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a6:	4bab      	ldr	r3, [pc, #684]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	4aaa      	ldr	r2, [pc, #680]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069b2:	e01a      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b8:	3308      	adds	r3, #8
 80069ba:	2102      	movs	r1, #2
 80069bc:	4618      	mov	r0, r3
 80069be:	f002 fa49 	bl	8008e54 <RCCEx_PLL2_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069c8:	e00f      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ce:	3328      	adds	r3, #40	; 0x28
 80069d0:	2102      	movs	r1, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 faf0 	bl	8008fb8 <RCCEx_PLL3_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069f2:	4b98      	ldr	r3, [pc, #608]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a00:	4a94      	ldr	r2, [pc, #592]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a02:	430b      	orrs	r3, r1
 8006a04:	6513      	str	r3, [r2, #80]	; 0x50
 8006a06:	e003      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	ea58 0309 	orrs.w	r3, r8, r9
 8006a24:	d047      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d82a      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a4d 	.word	0x08006a4d
 8006a3c:	08006a5b 	.word	0x08006a5b
 8006a40:	08006a71 	.word	0x08006a71
 8006a44:	08006a8f 	.word	0x08006a8f
 8006a48:	08006a8f 	.word	0x08006a8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4c:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a50:	4a80      	ldr	r2, [pc, #512]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a58:	e01a      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	3308      	adds	r3, #8
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 f9f6 	bl	8008e54 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a6e:	e00f      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a74:	3328      	adds	r3, #40	; 0x28
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 fa9d 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a98:	4b6e      	ldr	r3, [pc, #440]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9c:	f023 0107 	bic.w	r1, r3, #7
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa6:	4a6b      	ldr	r2, [pc, #428]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8006aac:	e003      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ab2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006ac2:	f04f 0b00 	mov.w	fp, #0
 8006ac6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aca:	d05b      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ad4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006ad8:	d03b      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006ada:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006ade:	d834      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ae4:	d037      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aea:	d82e      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006aec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af0:	d033      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006af2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af6:	d828      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afc:	d01a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b02:	d822      	bhi.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006b0e:	e01c      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b10:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	4a4f      	ldr	r2, [pc, #316]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b1c:	e01e      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b22:	3308      	adds	r3, #8
 8006b24:	2100      	movs	r1, #0
 8006b26:	4618      	mov	r0, r3
 8006b28:	f002 f994 	bl	8008e54 <RCCEx_PLL2_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b32:	e013      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	3328      	adds	r3, #40	; 0x28
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f002 fa3b 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b48:	e008      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b50:	e004      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b52:	bf00      	nop
 8006b54:	e002      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b56:	bf00      	nop
 8006b58:	e000      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b64:	4b3b      	ldr	r3, [pc, #236]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b74:	4a37      	ldr	r2, [pc, #220]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b76:	430b      	orrs	r3, r1
 8006b78:	6593      	str	r3, [r2, #88]	; 0x58
 8006b7a:	e003      	b.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b94:	2300      	movs	r3, #0
 8006b96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	d05d      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006bac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006bb0:	d03b      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006bb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006bb6:	d834      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bbc:	d037      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bc2:	d82e      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bc8:	d033      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bce:	d828      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd4:	d01a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bda:	d822      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006be4:	d007      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006be6:	e01c      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf4:	e01e      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f928 	bl	8008e54 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c0a:	e013      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	3328      	adds	r3, #40	; 0x28
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 f9cf 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e008      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c28:	e004      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c2a:	bf00      	nop
 8006c2c:	e002      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c2e:	bf00      	nop
 8006c30:	e000      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c4c:	4a01      	ldr	r2, [pc, #4]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	6593      	str	r3, [r2, #88]	; 0x58
 8006c52:	e005      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d03a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	2b30      	cmp	r3, #48	; 0x30
 8006c88:	d01f      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c8a:	2b30      	cmp	r3, #48	; 0x30
 8006c8c:	d819      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d00c      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d815      	bhi.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d019      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d111      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9e:	4baa      	ldr	r3, [pc, #680]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	4aa9      	ldr	r2, [pc, #676]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006caa:	e011      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2102      	movs	r1, #2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f002 f8cd 	bl	8008e54 <RCCEx_PLL2_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006cc0:	e006      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cc8:	e002      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cd8:	4b9b      	ldr	r3, [pc, #620]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	4a98      	ldr	r2, [pc, #608]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce8:	430b      	orrs	r3, r1
 8006cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cec:	e003      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cf2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006d02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006d0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006d10:	460b      	mov	r3, r1
 8006d12:	4313      	orrs	r3, r2
 8006d14:	d051      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d20:	d035      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d26:	d82e      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d2c:	d031      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d32:	d828      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d38:	d01a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d822      	bhi.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d48:	d007      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006d4a:	e01c      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d4c:	4b7e      	ldr	r3, [pc, #504]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4a7d      	ldr	r2, [pc, #500]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d58:	e01c      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5e:	3308      	adds	r3, #8
 8006d60:	2100      	movs	r1, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f002 f876 	bl	8008e54 <RCCEx_PLL2_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d6e:	e011      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	3328      	adds	r3, #40	; 0x28
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f002 f91d 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d84:	e006      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d8c:	e002      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d9c:	4b6a      	ldr	r3, [pc, #424]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	4a67      	ldr	r2, [pc, #412]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dac:	430b      	orrs	r3, r1
 8006dae:	6513      	str	r3, [r2, #80]	; 0x50
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006db6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006dc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	d053      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de4:	d033      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dea:	d82c      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df0:	d02f      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006df6:	d826      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dfc:	d02b      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e02:	d820      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e08:	d012      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e0e:	d81a      	bhi.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d022      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e18:	d115      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1e:	3308      	adds	r3, #8
 8006e20:	2101      	movs	r1, #1
 8006e22:	4618      	mov	r0, r3
 8006e24:	f002 f816 	bl	8008e54 <RCCEx_PLL2_Config>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e2e:	e015      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e34:	3328      	adds	r3, #40	; 0x28
 8006e36:	2101      	movs	r1, #1
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f002 f8bd 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e44:	e00a      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e4c:	e006      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e4e:	bf00      	nop
 8006e50:	e004      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e52:	bf00      	nop
 8006e54:	e002      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e56:	bf00      	nop
 8006e58:	e000      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e64:	4b38      	ldr	r3, [pc, #224]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e72:	4a35      	ldr	r2, [pc, #212]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6513      	str	r3, [r2, #80]	; 0x50
 8006e78:	e003      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e92:	2300      	movs	r3, #0
 8006e94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	d058      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ea6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eae:	d033      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb4:	d82c      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d02f      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec0:	d826      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ec6:	d02b      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ecc:	d820      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed2:	d012      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed8:	d81a      	bhi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d022      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ee2:	d115      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee8:	3308      	adds	r3, #8
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 ffb1 	bl	8008e54 <RCCEx_PLL2_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e015      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	3328      	adds	r3, #40	; 0x28
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 f858 	bl	8008fb8 <RCCEx_PLL3_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f16:	e006      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f18:	bf00      	nop
 8006f1a:	e004      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10e      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f3e:	4a02      	ldr	r2, [pc, #8]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6593      	str	r3, [r2, #88]	; 0x58
 8006f44:	e006      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006f46:	bf00      	nop
 8006f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006f6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d037      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f7e:	d00e      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f84:	d816      	bhi.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d018      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f8e:	d111      	bne.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f90:	4bc4      	ldr	r3, [pc, #784]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4ac3      	ldr	r2, [pc, #780]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f9c:	e00f      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 ff54 	bl	8008e54 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006fb2:	e004      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fba:	e000      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fc6:	4bb7      	ldr	r3, [pc, #732]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd4:	4ab3      	ldr	r2, [pc, #716]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	6513      	str	r3, [r2, #80]	; 0x50
 8006fda:	e003      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fe0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006ffe:	460b      	mov	r3, r1
 8007000:	4313      	orrs	r3, r2
 8007002:	d039      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700a:	2b03      	cmp	r3, #3
 800700c:	d81c      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007051 	.word	0x08007051
 8007018:	08007025 	.word	0x08007025
 800701c:	08007033 	.word	0x08007033
 8007020:	08007051 	.word	0x08007051
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007024:	4b9f      	ldr	r3, [pc, #636]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	4a9e      	ldr	r2, [pc, #632]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800702a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007030:	e00f      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007036:	3308      	adds	r3, #8
 8007038:	2102      	movs	r1, #2
 800703a:	4618      	mov	r0, r3
 800703c:	f001 ff0a 	bl	8008e54 <RCCEx_PLL2_Config>
 8007040:	4603      	mov	r3, r0
 8007042:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007046:	e004      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800704e:	e000      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007052:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800705a:	4b92      	ldr	r3, [pc, #584]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	f023 0103 	bic.w	r1, r3, #3
 8007062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007068:	4a8e      	ldr	r2, [pc, #568]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800706a:	430b      	orrs	r3, r1
 800706c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007070:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007074:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800708e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	f000 8099 	beq.w	80071cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800709a:	4b83      	ldr	r3, [pc, #524]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a82      	ldr	r2, [pc, #520]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070a6:	f7fa febd 	bl	8001e24 <HAL_GetTick>
 80070aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070ae:	e00b      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070b0:	f7fa feb8 	bl	8001e24 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b64      	cmp	r3, #100	; 0x64
 80070be:	d903      	bls.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070c6:	e005      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070c8:	4b77      	ldr	r3, [pc, #476]	; (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0ed      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80070d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d173      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070dc:	4b71      	ldr	r3, [pc, #452]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070e8:	4053      	eors	r3, r2
 80070ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d015      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070f2:	4b6c      	ldr	r3, [pc, #432]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070fe:	4b69      	ldr	r3, [pc, #420]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007102:	4a68      	ldr	r2, [pc, #416]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007108:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800710a:	4b66      	ldr	r3, [pc, #408]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	4a65      	ldr	r2, [pc, #404]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007114:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007116:	4a63      	ldr	r2, [pc, #396]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800711c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d118      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712c:	f7fa fe7a 	bl	8001e24 <HAL_GetTick>
 8007130:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007134:	e00d      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fa fe75 	bl	8001e24 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	f241 3388 	movw	r3, #5000	; 0x1388
 8007146:	429a      	cmp	r2, r3
 8007148:	d903      	bls.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007150:	e005      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007152:	4b54      	ldr	r3, [pc, #336]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0eb      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800715e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007162:	2b00      	cmp	r3, #0
 8007164:	d129      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800716e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007176:	d10e      	bne.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007178:	4b4a      	ldr	r3, [pc, #296]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007188:	091a      	lsrs	r2, r3, #4
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800718c:	4013      	ands	r3, r2
 800718e:	4a45      	ldr	r2, [pc, #276]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007190:	430b      	orrs	r3, r1
 8007192:	6113      	str	r3, [r2, #16]
 8007194:	e005      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007196:	4b43      	ldr	r3, [pc, #268]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	4a42      	ldr	r2, [pc, #264]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800719c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071a0:	6113      	str	r3, [r2, #16]
 80071a2:	4b40      	ldr	r3, [pc, #256]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b2:	4a3c      	ldr	r2, [pc, #240]	; (80072a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071b4:	430b      	orrs	r3, r1
 80071b6:	6713      	str	r3, [r2, #112]	; 0x70
 80071b8:	e008      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f002 0301 	and.w	r3, r2, #1
 80071d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f000 808f 	beq.w	800730c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071f4:	2b28      	cmp	r3, #40	; 0x28
 80071f6:	d871      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	080072e5 	.word	0x080072e5
 8007204:	080072dd 	.word	0x080072dd
 8007208:	080072dd 	.word	0x080072dd
 800720c:	080072dd 	.word	0x080072dd
 8007210:	080072dd 	.word	0x080072dd
 8007214:	080072dd 	.word	0x080072dd
 8007218:	080072dd 	.word	0x080072dd
 800721c:	080072dd 	.word	0x080072dd
 8007220:	080072b1 	.word	0x080072b1
 8007224:	080072dd 	.word	0x080072dd
 8007228:	080072dd 	.word	0x080072dd
 800722c:	080072dd 	.word	0x080072dd
 8007230:	080072dd 	.word	0x080072dd
 8007234:	080072dd 	.word	0x080072dd
 8007238:	080072dd 	.word	0x080072dd
 800723c:	080072dd 	.word	0x080072dd
 8007240:	080072c7 	.word	0x080072c7
 8007244:	080072dd 	.word	0x080072dd
 8007248:	080072dd 	.word	0x080072dd
 800724c:	080072dd 	.word	0x080072dd
 8007250:	080072dd 	.word	0x080072dd
 8007254:	080072dd 	.word	0x080072dd
 8007258:	080072dd 	.word	0x080072dd
 800725c:	080072dd 	.word	0x080072dd
 8007260:	080072e5 	.word	0x080072e5
 8007264:	080072dd 	.word	0x080072dd
 8007268:	080072dd 	.word	0x080072dd
 800726c:	080072dd 	.word	0x080072dd
 8007270:	080072dd 	.word	0x080072dd
 8007274:	080072dd 	.word	0x080072dd
 8007278:	080072dd 	.word	0x080072dd
 800727c:	080072dd 	.word	0x080072dd
 8007280:	080072e5 	.word	0x080072e5
 8007284:	080072dd 	.word	0x080072dd
 8007288:	080072dd 	.word	0x080072dd
 800728c:	080072dd 	.word	0x080072dd
 8007290:	080072dd 	.word	0x080072dd
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072e5 	.word	0x080072e5
 80072a4:	58024400 	.word	0x58024400
 80072a8:	58024800 	.word	0x58024800
 80072ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b4:	3308      	adds	r3, #8
 80072b6:	2101      	movs	r1, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fdcb 	bl	8008e54 <RCCEx_PLL2_Config>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072c4:	e00f      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ca:	3328      	adds	r3, #40	; 0x28
 80072cc:	2101      	movs	r1, #1
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fe72 	bl	8008fb8 <RCCEx_PLL3_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072da:	e004      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80072e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072ee:	4bbf      	ldr	r3, [pc, #764]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072fc:	4abb      	ldr	r2, [pc, #748]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	6553      	str	r3, [r2, #84]	; 0x54
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007308:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800730c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	f002 0302 	and.w	r3, r2, #2
 8007318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800731c:	2300      	movs	r3, #0
 800731e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007322:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007326:	460b      	mov	r3, r1
 8007328:	4313      	orrs	r3, r2
 800732a:	d041      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007332:	2b05      	cmp	r3, #5
 8007334:	d824      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007336:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007389 	.word	0x08007389
 8007340:	08007355 	.word	0x08007355
 8007344:	0800736b 	.word	0x0800736b
 8007348:	08007389 	.word	0x08007389
 800734c:	08007389 	.word	0x08007389
 8007350:	08007389 	.word	0x08007389
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007358:	3308      	adds	r3, #8
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fd79 	bl	8008e54 <RCCEx_PLL2_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007368:	e00f      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736e:	3328      	adds	r3, #40	; 0x28
 8007370:	2101      	movs	r1, #1
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fe20 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800737e:	e004      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007386:	e000      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007392:	4b96      	ldr	r3, [pc, #600]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f023 0107 	bic.w	r1, r3, #7
 800739a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800739e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a0:	4a92      	ldr	r2, [pc, #584]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	6553      	str	r3, [r2, #84]	; 0x54
 80073a6:	e003      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f002 0304 	and.w	r3, r2, #4
 80073bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d044      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d825      	bhi.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	08007431 	.word	0x08007431
 80073e8:	080073fd 	.word	0x080073fd
 80073ec:	08007413 	.word	0x08007413
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	3308      	adds	r3, #8
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f001 fd25 	bl	8008e54 <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007410:	e00f      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007416:	3328      	adds	r3, #40	; 0x28
 8007418:	2101      	movs	r1, #1
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fdcc 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007426:	e004      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800742e:	e000      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007432:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800743a:	4b6c      	ldr	r3, [pc, #432]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743e:	f023 0107 	bic.w	r1, r3, #7
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	4a68      	ldr	r2, [pc, #416]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800744c:	430b      	orrs	r3, r1
 800744e:	6593      	str	r3, [r2, #88]	; 0x58
 8007450:	e003      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007456:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800745a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f002 0320 	and.w	r3, r2, #32
 8007466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800746a:	2300      	movs	r3, #0
 800746c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007470:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007474:	460b      	mov	r3, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	d055      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007486:	d033      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800748c:	d82c      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d02f      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007498:	d826      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800749a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800749e:	d02b      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80074a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074a4:	d820      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80074a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074aa:	d012      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b0:	d81a      	bhi.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d022      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80074b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ba:	d115      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c0:	3308      	adds	r3, #8
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fcc5 	bl	8008e54 <RCCEx_PLL2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074d0:	e015      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074d6:	3328      	adds	r3, #40	; 0x28
 80074d8:	2102      	movs	r1, #2
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fd6c 	bl	8008fb8 <RCCEx_PLL3_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074e6:	e00a      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074ee:	e006      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074f0:	bf00      	nop
 80074f2:	e004      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007516:	4a35      	ldr	r2, [pc, #212]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007518:	430b      	orrs	r3, r1
 800751a:	6553      	str	r3, [r2, #84]	; 0x54
 800751c:	e003      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800751e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007522:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007532:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007536:	2300      	movs	r3, #0
 8007538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800753c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007540:	460b      	mov	r3, r1
 8007542:	4313      	orrs	r3, r2
 8007544:	d058      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800754e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007552:	d033      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007554:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007558:	d82c      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	d02f      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007564:	d826      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800756a:	d02b      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800756c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007570:	d820      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007576:	d012      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757c:	d81a      	bhi.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800757e:	2b00      	cmp	r3, #0
 8007580:	d022      	beq.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007586:	d115      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758c:	3308      	adds	r3, #8
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fc5f 	bl	8008e54 <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800759c:	e015      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800759e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a2:	3328      	adds	r3, #40	; 0x28
 80075a4:	2102      	movs	r1, #2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 fd06 	bl	8008fb8 <RCCEx_PLL3_Config>
 80075ac:	4603      	mov	r3, r0
 80075ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80075b2:	e00a      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075ba:	e006      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075bc:	bf00      	nop
 80075be:	e004      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075c0:	bf00      	nop
 80075c2:	e002      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075c4:	bf00      	nop
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10e      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80075da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075e2:	4a02      	ldr	r2, [pc, #8]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075e4:	430b      	orrs	r3, r1
 80075e6:	6593      	str	r3, [r2, #88]	; 0x58
 80075e8:	e006      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800760e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	d055      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007620:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007624:	d033      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007626:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800762a:	d82c      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007630:	d02f      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007636:	d826      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007638:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800763c:	d02b      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800763e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007642:	d820      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007648:	d012      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800764a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800764e:	d81a      	bhi.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d022      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007658:	d115      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800765a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765e:	3308      	adds	r3, #8
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fbf6 	bl	8008e54 <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800766e:	e015      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007674:	3328      	adds	r3, #40	; 0x28
 8007676:	2102      	movs	r1, #2
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fc9d 	bl	8008fb8 <RCCEx_PLL3_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007684:	e00a      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800768c:	e006      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800768e:	bf00      	nop
 8007690:	e004      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007692:	bf00      	nop
 8007694:	e002      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800769a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10b      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076a4:	4ba0      	ldr	r3, [pc, #640]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b4:	4a9c      	ldr	r2, [pc, #624]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b6:	430b      	orrs	r3, r1
 80076b8:	6593      	str	r3, [r2, #88]	; 0x58
 80076ba:	e003      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80076c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	f002 0308 	and.w	r3, r2, #8
 80076d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d4:	2300      	movs	r3, #0
 80076d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80076da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80076de:	460b      	mov	r3, r1
 80076e0:	4313      	orrs	r3, r2
 80076e2:	d01e      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f0:	d10c      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f6:	3328      	adds	r3, #40	; 0x28
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 fc5c 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800770c:	4b86      	ldr	r3, [pc, #536]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800771c:	4a82      	ldr	r2, [pc, #520]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800771e:	430b      	orrs	r3, r1
 8007720:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	f002 0310 	and.w	r3, r2, #16
 800772e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007732:	2300      	movs	r3, #0
 8007734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007738:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800773c:	460b      	mov	r3, r1
 800773e:	4313      	orrs	r3, r2
 8007740:	d01e      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800774a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774e:	d10c      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	3328      	adds	r3, #40	; 0x28
 8007756:	2102      	movs	r1, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fc2d 	bl	8008fb8 <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800776a:	4b6f      	ldr	r3, [pc, #444]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800777a:	4a6b      	ldr	r2, [pc, #428]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800777c:	430b      	orrs	r3, r1
 800777e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800778c:	67bb      	str	r3, [r7, #120]	; 0x78
 800778e:	2300      	movs	r3, #0
 8007790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007792:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	d03e      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a8:	d022      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80077aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ae:	d81b      	bhi.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80077b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b8:	d00b      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80077ba:	e015      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c0:	3308      	adds	r3, #8
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fb45 	bl	8008e54 <RCCEx_PLL2_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077d0:	e00f      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	3328      	adds	r3, #40	; 0x28
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f001 fbec 	bl	8008fb8 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077e6:	e004      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80077ee:	e000      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80077f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077fa:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800780a:	4a47      	ldr	r2, [pc, #284]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800780c:	430b      	orrs	r3, r1
 800780e:	6593      	str	r3, [r2, #88]	; 0x58
 8007810:	e003      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007816:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007826:	673b      	str	r3, [r7, #112]	; 0x70
 8007828:	2300      	movs	r3, #0
 800782a:	677b      	str	r3, [r7, #116]	; 0x74
 800782c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007830:	460b      	mov	r3, r1
 8007832:	4313      	orrs	r3, r2
 8007834:	d03b      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800783a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007842:	d01f      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007844:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007848:	d818      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800784a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784e:	d003      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007850:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007854:	d007      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007856:	e011      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007858:	4b33      	ldr	r3, [pc, #204]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	4a32      	ldr	r2, [pc, #200]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800785e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007864:	e00f      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800786a:	3328      	adds	r3, #40	; 0x28
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fba2 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800787a:	e004      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007882:	e000      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007886:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800788e:	4b26      	ldr	r3, [pc, #152]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800789a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789e:	4a22      	ldr	r2, [pc, #136]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6553      	str	r3, [r2, #84]	; 0x54
 80078a4:	e003      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80078ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80078bc:	2300      	movs	r3, #0
 80078be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80078c4:	460b      	mov	r3, r1
 80078c6:	4313      	orrs	r3, r2
 80078c8:	d034      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80078d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d8:	d007      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80078da:	e011      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078dc:	4b12      	ldr	r3, [pc, #72]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4a11      	ldr	r2, [pc, #68]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078e8:	e00e      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ee:	3308      	adds	r3, #8
 80078f0:	2102      	movs	r1, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 faae 	bl	8008e54 <RCCEx_PLL2_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078fe:	e003      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10d      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	4a02      	ldr	r2, [pc, #8]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007920:	430b      	orrs	r3, r1
 8007922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007924:	e006      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007926:	bf00      	nop
 8007928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007940:	663b      	str	r3, [r7, #96]	; 0x60
 8007942:	2300      	movs	r3, #0
 8007944:	667b      	str	r3, [r7, #100]	; 0x64
 8007946:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800794a:	460b      	mov	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	d00c      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007954:	3328      	adds	r3, #40	; 0x28
 8007956:	2102      	movs	r1, #2
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fb2d 	bl	8008fb8 <RCCEx_PLL3_Config>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007976:	65bb      	str	r3, [r7, #88]	; 0x58
 8007978:	2300      	movs	r3, #0
 800797a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800797c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007980:	460b      	mov	r3, r1
 8007982:	4313      	orrs	r3, r2
 8007984:	d036      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800798c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007990:	d018      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007996:	d811      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799c:	d014      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800799e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a2:	d80b      	bhi.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d011      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80079a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ac:	d106      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ae:	4bb7      	ldr	r3, [pc, #732]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b2:	4ab6      	ldr	r2, [pc, #728]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80079ba:	e008      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80079c2:	e004      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079c4:	bf00      	nop
 80079c6:	e002      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079c8:	bf00      	nop
 80079ca:	e000      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10a      	bne.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079d6:	4bad      	ldr	r3, [pc, #692]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e4:	4aa9      	ldr	r2, [pc, #676]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e6:	430b      	orrs	r3, r1
 80079e8:	6553      	str	r3, [r2, #84]	; 0x54
 80079ea:	e003      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007a00:	653b      	str	r3, [r7, #80]	; 0x50
 8007a02:	2300      	movs	r3, #0
 8007a04:	657b      	str	r3, [r7, #84]	; 0x54
 8007a06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a10:	4b9e      	ldr	r3, [pc, #632]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	4a9b      	ldr	r2, [pc, #620]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a32:	2300      	movs	r3, #0
 8007a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a40:	4b92      	ldr	r3, [pc, #584]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a4e:	4a8f      	ldr	r2, [pc, #572]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a60:	643b      	str	r3, [r7, #64]	; 0x40
 8007a62:	2300      	movs	r3, #0
 8007a64:	647b      	str	r3, [r7, #68]	; 0x44
 8007a66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d00e      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a70:	4b86      	ldr	r3, [pc, #536]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	4a85      	ldr	r2, [pc, #532]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a7a:	6113      	str	r3, [r2, #16]
 8007a7c:	4b83      	ldr	r3, [pc, #524]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a7e:	6919      	ldr	r1, [r3, #16]
 8007a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a88:	4a80      	ldr	r2, [pc, #512]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aa0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007aaa:	4b78      	ldr	r3, [pc, #480]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab8:	4a74      	ldr	r2, [pc, #464]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aba:	430b      	orrs	r3, r1
 8007abc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
 8007acc:	2300      	movs	r3, #0
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d00a      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ada:	4b6c      	ldr	r3, [pc, #432]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ade:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	4a68      	ldr	r2, [pc, #416]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aec:	430b      	orrs	r3, r1
 8007aee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	2100      	movs	r1, #0
 8007afa:	62b9      	str	r1, [r7, #40]	; 0x28
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b06:	460b      	mov	r3, r1
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	d011      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b10:	3308      	adds	r3, #8
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 f99d 	bl	8008e54 <RCCEx_PLL2_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d003      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	2100      	movs	r1, #0
 8007b3a:	6239      	str	r1, [r7, #32]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
 8007b42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b46:	460b      	mov	r3, r1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d011      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	3308      	adds	r3, #8
 8007b52:	2101      	movs	r1, #1
 8007b54:	4618      	mov	r0, r3
 8007b56:	f001 f97d 	bl	8008e54 <RCCEx_PLL2_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b78:	2100      	movs	r1, #0
 8007b7a:	61b9      	str	r1, [r7, #24]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b86:	460b      	mov	r3, r1
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	d011      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b90:	3308      	adds	r3, #8
 8007b92:	2102      	movs	r1, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f001 f95d 	bl	8008e54 <RCCEx_PLL2_Config>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	6139      	str	r1, [r7, #16]
 8007bbc:	f003 0308 	and.w	r3, r3, #8
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	d011      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd0:	3328      	adds	r3, #40	; 0x28
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 f9ef 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007be0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	f003 0310 	and.w	r3, r3, #16
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c06:	460b      	mov	r3, r1
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	d011      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c10:	3328      	adds	r3, #40	; 0x28
 8007c12:	2101      	movs	r1, #1
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 f9cf 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	2100      	movs	r1, #0
 8007c3a:	6039      	str	r1, [r7, #0]
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c46:	460b      	mov	r3, r1
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	d011      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c50:	3328      	adds	r3, #40	; 0x28
 8007c52:	2102      	movs	r1, #2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 f9af 	bl	8008fb8 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007c70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e000      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007c84:	46bd      	mov	sp, r7
 8007c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c8a:	bf00      	nop
 8007c8c:	58024400 	.word	0x58024400

08007c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b090      	sub	sp, #64	; 0x40
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	f040 8094 	bne.w	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007ca8:	4b9b      	ldr	r3, [pc, #620]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	f200 8087 	bhi.w	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007cba:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007cd5 	.word	0x08007cd5
 8007cc4:	08007cfd 	.word	0x08007cfd
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007dc1 	.word	0x08007dc1
 8007cd0:	08007d4d 	.word	0x08007d4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd4:	4b90      	ldr	r3, [pc, #576]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce0:	d108      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 ff62 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf0:	f000 bc93 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf8:	f000 bc8f 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfc:	4b86      	ldr	r3, [pc, #536]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d08:	d108      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0a:	f107 0318 	add.w	r3, r7, #24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fca6 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d18:	f000 bc7f 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d20:	f000 bc7b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d24:	4b7c      	ldr	r3, [pc, #496]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d30:	d108      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d32:	f107 030c 	add.w	r3, r7, #12
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fde6 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d40:	f000 bc6b 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d48:	f000 bc67 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4c:	4b72      	ldr	r3, [pc, #456]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d56:	4b70      	ldr	r3, [pc, #448]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d10c      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d68:	4b6b      	ldr	r3, [pc, #428]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	08db      	lsrs	r3, r3, #3
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7a:	e01f      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d7c:	4b66      	ldr	r3, [pc, #408]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d88:	d106      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d90:	d102      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d92:	4b63      	ldr	r3, [pc, #396]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d96:	e011      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d98:	4b5f      	ldr	r3, [pc, #380]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da4:	d106      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dac:	d102      	bne.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dae:	4b5d      	ldr	r3, [pc, #372]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db2:	e003      	b.n	8007dbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007db8:	f000 bc2f 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007dbc:	f000 bc2d 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc4:	f000 bc29 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dcc:	f000 bc25 	b.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	f040 80a7 	bne.w	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007dde:	4b4e      	ldr	r3, [pc, #312]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007de6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dee:	d054      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007df6:	f200 808b 	bhi.w	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e00:	f000 8083 	beq.w	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e0a:	f200 8081 	bhi.w	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e14:	d02f      	beq.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e1c:	d878      	bhi.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e2a:	d012      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007e2c:	e070      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e2e:	4b3a      	ldr	r3, [pc, #232]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e3a:	d107      	bne.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 feb5 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4a:	e3e6      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e50:	e3e3      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e52:	4b31      	ldr	r3, [pc, #196]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e60:	f107 0318 	add.w	r3, r7, #24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fbfb 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e6e:	e3d4      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e74:	e3d1      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e76:	4b28      	ldr	r3, [pc, #160]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e82:	d107      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fd3d 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e92:	e3c2      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e98:	e3bf      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e9a:	4b1f      	ldr	r3, [pc, #124]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ea4:	4b1c      	ldr	r3, [pc, #112]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d10c      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	08db      	lsrs	r3, r3, #3
 8007ebc:	f003 0303 	and.w	r3, r3, #3
 8007ec0:	4a16      	ldr	r2, [pc, #88]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec8:	e01e      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eca:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ede:	d102      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee4:	e010      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef2:	d106      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efa:	d102      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f00:	e002      	b.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f06:	e388      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f08:	e387      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f0a:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f0e:	e384      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f14:	e381      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f16:	bf00      	nop
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	03d09000 	.word	0x03d09000
 8007f20:	003d0900 	.word	0x003d0900
 8007f24:	007a1200 	.word	0x007a1200
 8007f28:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f30:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f34:	430b      	orrs	r3, r1
 8007f36:	f040 809c 	bne.w	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f3a:	4b9e      	ldr	r3, [pc, #632]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f4a:	d054      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f52:	f200 808b 	bhi.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f5c:	f000 8083 	beq.w	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f66:	f200 8081 	bhi.w	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f70:	d02f      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f78:	d878      	bhi.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f86:	d012      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007f88:	e070      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8a:	4b8a      	ldr	r3, [pc, #552]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fe07 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa6:	e338      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fac:	e335      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fae:	4b81      	ldr	r3, [pc, #516]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbc:	f107 0318 	add.w	r3, r7, #24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fb4d 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e326      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd0:	e323      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd2:	4b78      	ldr	r3, [pc, #480]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 030c 	add.w	r3, r7, #12
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc8f 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fee:	e314      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff4:	e311      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff6:	4b6f      	ldr	r3, [pc, #444]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008000:	4b6c      	ldr	r3, [pc, #432]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b04      	cmp	r3, #4
 800800a:	d10c      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	d109      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008012:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a66      	ldr	r2, [pc, #408]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008024:	e01e      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008026:	4b63      	ldr	r3, [pc, #396]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800803c:	4b5f      	ldr	r3, [pc, #380]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008040:	e010      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008042:	4b5c      	ldr	r3, [pc, #368]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800804e:	d106      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008056:	d102      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008058:	4b59      	ldr	r3, [pc, #356]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805c:	e002      	b.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008062:	e2da      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008064:	e2d9      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008066:	4b57      	ldr	r3, [pc, #348]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800806a:	e2d6      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008070:	e2d3      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008076:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800807a:	430b      	orrs	r3, r1
 800807c:	f040 80a7 	bne.w	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008080:	4b4c      	ldr	r3, [pc, #304]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008084:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008088:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008090:	d055      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008098:	f200 8096 	bhi.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080a2:	f000 8084 	beq.w	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ac:	f200 808c 	bhi.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b6:	d030      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080be:	f200 8083 	bhi.w	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80080c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ce:	d012      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80080d0:	e07a      	b.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080d2:	4b38      	ldr	r3, [pc, #224]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080de:	d107      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fd63 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080ee:	e294      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080f4:	e291      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f6:	4b2f      	ldr	r3, [pc, #188]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008102:	d107      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008104:	f107 0318 	add.w	r3, r7, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f000 faa9 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008112:	e282      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008118:	e27f      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800811a:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008126:	d107      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fbeb 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008136:	e270      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813c:	e26d      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800813e:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008146:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008148:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b04      	cmp	r3, #4
 8008152:	d10c      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	2b00      	cmp	r3, #0
 8008158:	d109      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800815a:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	08db      	lsrs	r3, r3, #3
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008166:	fa22 f303 	lsr.w	r3, r2, r3
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800816c:	e01e      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800816e:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d106      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008182:	d102      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008184:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	e010      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008196:	d106      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800819e:	d102      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a4:	e002      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081aa:	e236      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081ac:	e235      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081b2:	e232      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081b4:	58024400 	.word	0x58024400
 80081b8:	03d09000 	.word	0x03d09000
 80081bc:	003d0900 	.word	0x003d0900
 80081c0:	007a1200 	.word	0x007a1200
 80081c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081cc:	e225      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80081d6:	430b      	orrs	r3, r1
 80081d8:	f040 8085 	bne.w	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081dc:	4b9c      	ldr	r3, [pc, #624]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ec:	d06b      	beq.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081f4:	d874      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081fc:	d056      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008204:	d86c      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800820c:	d03b      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008214:	d864      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821c:	d021      	beq.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008224:	d85c      	bhi.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008232:	d004      	beq.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008234:	e054      	b.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008236:	f7fe fb5f 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800823a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800823c:	e1ed      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800823e:	4b84      	ldr	r3, [pc, #528]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800824a:	d107      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824c:	f107 0318 	add.w	r3, r7, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fa05 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825a:	e1de      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008260:	e1db      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008262:	4b7b      	ldr	r3, [pc, #492]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800826e:	d107      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fb47 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827e:	e1cc      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008284:	e1c9      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b04      	cmp	r3, #4
 8008290:	d109      	bne.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008292:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	08db      	lsrs	r3, r3, #3
 8008298:	f003 0303 	and.w	r3, r3, #3
 800829c:	4a6d      	ldr	r2, [pc, #436]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800829e:	fa22 f303 	lsr.w	r3, r2, r3
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a4:	e1b9      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082aa:	e1b6      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082ac:	4b68      	ldr	r3, [pc, #416]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b8:	d102      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80082ba:	4b67      	ldr	r3, [pc, #412]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80082bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082be:	e1ac      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c4:	e1a9      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d2:	d102      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d8:	e19f      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082de:	e19c      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e4:	e199      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80082ee:	430b      	orrs	r3, r1
 80082f0:	d173      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80082f2:	4b57      	ldr	r3, [pc, #348]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008302:	d02f      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800830a:	d863      	bhi.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008318:	d012      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800831a:	e05b      	b.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831c:	4b4c      	ldr	r3, [pc, #304]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832a:	f107 0318 	add.w	r3, r7, #24
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f996 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008338:	e16f      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800833e:	e16c      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008340:	4b43      	ldr	r3, [pc, #268]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800834c:	d107      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800834e:	f107 030c 	add.w	r3, r7, #12
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fad8 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800835c:	e15d      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008362:	e15a      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008364:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800836c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800836e:	4b38      	ldr	r3, [pc, #224]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d10c      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008380:	4b33      	ldr	r3, [pc, #204]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	08db      	lsrs	r3, r3, #3
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	4a32      	ldr	r2, [pc, #200]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008392:	e01e      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008394:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800839c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a0:	d106      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80083a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083a8:	d102      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083aa:	4b2b      	ldr	r3, [pc, #172]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ae:	e010      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b0:	4b27      	ldr	r3, [pc, #156]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083bc:	d106      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80083be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c4:	d102      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083c6:	4b25      	ldr	r3, [pc, #148]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ca:	e002      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083d0:	e123      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80083d2:	e122      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083d8:	e11f      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80083e2:	430b      	orrs	r3, r1
 80083e4:	d13c      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d012      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80083fe:	e023      	b.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008400:	4b13      	ldr	r3, [pc, #76]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800840c:	d107      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800840e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fbcc 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841c:	e0fd      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008422:	e0fa      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800842c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008430:	d107      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008432:	f107 0318 	add.w	r3, r7, #24
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f912 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008440:	e0eb      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008446:	e0e8      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844c:	e0e5      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800844e:	bf00      	nop
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	003d0900 	.word	0x003d0900
 800845c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008464:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008468:	430b      	orrs	r3, r1
 800846a:	f040 8085 	bne.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800846e:	4b6d      	ldr	r3, [pc, #436]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008472:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800847e:	d06b      	beq.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008486:	d874      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848e:	d056      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008496:	d86c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800849e:	d03b      	beq.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a6:	d864      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ae:	d021      	beq.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b6:	d85c      	bhi.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d004      	beq.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c4:	d004      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80084c6:	e054      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084c8:	f000 f8b4 	bl	8008634 <HAL_RCCEx_GetD3PCLK1Freq>
 80084cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084ce:	e0a4      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d0:	4b54      	ldr	r3, [pc, #336]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084dc:	d107      	bne.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084de:	f107 0318 	add.w	r3, r7, #24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f8bc 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ec:	e095      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f2:	e092      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f4:	4b4b      	ldr	r3, [pc, #300]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008500:	d107      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f9fe 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	e083      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008516:	e080      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008518:	4b42      	ldr	r3, [pc, #264]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b04      	cmp	r3, #4
 8008522:	d109      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008524:	4b3f      	ldr	r3, [pc, #252]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	08db      	lsrs	r3, r3, #3
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	4a3e      	ldr	r2, [pc, #248]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008530:	fa22 f303 	lsr.w	r3, r2, r3
 8008534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008536:	e070      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800853c:	e06d      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800853e:	4b39      	ldr	r3, [pc, #228]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854a:	d102      	bne.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800854c:	4b37      	ldr	r3, [pc, #220]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008550:	e063      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008556:	e060      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008558:	4b32      	ldr	r3, [pc, #200]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008564:	d102      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008566:	4b32      	ldr	r3, [pc, #200]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856a:	e056      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008570:	e053      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008572:	2300      	movs	r3, #0
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008576:	e050      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008580:	430b      	orrs	r3, r1
 8008582:	d148      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008584:	4b27      	ldr	r3, [pc, #156]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800858c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008594:	d02a      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800859c:	d838      	bhi.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d004      	beq.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085aa:	d00d      	beq.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80085ac:	e030      	b.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ba:	d102      	bne.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80085bc:	4b1c      	ldr	r3, [pc, #112]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c0:	e02b      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c6:	e028      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085c8:	4b16      	ldr	r3, [pc, #88]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d4:	d107      	bne.n	80085e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fae8 	bl	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e4:	e019      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ea:	e016      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085f8:	d107      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fa:	f107 0318 	add.w	r3, r7, #24
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 f82e 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008608:	e007      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800860a:	2300      	movs	r3, #0
 800860c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860e:	e004      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008614:	e001      	b.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800861c:	4618      	mov	r0, r3
 800861e:	3740      	adds	r7, #64	; 0x40
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	58024400 	.word	0x58024400
 8008628:	03d09000 	.word	0x03d09000
 800862c:	003d0900 	.word	0x003d0900
 8008630:	007a1200 	.word	0x007a1200

08008634 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008638:	f7fe f92e 	bl	8006898 <HAL_RCC_GetHCLKFreq>
 800863c:	4602      	mov	r2, r0
 800863e:	4b06      	ldr	r3, [pc, #24]	; (8008658 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	4904      	ldr	r1, [pc, #16]	; (800865c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800864a:	5ccb      	ldrb	r3, [r1, r3]
 800864c:	f003 031f 	and.w	r3, r3, #31
 8008650:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008654:	4618      	mov	r0, r3
 8008656:	bd80      	pop	{r7, pc}
 8008658:	58024400 	.word	0x58024400
 800865c:	0800f32c 	.word	0x0800f32c

08008660 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008660:	b480      	push	{r7}
 8008662:	b089      	sub	sp, #36	; 0x24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008668:	4ba1      	ldr	r3, [pc, #644]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800866a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008672:	4b9f      	ldr	r3, [pc, #636]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	0b1b      	lsrs	r3, r3, #12
 8008678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800867c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800867e:	4b9c      	ldr	r3, [pc, #624]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008682:	091b      	lsrs	r3, r3, #4
 8008684:	f003 0301 	and.w	r3, r3, #1
 8008688:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800868a:	4b99      	ldr	r3, [pc, #612]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	08db      	lsrs	r3, r3, #3
 8008690:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	fb02 f303 	mul.w	r3, r2, r3
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8111 	beq.w	80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	f000 8083 	beq.w	80087bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	f200 80a1 	bhi.w	8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d056      	beq.n	8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086ca:	e099      	b.n	8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086cc:	4b88      	ldr	r3, [pc, #544]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d02d      	beq.n	8008734 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086d8:	4b85      	ldr	r3, [pc, #532]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	08db      	lsrs	r3, r3, #3
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	4a84      	ldr	r2, [pc, #528]	; (80088f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086e4:	fa22 f303 	lsr.w	r3, r2, r3
 80086e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008702:	4b7b      	ldr	r3, [pc, #492]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008712:	ed97 6a03 	vldr	s12, [r7, #12]
 8008716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800871a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800872a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008732:	e087      	b.n	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008746:	4b6a      	ldr	r3, [pc, #424]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008756:	ed97 6a03 	vldr	s12, [r7, #12]
 800875a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800875e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800876a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800876e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008776:	e065      	b.n	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008782:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800878a:	4b59      	ldr	r3, [pc, #356]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008792:	ee07 3a90 	vmov	s15, r3
 8008796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800879a:	ed97 6a03 	vldr	s12, [r7, #12]
 800879e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ba:	e043      	b.n	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ce:	4b48      	ldr	r3, [pc, #288]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087de:	ed97 6a03 	vldr	s12, [r7, #12]
 80087e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087fe:	e021      	b.n	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b37      	ldr	r3, [pc, #220]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a03 	vldr	s12, [r7, #12]
 8008826:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008842:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008844:	4b2a      	ldr	r3, [pc, #168]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	0a5b      	lsrs	r3, r3, #9
 800884a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800885a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800885e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886a:	ee17 2a90 	vmov	r2, s15
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008872:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	0c1b      	lsrs	r3, r3, #16
 8008878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008884:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008888:	ee37 7a87 	vadd.f32	s14, s15, s14
 800888c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008890:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008898:	ee17 2a90 	vmov	r2, s15
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088a0:	4b13      	ldr	r3, [pc, #76]	; (80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	0e1b      	lsrs	r3, r3, #24
 80088a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80088be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088c6:	ee17 2a90 	vmov	r2, s15
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088ce:	e008      	b.n	80088e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	609a      	str	r2, [r3, #8]
}
 80088e2:	bf00      	nop
 80088e4:	3724      	adds	r7, #36	; 0x24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	58024400 	.word	0x58024400
 80088f4:	03d09000 	.word	0x03d09000
 80088f8:	46000000 	.word	0x46000000
 80088fc:	4c742400 	.word	0x4c742400
 8008900:	4a742400 	.word	0x4a742400
 8008904:	4af42400 	.word	0x4af42400

08008908 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008908:	b480      	push	{r7}
 800890a:	b089      	sub	sp, #36	; 0x24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008910:	4ba1      	ldr	r3, [pc, #644]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008914:	f003 0303 	and.w	r3, r3, #3
 8008918:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800891a:	4b9f      	ldr	r3, [pc, #636]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	0d1b      	lsrs	r3, r3, #20
 8008920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008924:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008926:	4b9c      	ldr	r3, [pc, #624]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	0a1b      	lsrs	r3, r3, #8
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008932:	4b99      	ldr	r3, [pc, #612]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008936:	08db      	lsrs	r3, r3, #3
 8008938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8111 	beq.w	8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b02      	cmp	r3, #2
 800895a:	f000 8083 	beq.w	8008a64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b02      	cmp	r3, #2
 8008962:	f200 80a1 	bhi.w	8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d056      	beq.n	8008a20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008972:	e099      	b.n	8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b88      	ldr	r3, [pc, #544]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d02d      	beq.n	80089dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008980:	4b85      	ldr	r3, [pc, #532]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a84      	ldr	r2, [pc, #528]	; (8008b9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089aa:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80089be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089da:	e087      	b.n	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ee:	4b6a      	ldr	r3, [pc, #424]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a1e:	e065      	b.n	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a32:	4b59      	ldr	r3, [pc, #356]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a3a:	ee07 3a90 	vmov	s15, r3
 8008a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a62:	e043      	b.n	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a76:	4b48      	ldr	r3, [pc, #288]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aa6:	e021      	b.n	8008aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aba:	4b37      	ldr	r3, [pc, #220]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac2:	ee07 3a90 	vmov	s15, r3
 8008ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008aec:	4b2a      	ldr	r3, [pc, #168]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	0a5b      	lsrs	r3, r3, #9
 8008af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b12:	ee17 2a90 	vmov	r2, s15
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b1a:	4b1f      	ldr	r3, [pc, #124]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1e:	0c1b      	lsrs	r3, r3, #16
 8008b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b40:	ee17 2a90 	vmov	r2, s15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b48:	4b13      	ldr	r3, [pc, #76]	; (8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	0e1b      	lsrs	r3, r3, #24
 8008b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b6e:	ee17 2a90 	vmov	r2, s15
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b76:	e008      	b.n	8008b8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	609a      	str	r2, [r3, #8]
}
 8008b8a:	bf00      	nop
 8008b8c:	3724      	adds	r7, #36	; 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	03d09000 	.word	0x03d09000
 8008ba0:	46000000 	.word	0x46000000
 8008ba4:	4c742400 	.word	0x4c742400
 8008ba8:	4a742400 	.word	0x4a742400
 8008bac:	4af42400 	.word	0x4af42400

08008bb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bb8:	4ba0      	ldr	r3, [pc, #640]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bc2:	4b9e      	ldr	r3, [pc, #632]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	091b      	lsrs	r3, r3, #4
 8008bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bce:	4b9b      	ldr	r3, [pc, #620]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bd8:	4b98      	ldr	r3, [pc, #608]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bdc:	08db      	lsrs	r3, r3, #3
 8008bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	fb02 f303 	mul.w	r3, r2, r3
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 8111 	beq.w	8008e1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	f000 8083 	beq.w	8008d0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	f200 80a1 	bhi.w	8008d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d003      	beq.n	8008c1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d056      	beq.n	8008cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c18:	e099      	b.n	8008d4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c1a:	4b88      	ldr	r3, [pc, #544]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d02d      	beq.n	8008c82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c26:	4b85      	ldr	r3, [pc, #532]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	4a83      	ldr	r2, [pc, #524]	; (8008e40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	ee07 3a90 	vmov	s15, r3
 8008c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c50:	4b7a      	ldr	r3, [pc, #488]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c60:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c80:	e087      	b.n	8008d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	ee07 3a90 	vmov	s15, r3
 8008c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c94:	4b69      	ldr	r3, [pc, #420]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cc4:	e065      	b.n	8008d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	ee07 3a90 	vmov	s15, r3
 8008ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd8:	4b58      	ldr	r3, [pc, #352]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce0:	ee07 3a90 	vmov	s15, r3
 8008ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d08:	e043      	b.n	8008d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	ee07 3a90 	vmov	s15, r3
 8008d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d1c:	4b47      	ldr	r3, [pc, #284]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d24:	ee07 3a90 	vmov	s15, r3
 8008d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d4c:	e021      	b.n	8008d92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	ee07 3a90 	vmov	s15, r3
 8008d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d60:	4b36      	ldr	r3, [pc, #216]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d70:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d92:	4b2a      	ldr	r3, [pc, #168]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	0a5b      	lsrs	r3, r3, #9
 8008d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9c:	ee07 3a90 	vmov	s15, r3
 8008da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008db8:	ee17 2a90 	vmov	r2, s15
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008dc0:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008de6:	ee17 2a90 	vmov	r2, s15
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	0e1b      	lsrs	r3, r3, #24
 8008df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e14:	ee17 2a90 	vmov	r2, s15
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	609a      	str	r2, [r3, #8]
}
 8008e30:	bf00      	nop
 8008e32:	3724      	adds	r7, #36	; 0x24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr
 8008e3c:	58024400 	.word	0x58024400
 8008e40:	03d09000 	.word	0x03d09000
 8008e44:	46000000 	.word	0x46000000
 8008e48:	4c742400 	.word	0x4c742400
 8008e4c:	4a742400 	.word	0x4a742400
 8008e50:	4af42400 	.word	0x4af42400

08008e54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e62:	4b53      	ldr	r3, [pc, #332]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d101      	bne.n	8008e72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e099      	b.n	8008fa6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e72:	4b4f      	ldr	r3, [pc, #316]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a4e      	ldr	r2, [pc, #312]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008e78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7e:	f7f8 ffd1 	bl	8001e24 <HAL_GetTick>
 8008e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e84:	e008      	b.n	8008e98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e86:	f7f8 ffcd 	bl	8001e24 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e086      	b.n	8008fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e98:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1f0      	bne.n	8008e86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ea4:	4b42      	ldr	r3, [pc, #264]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	493f      	ldr	r1, [pc, #252]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	025b      	lsls	r3, r3, #9
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	041b      	lsls	r3, r3, #16
 8008ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	061b      	lsls	r3, r3, #24
 8008ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ee8:	4931      	ldr	r1, [pc, #196]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008eee:	4b30      	ldr	r3, [pc, #192]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	492d      	ldr	r1, [pc, #180]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f00:	4b2b      	ldr	r3, [pc, #172]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	f023 0220 	bic.w	r2, r3, #32
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	4928      	ldr	r1, [pc, #160]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f12:	4b27      	ldr	r3, [pc, #156]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f18:	f023 0310 	bic.w	r3, r3, #16
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f1e:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <RCCEx_PLL2_Config+0x160>)
 8008f24:	4013      	ands	r3, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	69d2      	ldr	r2, [r2, #28]
 8008f2a:	00d2      	lsls	r2, r2, #3
 8008f2c:	4920      	ldr	r1, [pc, #128]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f32:	4b1f      	ldr	r3, [pc, #124]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	4a1e      	ldr	r2, [pc, #120]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f38:	f043 0310 	orr.w	r3, r3, #16
 8008f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d106      	bne.n	8008f52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f44:	4b1a      	ldr	r3, [pc, #104]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	4a19      	ldr	r2, [pc, #100]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f50:	e00f      	b.n	8008f72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d106      	bne.n	8008f66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f58:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	4a14      	ldr	r2, [pc, #80]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f64:	e005      	b.n	8008f72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	4a11      	ldr	r2, [pc, #68]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f72:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a0e      	ldr	r2, [pc, #56]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7e:	f7f8 ff51 	bl	8001e24 <HAL_GetTick>
 8008f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f84:	e008      	b.n	8008f98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f86:	f7f8 ff4d 	bl	8001e24 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e006      	b.n	8008fa6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	ffff0007 	.word	0xffff0007

08008fb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fc6:	4b53      	ldr	r3, [pc, #332]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d101      	bne.n	8008fd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e099      	b.n	800910a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fd6:	4b4f      	ldr	r3, [pc, #316]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a4e      	ldr	r2, [pc, #312]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8008fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe2:	f7f8 ff1f 	bl	8001e24 <HAL_GetTick>
 8008fe6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fe8:	e008      	b.n	8008ffc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fea:	f7f8 ff1b 	bl	8001e24 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e086      	b.n	800910a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ffc:	4b45      	ldr	r3, [pc, #276]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f0      	bne.n	8008fea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009008:	4b42      	ldr	r3, [pc, #264]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	051b      	lsls	r3, r3, #20
 8009016:	493f      	ldr	r1, [pc, #252]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009018:	4313      	orrs	r3, r2
 800901a:	628b      	str	r3, [r1, #40]	; 0x28
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	3b01      	subs	r3, #1
 800902c:	025b      	lsls	r3, r3, #9
 800902e:	b29b      	uxth	r3, r3
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	3b01      	subs	r3, #1
 8009038:	041b      	lsls	r3, r3, #16
 800903a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	3b01      	subs	r3, #1
 8009046:	061b      	lsls	r3, r3, #24
 8009048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800904c:	4931      	ldr	r1, [pc, #196]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 800904e:	4313      	orrs	r3, r2
 8009050:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009052:	4b30      	ldr	r3, [pc, #192]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	492d      	ldr	r1, [pc, #180]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009060:	4313      	orrs	r3, r2
 8009062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009064:	4b2b      	ldr	r3, [pc, #172]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	4928      	ldr	r1, [pc, #160]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009076:	4b27      	ldr	r3, [pc, #156]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a26      	ldr	r2, [pc, #152]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 800907c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009082:	4b24      	ldr	r3, [pc, #144]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009086:	4b24      	ldr	r3, [pc, #144]	; (8009118 <RCCEx_PLL3_Config+0x160>)
 8009088:	4013      	ands	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	69d2      	ldr	r2, [r2, #28]
 800908e:	00d2      	lsls	r2, r2, #3
 8009090:	4920      	ldr	r1, [pc, #128]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009096:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a1e      	ldr	r2, [pc, #120]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 800909c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	4a19      	ldr	r2, [pc, #100]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090b4:	e00f      	b.n	80090d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d106      	bne.n	80090ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090bc:	4b15      	ldr	r3, [pc, #84]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090c8:	e005      	b.n	80090d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	4a11      	ldr	r2, [pc, #68]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090e2:	f7f8 fe9f 	bl	8001e24 <HAL_GetTick>
 80090e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090e8:	e008      	b.n	80090fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ea:	f7f8 fe9b 	bl	8001e24 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e006      	b.n	800910a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <RCCEx_PLL3_Config+0x15c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0f0      	beq.n	80090ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	58024400 	.word	0x58024400
 8009118:	ffff0007 	.word	0xffff0007

0800911c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e10f      	b.n	800934e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a87      	ldr	r2, [pc, #540]	; (8009358 <HAL_SPI_Init+0x23c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d00f      	beq.n	800915e <HAL_SPI_Init+0x42>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a86      	ldr	r2, [pc, #536]	; (800935c <HAL_SPI_Init+0x240>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00a      	beq.n	800915e <HAL_SPI_Init+0x42>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a84      	ldr	r2, [pc, #528]	; (8009360 <HAL_SPI_Init+0x244>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d005      	beq.n	800915e <HAL_SPI_Init+0x42>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b0f      	cmp	r3, #15
 8009158:	d901      	bls.n	800915e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e0f7      	b.n	800934e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fe04 	bl	8009d6c <SPI_GetPacketSize>
 8009164:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a7b      	ldr	r2, [pc, #492]	; (8009358 <HAL_SPI_Init+0x23c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00c      	beq.n	800918a <HAL_SPI_Init+0x6e>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a79      	ldr	r2, [pc, #484]	; (800935c <HAL_SPI_Init+0x240>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d007      	beq.n	800918a <HAL_SPI_Init+0x6e>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a78      	ldr	r2, [pc, #480]	; (8009360 <HAL_SPI_Init+0x244>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d002      	beq.n	800918a <HAL_SPI_Init+0x6e>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b08      	cmp	r3, #8
 8009188:	d811      	bhi.n	80091ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800918e:	4a72      	ldr	r2, [pc, #456]	; (8009358 <HAL_SPI_Init+0x23c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d009      	beq.n	80091a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a70      	ldr	r2, [pc, #448]	; (800935c <HAL_SPI_Init+0x240>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d004      	beq.n	80091a8 <HAL_SPI_Init+0x8c>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a6f      	ldr	r2, [pc, #444]	; (8009360 <HAL_SPI_Init+0x244>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d104      	bne.n	80091b2 <HAL_SPI_Init+0x96>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b10      	cmp	r3, #16
 80091ac:	d901      	bls.n	80091b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e0cd      	b.n	800934e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d106      	bne.n	80091cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7f8 f8a6 	bl	8001318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2202      	movs	r2, #2
 80091d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0201 	bic.w	r2, r2, #1
 80091e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80091ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091f8:	d119      	bne.n	800922e <HAL_SPI_Init+0x112>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009202:	d103      	bne.n	800920c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10c      	bne.n	800922e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800921c:	d107      	bne.n	800922e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800922c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00f      	beq.n	800925a <HAL_SPI_Init+0x13e>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b06      	cmp	r3, #6
 8009240:	d90b      	bls.n	800925a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	e007      	b.n	800926a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009268:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69da      	ldr	r2, [r3, #28]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	431a      	orrs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	431a      	orrs	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927c:	ea42 0103 	orr.w	r1, r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009294:	431a      	orrs	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ca:	ea42 0103 	orr.w	r1, r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d113      	bne.n	800930a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009308:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0201 	bic.w	r2, r2, #1
 8009318:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40013000 	.word	0x40013000
 800935c:	40003800 	.word	0x40003800
 8009360:	40003c00 	.word	0x40003c00

08009364 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08c      	sub	sp, #48	; 0x30
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3320      	adds	r3, #32
 800937e:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3330      	adds	r3, #48	; 0x30
 8009386:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x32>
 8009392:	2302      	movs	r3, #2
 8009394:	e1fd      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800939e:	f7f8 fd41 	bl	8001e24 <HAL_GetTick>
 80093a2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80093a4:	887b      	ldrh	r3, [r7, #2]
 80093a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d009      	beq.n	80093cc <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80093b8:	2302      	movs	r3, #2
 80093ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80093c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093ca:	e1e2      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_SPI_TransmitReceive+0x7a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_SPI_TransmitReceive+0x7a>
 80093d8:	887b      	ldrh	r3, [r7, #2]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d109      	bne.n	80093f2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80093ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80093f0:	e1cf      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2205      	movs	r2, #5
 80093f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	887a      	ldrh	r2, [r7, #2]
 8009414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	887a      	ldrh	r2, [r7, #2]
 8009422:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	887a      	ldrh	r2, [r7, #2]
 800942a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8009448:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685a      	ldr	r2, [r3, #4]
 8009450:	4b82      	ldr	r3, [pc, #520]	; (800965c <HAL_SPI_TransmitReceive+0x2f8>)
 8009452:	4013      	ands	r3, r2
 8009454:	8879      	ldrh	r1, [r7, #2]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	430b      	orrs	r3, r1
 800945c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0201 	orr.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009476:	d107      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009486:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	2b0f      	cmp	r3, #15
 800948e:	d970      	bls.n	8009572 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009490:	e068      	b.n	8009564 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b02      	cmp	r3, #2
 800949e:	d11a      	bne.n	80094d6 <HAL_SPI_TransmitReceive+0x172>
 80094a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d017      	beq.n	80094d6 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b6:	1d1a      	adds	r2, r3, #4
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094d4:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695a      	ldr	r2, [r3, #20]
 80094dc:	f248 0308 	movw	r3, #32776	; 0x8008
 80094e0:	4013      	ands	r3, r2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d01a      	beq.n	800951c <HAL_SPI_TransmitReceive+0x1b8>
 80094e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d017      	beq.n	800951c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80094f6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094fc:	1d1a      	adds	r2, r3, #4
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800951a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800951c:	f7f8 fc82 	bl	8001e24 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009528:	429a      	cmp	r2, r3
 800952a:	d803      	bhi.n	8009534 <HAL_SPI_TransmitReceive+0x1d0>
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009532:	d102      	bne.n	800953a <HAL_SPI_TransmitReceive+0x1d6>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	d114      	bne.n	8009564 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fb48 	bl	8009bd0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800954e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e116      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009566:	2b00      	cmp	r3, #0
 8009568:	d193      	bne.n	8009492 <HAL_SPI_TransmitReceive+0x12e>
 800956a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d190      	bne.n	8009492 <HAL_SPI_TransmitReceive+0x12e>
 8009570:	e0e8      	b.n	8009744 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b07      	cmp	r3, #7
 8009578:	f240 80de 	bls.w	8009738 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800957c:	e066      	b.n	800964c <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b02      	cmp	r3, #2
 800958a:	d119      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x25c>
 800958c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800958e:	2b00      	cmp	r3, #0
 8009590:	d016      	beq.n	80095c0 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009596:	881a      	ldrh	r2, [r3, #0]
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a0:	1c9a      	adds	r2, r3, #2
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80095be:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d11a      	bne.n	8009604 <HAL_SPI_TransmitReceive+0x2a0>
 80095ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d017      	beq.n	8009604 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	b292      	uxth	r2, r2
 80095de:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095e4:	1c9a      	adds	r2, r3, #2
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009602:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009604:	f7f8 fc0e 	bl	8001e24 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009610:	429a      	cmp	r2, r3
 8009612:	d803      	bhi.n	800961c <HAL_SPI_TransmitReceive+0x2b8>
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d102      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x2be>
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	2b00      	cmp	r3, #0
 8009620:	d114      	bne.n	800964c <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 fad4 	bl	8009bd0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009636:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e0a2      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800964c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800964e:	2b00      	cmp	r3, #0
 8009650:	d195      	bne.n	800957e <HAL_SPI_TransmitReceive+0x21a>
 8009652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009654:	2b00      	cmp	r3, #0
 8009656:	d192      	bne.n	800957e <HAL_SPI_TransmitReceive+0x21a>
 8009658:	e074      	b.n	8009744 <HAL_SPI_TransmitReceive+0x3e0>
 800965a:	bf00      	nop
 800965c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d11b      	bne.n	80096a6 <HAL_SPI_TransmitReceive+0x342>
 800966e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009670:	2b00      	cmp	r3, #0
 8009672:	d018      	beq.n	80096a6 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	3320      	adds	r3, #32
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80096a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11d      	bne.n	80096f0 <HAL_SPI_TransmitReceive+0x38c>
 80096b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01a      	beq.n	80096f0 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	b2d2      	uxtb	r2, r2
 80096ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096dc:	b29b      	uxth	r3, r3
 80096de:	3b01      	subs	r3, #1
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096ee:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096f0:	f7f8 fb98 	bl	8001e24 <HAL_GetTick>
 80096f4:	4602      	mov	r2, r0
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	1ad3      	subs	r3, r2, r3
 80096fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d803      	bhi.n	8009708 <HAL_SPI_TransmitReceive+0x3a4>
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d102      	bne.n	800970e <HAL_SPI_TransmitReceive+0x3aa>
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	2b00      	cmp	r3, #0
 800970c:	d114      	bne.n	8009738 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fa5e 	bl	8009bd0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e02c      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800973a:	2b00      	cmp	r3, #0
 800973c:	d190      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x2fc>
 800973e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d18d      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	2200      	movs	r2, #0
 800974c:	2108      	movs	r1, #8
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fade 	bl	8009d10 <SPI_WaitOnFlagUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009760:	f043 0220 	orr.w	r2, r3, #32
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fa30 	bl	8009bd0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e001      	b.n	8009792 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 800978e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009792:	4618      	mov	r0, r3
 8009794:	3728      	adds	r7, #40	; 0x28
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop

0800979c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80097b4:	6a3a      	ldr	r2, [r7, #32]
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4013      	ands	r3, r2
 80097ba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80097ce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3330      	adds	r3, #48	; 0x30
 80097d6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d010      	beq.n	8009804 <HAL_SPI_IRQHandler+0x68>
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097fa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f9c3 	bl	8009b88 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009802:	e192      	b.n	8009b2a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b00      	cmp	r3, #0
 800980c:	d113      	bne.n	8009836 <HAL_SPI_IRQHandler+0x9a>
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10e      	bne.n	8009836 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800981e:	2b00      	cmp	r3, #0
 8009820:	d009      	beq.n	8009836 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	4798      	blx	r3
    hspi->RxISR(hspi);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
    handled = 1UL;
 8009832:	2301      	movs	r3, #1
 8009834:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10f      	bne.n	8009860 <HAL_SPI_IRQHandler+0xc4>
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00a      	beq.n	8009860 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009850:	2b00      	cmp	r3, #0
 8009852:	d105      	bne.n	8009860 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	4798      	blx	r3
    handled = 1UL;
 800985c:	2301      	movs	r3, #1
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10f      	bne.n	800988a <HAL_SPI_IRQHandler+0xee>
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00a      	beq.n	800988a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
    handled = 1UL;
 8009886:	2301      	movs	r3, #1
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	f040 8147 	bne.w	8009b20 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 808b 	beq.w	80099b4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699a      	ldr	r2, [r3, #24]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f042 0208 	orr.w	r2, r2, #8
 80098ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0210 	orr.w	r2, r2, #16
 80098bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	699a      	ldr	r2, [r3, #24]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0208 	bic.w	r2, r2, #8
 80098dc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d13d      	bne.n	8009968 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80098ec:	e036      	b.n	800995c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2b0f      	cmp	r3, #15
 80098f4:	d90b      	bls.n	800990e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009900:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	665a      	str	r2, [r3, #100]	; 0x64
 800990c:	e01d      	b.n	800994a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	2b07      	cmp	r3, #7
 8009914:	d90b      	bls.n	800992e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	8812      	ldrh	r2, [r2, #0]
 800991e:	b292      	uxth	r2, r2
 8009920:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009926:	1c9a      	adds	r2, r3, #2
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	665a      	str	r2, [r3, #100]	; 0x64
 800992c:	e00d      	b.n	800994a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009950:	b29b      	uxth	r3, r3
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1c2      	bne.n	80098ee <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f931 	bl	8009bd0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f8f7 	bl	8009b74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009986:	e0d0      	b.n	8009b2a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009988:	7cfb      	ldrb	r3, [r7, #19]
 800998a:	2b05      	cmp	r3, #5
 800998c:	d103      	bne.n	8009996 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f8e6 	bl	8009b60 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009994:	e0c6      	b.n	8009b24 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009996:	7cfb      	ldrb	r3, [r7, #19]
 8009998:	2b04      	cmp	r3, #4
 800999a:	d103      	bne.n	80099a4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f8d5 	bl	8009b4c <HAL_SPI_RxCpltCallback>
    return;
 80099a2:	e0bf      	b.n	8009b24 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80099a4:	7cfb      	ldrb	r3, [r7, #19]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	f040 80bc 	bne.w	8009b24 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f8c3 	bl	8009b38 <HAL_SPI_TxCpltCallback>
    return;
 80099b2:	e0b7      	b.n	8009b24 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 80b5 	beq.w	8009b2a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00f      	beq.n	80099ea <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099d0:	f043 0204 	orr.w	r2, r3, #4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00f      	beq.n	8009a14 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099fa:	f043 0201 	orr.w	r2, r3, #1
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a12:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00f      	beq.n	8009a3e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a24:	f043 0208 	orr.w	r2, r3, #8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699a      	ldr	r2, [r3, #24]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a3c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00f      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0220 	orr.w	r2, r2, #32
 8009a66:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d05a      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6919      	ldr	r1, [r3, #16]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	4b28      	ldr	r3, [pc, #160]	; (8009b30 <HAL_SPI_IRQHandler+0x394>)
 8009a8e:	400b      	ands	r3, r1
 8009a90:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009a98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009a9c:	d138      	bne.n	8009b10 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009aac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d013      	beq.n	8009ade <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aba:	4a1e      	ldr	r2, [pc, #120]	; (8009b34 <HAL_SPI_IRQHandler+0x398>)
 8009abc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fa f8ae 	bl	8003c24 <HAL_DMA_Abort_IT>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ad4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d020      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aea:	4a12      	ldr	r2, [pc, #72]	; (8009b34 <HAL_SPI_IRQHandler+0x398>)
 8009aec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fa f896 	bl	8003c24 <HAL_DMA_Abort_IT>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d014      	beq.n	8009b28 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b0e:	e00b      	b.n	8009b28 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f82b 	bl	8009b74 <HAL_SPI_ErrorCallback>
    return;
 8009b1e:	e003      	b.n	8009b28 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009b20:	bf00      	nop
 8009b22:	e002      	b.n	8009b2a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b24:	bf00      	nop
 8009b26:	e000      	b.n	8009b2a <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b28:	bf00      	nop
  }
}
 8009b2a:	3728      	adds	r7, #40	; 0x28
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	fffffc94 	.word	0xfffffc94
 8009b34:	08009b9d 	.word	0x08009b9d

08009b38 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ffd6 	bl	8009b74 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f042 0208 	orr.w	r2, r2, #8
 8009bee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0210 	orr.w	r2, r2, #16
 8009bfe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6919      	ldr	r1, [r3, #16]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b3c      	ldr	r3, [pc, #240]	; (8009d0c <SPI_CloseTransfer+0x13c>)
 8009c1c:	400b      	ands	r3, r1
 8009c1e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009c2e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d014      	beq.n	8009c66 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00f      	beq.n	8009c66 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	699a      	ldr	r2, [r3, #24]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f042 0220 	orr.w	r2, r2, #32
 8009c64:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d014      	beq.n	8009c9c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00f      	beq.n	8009c9c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c82:	f043 0204 	orr.w	r2, r3, #4
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699a      	ldr	r2, [r3, #24]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c9a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00f      	beq.n	8009cc6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cac:	f043 0201 	orr.w	r2, r3, #1
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00f      	beq.n	8009cf0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd6:	f043 0208 	orr.w	r2, r3, #8
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009d00:	bf00      	nop
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	fffffc90 	.word	0xfffffc90

08009d10 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d20:	e010      	b.n	8009d44 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d22:	f7f8 f87f 	bl	8001e24 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d803      	bhi.n	8009d3a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d102      	bne.n	8009d40 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e00f      	b.n	8009d64 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695a      	ldr	r2, [r3, #20]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	bf0c      	ite	eq
 8009d54:	2301      	moveq	r3, #1
 8009d56:	2300      	movne	r3, #0
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d0df      	beq.n	8009d22 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d78:	095b      	lsrs	r3, r3, #5
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	3301      	adds	r3, #1
 8009d84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	3307      	adds	r3, #7
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e049      	b.n	8009e48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7f7 fe49 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f000 fd11 	bl	800a808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e049      	b.n	8009ef6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f841 	bl	8009efe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f000 fcba 	bl	800a808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
	...

08009f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d109      	bne.n	8009f38 <HAL_TIM_PWM_Start+0x24>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	bf14      	ite	ne
 8009f30:	2301      	movne	r3, #1
 8009f32:	2300      	moveq	r3, #0
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	e03c      	b.n	8009fb2 <HAL_TIM_PWM_Start+0x9e>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2b04      	cmp	r3, #4
 8009f3c:	d109      	bne.n	8009f52 <HAL_TIM_PWM_Start+0x3e>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	bf14      	ite	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	2300      	moveq	r3, #0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	e02f      	b.n	8009fb2 <HAL_TIM_PWM_Start+0x9e>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d109      	bne.n	8009f6c <HAL_TIM_PWM_Start+0x58>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	bf14      	ite	ne
 8009f64:	2301      	movne	r3, #1
 8009f66:	2300      	moveq	r3, #0
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	e022      	b.n	8009fb2 <HAL_TIM_PWM_Start+0x9e>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2b0c      	cmp	r3, #12
 8009f70:	d109      	bne.n	8009f86 <HAL_TIM_PWM_Start+0x72>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	bf14      	ite	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	2300      	moveq	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	e015      	b.n	8009fb2 <HAL_TIM_PWM_Start+0x9e>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b10      	cmp	r3, #16
 8009f8a:	d109      	bne.n	8009fa0 <HAL_TIM_PWM_Start+0x8c>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	bf14      	ite	ne
 8009f98:	2301      	movne	r3, #1
 8009f9a:	2300      	moveq	r3, #0
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	e008      	b.n	8009fb2 <HAL_TIM_PWM_Start+0x9e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	bf14      	ite	ne
 8009fac:	2301      	movne	r3, #1
 8009fae:	2300      	moveq	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0ab      	b.n	800a112 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <HAL_TIM_PWM_Start+0xb6>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fc8:	e023      	b.n	800a012 <HAL_TIM_PWM_Start+0xfe>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d104      	bne.n	8009fda <HAL_TIM_PWM_Start+0xc6>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fd8:	e01b      	b.n	800a012 <HAL_TIM_PWM_Start+0xfe>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d104      	bne.n	8009fea <HAL_TIM_PWM_Start+0xd6>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fe8:	e013      	b.n	800a012 <HAL_TIM_PWM_Start+0xfe>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b0c      	cmp	r3, #12
 8009fee:	d104      	bne.n	8009ffa <HAL_TIM_PWM_Start+0xe6>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ff8:	e00b      	b.n	800a012 <HAL_TIM_PWM_Start+0xfe>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d104      	bne.n	800a00a <HAL_TIM_PWM_Start+0xf6>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a008:	e003      	b.n	800a012 <HAL_TIM_PWM_Start+0xfe>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2201      	movs	r2, #1
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 f80e 	bl	800b03c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a3d      	ldr	r2, [pc, #244]	; (800a11c <HAL_TIM_PWM_Start+0x208>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d013      	beq.n	800a052 <HAL_TIM_PWM_Start+0x13e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a3c      	ldr	r2, [pc, #240]	; (800a120 <HAL_TIM_PWM_Start+0x20c>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d00e      	beq.n	800a052 <HAL_TIM_PWM_Start+0x13e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a3a      	ldr	r2, [pc, #232]	; (800a124 <HAL_TIM_PWM_Start+0x210>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d009      	beq.n	800a052 <HAL_TIM_PWM_Start+0x13e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a39      	ldr	r2, [pc, #228]	; (800a128 <HAL_TIM_PWM_Start+0x214>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d004      	beq.n	800a052 <HAL_TIM_PWM_Start+0x13e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a37      	ldr	r2, [pc, #220]	; (800a12c <HAL_TIM_PWM_Start+0x218>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d101      	bne.n	800a056 <HAL_TIM_PWM_Start+0x142>
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <HAL_TIM_PWM_Start+0x144>
 800a056:	2300      	movs	r3, #0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a06a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <HAL_TIM_PWM_Start+0x208>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d02c      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07e:	d027      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a2a      	ldr	r2, [pc, #168]	; (800a130 <HAL_TIM_PWM_Start+0x21c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d022      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a29      	ldr	r2, [pc, #164]	; (800a134 <HAL_TIM_PWM_Start+0x220>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d01d      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a27      	ldr	r2, [pc, #156]	; (800a138 <HAL_TIM_PWM_Start+0x224>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d018      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a1f      	ldr	r2, [pc, #124]	; (800a120 <HAL_TIM_PWM_Start+0x20c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d013      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a23      	ldr	r2, [pc, #140]	; (800a13c <HAL_TIM_PWM_Start+0x228>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00e      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a1b      	ldr	r2, [pc, #108]	; (800a124 <HAL_TIM_PWM_Start+0x210>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d009      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1f      	ldr	r2, [pc, #124]	; (800a140 <HAL_TIM_PWM_Start+0x22c>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d004      	beq.n	800a0d0 <HAL_TIM_PWM_Start+0x1bc>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1e      	ldr	r2, [pc, #120]	; (800a144 <HAL_TIM_PWM_Start+0x230>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d115      	bne.n	800a0fc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	4b1c      	ldr	r3, [pc, #112]	; (800a148 <HAL_TIM_PWM_Start+0x234>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b06      	cmp	r3, #6
 800a0e0:	d015      	beq.n	800a10e <HAL_TIM_PWM_Start+0x1fa>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0e8:	d011      	beq.n	800a10e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0201 	orr.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0fa:	e008      	b.n	800a10e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0201 	orr.w	r2, r2, #1
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	e000      	b.n	800a110 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a10e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	40010000 	.word	0x40010000
 800a120:	40010400 	.word	0x40010400
 800a124:	40014000 	.word	0x40014000
 800a128:	40014400 	.word	0x40014400
 800a12c:	40014800 	.word	0x40014800
 800a130:	40000400 	.word	0x40000400
 800a134:	40000800 	.word	0x40000800
 800a138:	40000c00 	.word	0x40000c00
 800a13c:	40001800 	.word	0x40001800
 800a140:	4000e000 	.word	0x4000e000
 800a144:	4000e400 	.word	0x4000e400
 800a148:	00010007 	.word	0x00010007

0800a14c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0302 	and.w	r3, r3, #2
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d122      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d11b      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0202 	mvn.w	r2, #2
 800a178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f003 0303 	and.w	r3, r3, #3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fb1c 	bl	800a7cc <HAL_TIM_IC_CaptureCallback>
 800a194:	e005      	b.n	800a1a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fb0e 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fb1f 	bl	800a7e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d122      	bne.n	800a1fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d11b      	bne.n	800a1fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0204 	mvn.w	r2, #4
 800a1cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 faf2 	bl	800a7cc <HAL_TIM_IC_CaptureCallback>
 800a1e8:	e005      	b.n	800a1f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fae4 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 faf5 	bl	800a7e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b08      	cmp	r3, #8
 800a208:	d122      	bne.n	800a250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b08      	cmp	r3, #8
 800a216:	d11b      	bne.n	800a250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0208 	mvn.w	r2, #8
 800a220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2204      	movs	r2, #4
 800a226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 fac8 	bl	800a7cc <HAL_TIM_IC_CaptureCallback>
 800a23c:	e005      	b.n	800a24a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 faba 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 facb 	bl	800a7e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	2b10      	cmp	r3, #16
 800a25c:	d122      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0310 	and.w	r3, r3, #16
 800a268:	2b10      	cmp	r3, #16
 800a26a:	d11b      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0210 	mvn.w	r2, #16
 800a274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2208      	movs	r2, #8
 800a27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa9e 	bl	800a7cc <HAL_TIM_IC_CaptureCallback>
 800a290:	e005      	b.n	800a29e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fa90 	bl	800a7b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 faa1 	bl	800a7e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d10e      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d107      	bne.n	800a2d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0201 	mvn.w	r2, #1
 800a2c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa6a 	bl	800a7a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2da:	2b80      	cmp	r3, #128	; 0x80
 800a2dc:	d10e      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e8:	2b80      	cmp	r3, #128	; 0x80
 800a2ea:	d107      	bne.n	800a2fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 ff6c 	bl	800b1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30a:	d10e      	bne.n	800a32a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a316:	2b80      	cmp	r3, #128	; 0x80
 800a318:	d107      	bne.n	800a32a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 ff5f 	bl	800b1e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b40      	cmp	r3, #64	; 0x40
 800a336:	d10e      	bne.n	800a356 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a342:	2b40      	cmp	r3, #64	; 0x40
 800a344:	d107      	bne.n	800a356 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a34e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fa4f 	bl	800a7f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b20      	cmp	r3, #32
 800a362:	d10e      	bne.n	800a382 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d107      	bne.n	800a382 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f06f 0220 	mvn.w	r2, #32
 800a37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 ff1f 	bl	800b1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e0ff      	b.n	800a5aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b14      	cmp	r3, #20
 800a3b6:	f200 80f0 	bhi.w	800a59a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a415 	.word	0x0800a415
 800a3c4:	0800a59b 	.word	0x0800a59b
 800a3c8:	0800a59b 	.word	0x0800a59b
 800a3cc:	0800a59b 	.word	0x0800a59b
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a59b 	.word	0x0800a59b
 800a3d8:	0800a59b 	.word	0x0800a59b
 800a3dc:	0800a59b 	.word	0x0800a59b
 800a3e0:	0800a497 	.word	0x0800a497
 800a3e4:	0800a59b 	.word	0x0800a59b
 800a3e8:	0800a59b 	.word	0x0800a59b
 800a3ec:	0800a59b 	.word	0x0800a59b
 800a3f0:	0800a4d7 	.word	0x0800a4d7
 800a3f4:	0800a59b 	.word	0x0800a59b
 800a3f8:	0800a59b 	.word	0x0800a59b
 800a3fc:	0800a59b 	.word	0x0800a59b
 800a400:	0800a519 	.word	0x0800a519
 800a404:	0800a59b 	.word	0x0800a59b
 800a408:	0800a59b 	.word	0x0800a59b
 800a40c:	0800a59b 	.word	0x0800a59b
 800a410:	0800a559 	.word	0x0800a559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 fa9a 	bl	800a954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	699a      	ldr	r2, [r3, #24]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0208 	orr.w	r2, r2, #8
 800a42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0204 	bic.w	r2, r2, #4
 800a43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	6999      	ldr	r1, [r3, #24]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	691a      	ldr	r2, [r3, #16]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	430a      	orrs	r2, r1
 800a450:	619a      	str	r2, [r3, #24]
      break;
 800a452:	e0a5      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68b9      	ldr	r1, [r7, #8]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fb0a 	bl	800aa74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	699a      	ldr	r2, [r3, #24]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	699a      	ldr	r2, [r3, #24]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6999      	ldr	r1, [r3, #24]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	021a      	lsls	r2, r3, #8
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	619a      	str	r2, [r3, #24]
      break;
 800a494:	e084      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68b9      	ldr	r1, [r7, #8]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 fb73 	bl	800ab88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	69da      	ldr	r2, [r3, #28]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0208 	orr.w	r2, r2, #8
 800a4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	69da      	ldr	r2, [r3, #28]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0204 	bic.w	r2, r2, #4
 800a4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69d9      	ldr	r1, [r3, #28]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	61da      	str	r2, [r3, #28]
      break;
 800a4d4:	e064      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fbdb 	bl	800ac98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	69da      	ldr	r2, [r3, #28]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	69da      	ldr	r2, [r3, #28]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69d9      	ldr	r1, [r3, #28]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	021a      	lsls	r2, r3, #8
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	61da      	str	r2, [r3, #28]
      break;
 800a516:	e043      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 fc24 	bl	800ad6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0208 	orr.w	r2, r2, #8
 800a532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0204 	bic.w	r2, r2, #4
 800a542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a556:	e023      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fc68 	bl	800ae34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	021a      	lsls	r2, r3, #8
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a598:	e002      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	75fb      	strb	r3, [r7, #23]
      break;
 800a59e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop

0800a5b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e0dc      	b.n	800a78a <HAL_TIM_ConfigClockSource+0x1d6>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4b6a      	ldr	r3, [pc, #424]	; (800a794 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a64      	ldr	r2, [pc, #400]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a606:	4293      	cmp	r3, r2
 800a608:	f000 80a9 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a60c:	4a62      	ldr	r2, [pc, #392]	; (800a798 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	f200 80ae 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a614:	4a61      	ldr	r2, [pc, #388]	; (800a79c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a616:	4293      	cmp	r3, r2
 800a618:	f000 80a1 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a61c:	4a5f      	ldr	r2, [pc, #380]	; (800a79c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	f200 80a6 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a624:	4a5e      	ldr	r2, [pc, #376]	; (800a7a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a626:	4293      	cmp	r3, r2
 800a628:	f000 8099 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a62c:	4a5c      	ldr	r2, [pc, #368]	; (800a7a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	f200 809e 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a638:	f000 8091 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a63c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a640:	f200 8096 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a648:	f000 8089 	beq.w	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a64c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a650:	f200 808e 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a658:	d03e      	beq.n	800a6d8 <HAL_TIM_ConfigClockSource+0x124>
 800a65a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65e:	f200 8087 	bhi.w	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a666:	f000 8086 	beq.w	800a776 <HAL_TIM_ConfigClockSource+0x1c2>
 800a66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66e:	d87f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a670:	2b70      	cmp	r3, #112	; 0x70
 800a672:	d01a      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0xf6>
 800a674:	2b70      	cmp	r3, #112	; 0x70
 800a676:	d87b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a678:	2b60      	cmp	r3, #96	; 0x60
 800a67a:	d050      	beq.n	800a71e <HAL_TIM_ConfigClockSource+0x16a>
 800a67c:	2b60      	cmp	r3, #96	; 0x60
 800a67e:	d877      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a680:	2b50      	cmp	r3, #80	; 0x50
 800a682:	d03c      	beq.n	800a6fe <HAL_TIM_ConfigClockSource+0x14a>
 800a684:	2b50      	cmp	r3, #80	; 0x50
 800a686:	d873      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d058      	beq.n	800a73e <HAL_TIM_ConfigClockSource+0x18a>
 800a68c:	2b40      	cmp	r3, #64	; 0x40
 800a68e:	d86f      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a690:	2b30      	cmp	r3, #48	; 0x30
 800a692:	d064      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a694:	2b30      	cmp	r3, #48	; 0x30
 800a696:	d86b      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a698:	2b20      	cmp	r3, #32
 800a69a:	d060      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d867      	bhi.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d05c      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a6a4:	2b10      	cmp	r3, #16
 800a6a6:	d05a      	beq.n	800a75e <HAL_TIM_ConfigClockSource+0x1aa>
 800a6a8:	e062      	b.n	800a770 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6ba:	f000 fc9f 	bl	800affc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	609a      	str	r2, [r3, #8]
      break;
 800a6d6:	e04f      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a6e8:	f000 fc88 	bl	800affc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6fa:	609a      	str	r2, [r3, #8]
      break;
 800a6fc:	e03c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a70a:	461a      	mov	r2, r3
 800a70c:	f000 fbf8 	bl	800af00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2150      	movs	r1, #80	; 0x50
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fc52 	bl	800afc0 <TIM_ITRx_SetConfig>
      break;
 800a71c:	e02c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a72a:	461a      	mov	r2, r3
 800a72c:	f000 fc17 	bl	800af5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2160      	movs	r1, #96	; 0x60
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fc42 	bl	800afc0 <TIM_ITRx_SetConfig>
      break;
 800a73c:	e01c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a74a:	461a      	mov	r2, r3
 800a74c:	f000 fbd8 	bl	800af00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2140      	movs	r1, #64	; 0x40
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fc32 	bl	800afc0 <TIM_ITRx_SetConfig>
      break;
 800a75c:	e00c      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	4610      	mov	r0, r2
 800a76a:	f000 fc29 	bl	800afc0 <TIM_ITRx_SetConfig>
      break;
 800a76e:	e003      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e000      	b.n	800a778 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	ffceff88 	.word	0xffceff88
 800a798:	00100040 	.word	0x00100040
 800a79c:	00100030 	.word	0x00100030
 800a7a0:	00100020 	.word	0x00100020

0800a7a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a44      	ldr	r2, [pc, #272]	; (800a92c <TIM_Base_SetConfig+0x124>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d013      	beq.n	800a848 <TIM_Base_SetConfig+0x40>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a826:	d00f      	beq.n	800a848 <TIM_Base_SetConfig+0x40>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a41      	ldr	r2, [pc, #260]	; (800a930 <TIM_Base_SetConfig+0x128>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00b      	beq.n	800a848 <TIM_Base_SetConfig+0x40>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a40      	ldr	r2, [pc, #256]	; (800a934 <TIM_Base_SetConfig+0x12c>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d007      	beq.n	800a848 <TIM_Base_SetConfig+0x40>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a3f      	ldr	r2, [pc, #252]	; (800a938 <TIM_Base_SetConfig+0x130>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d003      	beq.n	800a848 <TIM_Base_SetConfig+0x40>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a3e      	ldr	r2, [pc, #248]	; (800a93c <TIM_Base_SetConfig+0x134>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d108      	bne.n	800a85a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a84e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a33      	ldr	r2, [pc, #204]	; (800a92c <TIM_Base_SetConfig+0x124>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d027      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a868:	d023      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a30      	ldr	r2, [pc, #192]	; (800a930 <TIM_Base_SetConfig+0x128>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01f      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a2f      	ldr	r2, [pc, #188]	; (800a934 <TIM_Base_SetConfig+0x12c>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d01b      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a2e      	ldr	r2, [pc, #184]	; (800a938 <TIM_Base_SetConfig+0x130>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d017      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a2d      	ldr	r2, [pc, #180]	; (800a93c <TIM_Base_SetConfig+0x134>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d013      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a2c      	ldr	r2, [pc, #176]	; (800a940 <TIM_Base_SetConfig+0x138>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00f      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a2b      	ldr	r2, [pc, #172]	; (800a944 <TIM_Base_SetConfig+0x13c>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00b      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a2a      	ldr	r2, [pc, #168]	; (800a948 <TIM_Base_SetConfig+0x140>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d007      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a29      	ldr	r2, [pc, #164]	; (800a94c <TIM_Base_SetConfig+0x144>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d003      	beq.n	800a8b2 <TIM_Base_SetConfig+0xaa>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a28      	ldr	r2, [pc, #160]	; (800a950 <TIM_Base_SetConfig+0x148>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d108      	bne.n	800a8c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	689a      	ldr	r2, [r3, #8]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a10      	ldr	r2, [pc, #64]	; (800a92c <TIM_Base_SetConfig+0x124>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d00f      	beq.n	800a910 <TIM_Base_SetConfig+0x108>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a12      	ldr	r2, [pc, #72]	; (800a93c <TIM_Base_SetConfig+0x134>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d00b      	beq.n	800a910 <TIM_Base_SetConfig+0x108>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a11      	ldr	r2, [pc, #68]	; (800a940 <TIM_Base_SetConfig+0x138>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d007      	beq.n	800a910 <TIM_Base_SetConfig+0x108>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a10      	ldr	r2, [pc, #64]	; (800a944 <TIM_Base_SetConfig+0x13c>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d003      	beq.n	800a910 <TIM_Base_SetConfig+0x108>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a0f      	ldr	r2, [pc, #60]	; (800a948 <TIM_Base_SetConfig+0x140>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d103      	bne.n	800a918 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	691a      	ldr	r2, [r3, #16]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	615a      	str	r2, [r3, #20]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40010000 	.word	0x40010000
 800a930:	40000400 	.word	0x40000400
 800a934:	40000800 	.word	0x40000800
 800a938:	40000c00 	.word	0x40000c00
 800a93c:	40010400 	.word	0x40010400
 800a940:	40014000 	.word	0x40014000
 800a944:	40014400 	.word	0x40014400
 800a948:	40014800 	.word	0x40014800
 800a94c:	4000e000 	.word	0x4000e000
 800a950:	4000e400 	.word	0x4000e400

0800a954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a954:	b480      	push	{r7}
 800a956:	b087      	sub	sp, #28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	4b37      	ldr	r3, [pc, #220]	; (800aa5c <TIM_OC1_SetConfig+0x108>)
 800a980:	4013      	ands	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	4313      	orrs	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f023 0302 	bic.w	r3, r3, #2
 800a99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a2d      	ldr	r2, [pc, #180]	; (800aa60 <TIM_OC1_SetConfig+0x10c>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00f      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x7c>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a2c      	ldr	r2, [pc, #176]	; (800aa64 <TIM_OC1_SetConfig+0x110>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00b      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x7c>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a2b      	ldr	r2, [pc, #172]	; (800aa68 <TIM_OC1_SetConfig+0x114>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d007      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x7c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a2a      	ldr	r2, [pc, #168]	; (800aa6c <TIM_OC1_SetConfig+0x118>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d003      	beq.n	800a9d0 <TIM_OC1_SetConfig+0x7c>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a29      	ldr	r2, [pc, #164]	; (800aa70 <TIM_OC1_SetConfig+0x11c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10c      	bne.n	800a9ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0308 	bic.w	r3, r3, #8
 800a9d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f023 0304 	bic.w	r3, r3, #4
 800a9e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a1c      	ldr	r2, [pc, #112]	; (800aa60 <TIM_OC1_SetConfig+0x10c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00f      	beq.n	800aa12 <TIM_OC1_SetConfig+0xbe>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <TIM_OC1_SetConfig+0x110>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00b      	beq.n	800aa12 <TIM_OC1_SetConfig+0xbe>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a1a      	ldr	r2, [pc, #104]	; (800aa68 <TIM_OC1_SetConfig+0x114>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d007      	beq.n	800aa12 <TIM_OC1_SetConfig+0xbe>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a19      	ldr	r2, [pc, #100]	; (800aa6c <TIM_OC1_SetConfig+0x118>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d003      	beq.n	800aa12 <TIM_OC1_SetConfig+0xbe>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a18      	ldr	r2, [pc, #96]	; (800aa70 <TIM_OC1_SetConfig+0x11c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d111      	bne.n	800aa36 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	693a      	ldr	r2, [r7, #16]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68fa      	ldr	r2, [r7, #12]
 800aa40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	621a      	str	r2, [r3, #32]
}
 800aa50:	bf00      	nop
 800aa52:	371c      	adds	r7, #28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	fffeff8f 	.word	0xfffeff8f
 800aa60:	40010000 	.word	0x40010000
 800aa64:	40010400 	.word	0x40010400
 800aa68:	40014000 	.word	0x40014000
 800aa6c:	40014400 	.word	0x40014400
 800aa70:	40014800 	.word	0x40014800

0800aa74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	f023 0210 	bic.w	r2, r3, #16
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4b34      	ldr	r3, [pc, #208]	; (800ab70 <TIM_OC2_SetConfig+0xfc>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	021b      	lsls	r3, r3, #8
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	f023 0320 	bic.w	r3, r3, #32
 800aabe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	011b      	lsls	r3, r3, #4
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a29      	ldr	r2, [pc, #164]	; (800ab74 <TIM_OC2_SetConfig+0x100>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC2_SetConfig+0x68>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a28      	ldr	r2, [pc, #160]	; (800ab78 <TIM_OC2_SetConfig+0x104>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10d      	bne.n	800aaf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <TIM_OC2_SetConfig+0x100>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d00f      	beq.n	800ab20 <TIM_OC2_SetConfig+0xac>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a1d      	ldr	r2, [pc, #116]	; (800ab78 <TIM_OC2_SetConfig+0x104>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d00b      	beq.n	800ab20 <TIM_OC2_SetConfig+0xac>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a1c      	ldr	r2, [pc, #112]	; (800ab7c <TIM_OC2_SetConfig+0x108>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d007      	beq.n	800ab20 <TIM_OC2_SetConfig+0xac>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a1b      	ldr	r2, [pc, #108]	; (800ab80 <TIM_OC2_SetConfig+0x10c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d003      	beq.n	800ab20 <TIM_OC2_SetConfig+0xac>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <TIM_OC2_SetConfig+0x110>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d113      	bne.n	800ab48 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	621a      	str	r2, [r3, #32]
}
 800ab62:	bf00      	nop
 800ab64:	371c      	adds	r7, #28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	feff8fff 	.word	0xfeff8fff
 800ab74:	40010000 	.word	0x40010000
 800ab78:	40010400 	.word	0x40010400
 800ab7c:	40014000 	.word	0x40014000
 800ab80:	40014400 	.word	0x40014400
 800ab84:	40014800 	.word	0x40014800

0800ab88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4b33      	ldr	r3, [pc, #204]	; (800ac80 <TIM_OC3_SetConfig+0xf8>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	021b      	lsls	r3, r3, #8
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	4313      	orrs	r3, r2
 800abdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a28      	ldr	r2, [pc, #160]	; (800ac84 <TIM_OC3_SetConfig+0xfc>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d003      	beq.n	800abee <TIM_OC3_SetConfig+0x66>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a27      	ldr	r2, [pc, #156]	; (800ac88 <TIM_OC3_SetConfig+0x100>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d10d      	bne.n	800ac0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	021b      	lsls	r3, r3, #8
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <TIM_OC3_SetConfig+0xfc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00f      	beq.n	800ac32 <TIM_OC3_SetConfig+0xaa>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <TIM_OC3_SetConfig+0x100>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <TIM_OC3_SetConfig+0xaa>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a1b      	ldr	r2, [pc, #108]	; (800ac8c <TIM_OC3_SetConfig+0x104>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d007      	beq.n	800ac32 <TIM_OC3_SetConfig+0xaa>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a1a      	ldr	r2, [pc, #104]	; (800ac90 <TIM_OC3_SetConfig+0x108>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d003      	beq.n	800ac32 <TIM_OC3_SetConfig+0xaa>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a19      	ldr	r2, [pc, #100]	; (800ac94 <TIM_OC3_SetConfig+0x10c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d113      	bne.n	800ac5a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	693a      	ldr	r2, [r7, #16]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	693a      	ldr	r2, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	621a      	str	r2, [r3, #32]
}
 800ac74:	bf00      	nop
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	fffeff8f 	.word	0xfffeff8f
 800ac84:	40010000 	.word	0x40010000
 800ac88:	40010400 	.word	0x40010400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40014400 	.word	0x40014400
 800ac94:	40014800 	.word	0x40014800

0800ac98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4b24      	ldr	r3, [pc, #144]	; (800ad54 <TIM_OC4_SetConfig+0xbc>)
 800acc4:	4013      	ands	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	4313      	orrs	r3, r2
 800acda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ace2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	031b      	lsls	r3, r3, #12
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4313      	orrs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a19      	ldr	r2, [pc, #100]	; (800ad58 <TIM_OC4_SetConfig+0xc0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d00f      	beq.n	800ad18 <TIM_OC4_SetConfig+0x80>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a18      	ldr	r2, [pc, #96]	; (800ad5c <TIM_OC4_SetConfig+0xc4>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00b      	beq.n	800ad18 <TIM_OC4_SetConfig+0x80>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a17      	ldr	r2, [pc, #92]	; (800ad60 <TIM_OC4_SetConfig+0xc8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d007      	beq.n	800ad18 <TIM_OC4_SetConfig+0x80>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a16      	ldr	r2, [pc, #88]	; (800ad64 <TIM_OC4_SetConfig+0xcc>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d003      	beq.n	800ad18 <TIM_OC4_SetConfig+0x80>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a15      	ldr	r2, [pc, #84]	; (800ad68 <TIM_OC4_SetConfig+0xd0>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d109      	bne.n	800ad2c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	019b      	lsls	r3, r3, #6
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	685a      	ldr	r2, [r3, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	621a      	str	r2, [r3, #32]
}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	feff8fff 	.word	0xfeff8fff
 800ad58:	40010000 	.word	0x40010000
 800ad5c:	40010400 	.word	0x40010400
 800ad60:	40014000 	.word	0x40014000
 800ad64:	40014400 	.word	0x40014400
 800ad68:	40014800 	.word	0x40014800

0800ad6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4b21      	ldr	r3, [pc, #132]	; (800ae1c <TIM_OC5_SetConfig+0xb0>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800adac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a18      	ldr	r2, [pc, #96]	; (800ae20 <TIM_OC5_SetConfig+0xb4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d00f      	beq.n	800ade2 <TIM_OC5_SetConfig+0x76>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a17      	ldr	r2, [pc, #92]	; (800ae24 <TIM_OC5_SetConfig+0xb8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d00b      	beq.n	800ade2 <TIM_OC5_SetConfig+0x76>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4a16      	ldr	r2, [pc, #88]	; (800ae28 <TIM_OC5_SetConfig+0xbc>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d007      	beq.n	800ade2 <TIM_OC5_SetConfig+0x76>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <TIM_OC5_SetConfig+0xc0>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d003      	beq.n	800ade2 <TIM_OC5_SetConfig+0x76>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4a14      	ldr	r2, [pc, #80]	; (800ae30 <TIM_OC5_SetConfig+0xc4>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d109      	bne.n	800adf6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ade8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	021b      	lsls	r3, r3, #8
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	621a      	str	r2, [r3, #32]
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	fffeff8f 	.word	0xfffeff8f
 800ae20:	40010000 	.word	0x40010000
 800ae24:	40010400 	.word	0x40010400
 800ae28:	40014000 	.word	0x40014000
 800ae2c:	40014400 	.word	0x40014400
 800ae30:	40014800 	.word	0x40014800

0800ae34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4b22      	ldr	r3, [pc, #136]	; (800aee8 <TIM_OC6_SetConfig+0xb4>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	021b      	lsls	r3, r3, #8
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	051b      	lsls	r3, r3, #20
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a19      	ldr	r2, [pc, #100]	; (800aeec <TIM_OC6_SetConfig+0xb8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d00f      	beq.n	800aeac <TIM_OC6_SetConfig+0x78>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a18      	ldr	r2, [pc, #96]	; (800aef0 <TIM_OC6_SetConfig+0xbc>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d00b      	beq.n	800aeac <TIM_OC6_SetConfig+0x78>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a17      	ldr	r2, [pc, #92]	; (800aef4 <TIM_OC6_SetConfig+0xc0>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d007      	beq.n	800aeac <TIM_OC6_SetConfig+0x78>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a16      	ldr	r2, [pc, #88]	; (800aef8 <TIM_OC6_SetConfig+0xc4>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d003      	beq.n	800aeac <TIM_OC6_SetConfig+0x78>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a15      	ldr	r2, [pc, #84]	; (800aefc <TIM_OC6_SetConfig+0xc8>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d109      	bne.n	800aec0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	029b      	lsls	r3, r3, #10
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	621a      	str	r2, [r3, #32]
}
 800aeda:	bf00      	nop
 800aedc:	371c      	adds	r7, #28
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	feff8fff 	.word	0xfeff8fff
 800aeec:	40010000 	.word	0x40010000
 800aef0:	40010400 	.word	0x40010400
 800aef4:	40014000 	.word	0x40014000
 800aef8:	40014400 	.word	0x40014400
 800aefc:	40014800 	.word	0x40014800

0800af00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6a1b      	ldr	r3, [r3, #32]
 800af10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	f023 0201 	bic.w	r2, r3, #1
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	4313      	orrs	r3, r2
 800af34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f023 030a 	bic.w	r3, r3, #10
 800af3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4313      	orrs	r3, r2
 800af44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	621a      	str	r2, [r3, #32]
}
 800af52:	bf00      	nop
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af5e:	b480      	push	{r7}
 800af60:	b087      	sub	sp, #28
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	f023 0210 	bic.w	r2, r3, #16
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	031b      	lsls	r3, r3, #12
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	4313      	orrs	r3, r2
 800af92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
	...

0800afc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <TIM_ITRx_SetConfig+0x38>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	4313      	orrs	r3, r2
 800afde:	f043 0307 	orr.w	r3, r3, #7
 800afe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	609a      	str	r2, [r3, #8]
}
 800afea:	bf00      	nop
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	ffcfff8f 	.word	0xffcfff8f

0800affc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	021a      	lsls	r2, r3, #8
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	431a      	orrs	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4313      	orrs	r3, r2
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	4313      	orrs	r3, r2
 800b028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	609a      	str	r2, [r3, #8]
}
 800b030:	bf00      	nop
 800b032:	371c      	adds	r7, #28
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	f003 031f 	and.w	r3, r3, #31
 800b04e:	2201      	movs	r2, #1
 800b050:	fa02 f303 	lsl.w	r3, r2, r3
 800b054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	43db      	mvns	r3, r3
 800b05e:	401a      	ands	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a1a      	ldr	r2, [r3, #32]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	fa01 f303 	lsl.w	r3, r1, r3
 800b074:	431a      	orrs	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	621a      	str	r2, [r3, #32]
}
 800b07a:	bf00      	nop
 800b07c:	371c      	adds	r7, #28
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
	...

0800b088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b09c:	2302      	movs	r3, #2
 800b09e:	e077      	b.n	800b190 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a35      	ldr	r2, [pc, #212]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d004      	beq.n	800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a34      	ldr	r2, [pc, #208]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d108      	bne.n	800b0e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a25      	ldr	r2, [pc, #148]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d02c      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b112:	d027      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a22      	ldr	r2, [pc, #136]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d022      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a21      	ldr	r2, [pc, #132]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d01d      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d018      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d013      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00e      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a1a      	ldr	r2, [pc, #104]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d009      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d004      	beq.n	800b164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a17      	ldr	r2, [pc, #92]	; (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d10c      	bne.n	800b17e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b16a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	4313      	orrs	r3, r2
 800b174:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	40010000 	.word	0x40010000
 800b1a0:	40010400 	.word	0x40010400
 800b1a4:	40000400 	.word	0x40000400
 800b1a8:	40000800 	.word	0x40000800
 800b1ac:	40000c00 	.word	0x40000c00
 800b1b0:	40001800 	.word	0x40001800
 800b1b4:	40014000 	.word	0x40014000
 800b1b8:	4000e000 	.word	0x4000e000
 800b1bc:	4000e400 	.word	0x4000e400

0800b1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e042      	b.n	800b294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7f6 fce7 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2224      	movs	r2, #36	; 0x24
 800b22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0201 	bic.w	r2, r2, #1
 800b23c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f8ba 	bl	800b3b8 <UART_SetConfig>
 800b244:	4603      	mov	r3, r0
 800b246:	2b01      	cmp	r3, #1
 800b248:	d101      	bne.n	800b24e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e022      	b.n	800b294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 ff1a 	bl	800c090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b26a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b27a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0201 	orr.w	r2, r2, #1
 800b28a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 ffa1 	bl	800c1d4 <UART_CheckIdleState>
 800b292:	4603      	mov	r3, r0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08a      	sub	sp, #40	; 0x28
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b2:	2b20      	cmp	r3, #32
 800b2b4:	d17b      	bne.n	800b3ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <HAL_UART_Transmit+0x26>
 800b2bc:	88fb      	ldrh	r3, [r7, #6]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d101      	bne.n	800b2c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e074      	b.n	800b3b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2221      	movs	r2, #33	; 0x21
 800b2d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2d6:	f7f6 fda5 	bl	8001e24 <HAL_GetTick>
 800b2da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	88fa      	ldrh	r2, [r7, #6]
 800b2e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	88fa      	ldrh	r2, [r7, #6]
 800b2e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2f4:	d108      	bne.n	800b308 <HAL_UART_Transmit+0x6c>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d104      	bne.n	800b308 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	61bb      	str	r3, [r7, #24]
 800b306:	e003      	b.n	800b310 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b310:	e030      	b.n	800b374 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2200      	movs	r2, #0
 800b31a:	2180      	movs	r1, #128	; 0x80
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f001 f803 	bl	800c328 <UART_WaitOnFlagUntilTimeout>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e03d      	b.n	800b3b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	461a      	mov	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	3302      	adds	r3, #2
 800b34e:	61bb      	str	r3, [r7, #24]
 800b350:	e007      	b.n	800b362 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	3301      	adds	r3, #1
 800b360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b368:	b29b      	uxth	r3, r3
 800b36a:	3b01      	subs	r3, #1
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1c8      	bne.n	800b312 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2200      	movs	r2, #0
 800b388:	2140      	movs	r1, #64	; 0x40
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 ffcc 	bl	800c328 <UART_WaitOnFlagUntilTimeout>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2220      	movs	r2, #32
 800b39a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e006      	b.n	800b3b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	e000      	b.n	800b3b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b3ae:	2302      	movs	r3, #2
  }
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3bc:	b092      	sub	sp, #72	; 0x48
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	69db      	ldr	r3, [r3, #28]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	4bbe      	ldr	r3, [pc, #760]	; (800b6e0 <UART_SetConfig+0x328>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	6812      	ldr	r2, [r2, #0]
 800b3ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4ab3      	ldr	r2, [pc, #716]	; (800b6e4 <UART_SetConfig+0x32c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d004      	beq.n	800b424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b420:	4313      	orrs	r3, r2
 800b422:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	4baf      	ldr	r3, [pc, #700]	; (800b6e8 <UART_SetConfig+0x330>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	6812      	ldr	r2, [r2, #0]
 800b432:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b434:	430b      	orrs	r3, r1
 800b436:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43e:	f023 010f 	bic.w	r1, r3, #15
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4aa6      	ldr	r2, [pc, #664]	; (800b6ec <UART_SetConfig+0x334>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d177      	bne.n	800b548 <UART_SetConfig+0x190>
 800b458:	4ba5      	ldr	r3, [pc, #660]	; (800b6f0 <UART_SetConfig+0x338>)
 800b45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b45c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b460:	2b28      	cmp	r3, #40	; 0x28
 800b462:	d86d      	bhi.n	800b540 <UART_SetConfig+0x188>
 800b464:	a201      	add	r2, pc, #4	; (adr r2, 800b46c <UART_SetConfig+0xb4>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b511 	.word	0x0800b511
 800b470:	0800b541 	.word	0x0800b541
 800b474:	0800b541 	.word	0x0800b541
 800b478:	0800b541 	.word	0x0800b541
 800b47c:	0800b541 	.word	0x0800b541
 800b480:	0800b541 	.word	0x0800b541
 800b484:	0800b541 	.word	0x0800b541
 800b488:	0800b541 	.word	0x0800b541
 800b48c:	0800b519 	.word	0x0800b519
 800b490:	0800b541 	.word	0x0800b541
 800b494:	0800b541 	.word	0x0800b541
 800b498:	0800b541 	.word	0x0800b541
 800b49c:	0800b541 	.word	0x0800b541
 800b4a0:	0800b541 	.word	0x0800b541
 800b4a4:	0800b541 	.word	0x0800b541
 800b4a8:	0800b541 	.word	0x0800b541
 800b4ac:	0800b521 	.word	0x0800b521
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b541 	.word	0x0800b541
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b541 	.word	0x0800b541
 800b4c4:	0800b541 	.word	0x0800b541
 800b4c8:	0800b541 	.word	0x0800b541
 800b4cc:	0800b529 	.word	0x0800b529
 800b4d0:	0800b541 	.word	0x0800b541
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b541 	.word	0x0800b541
 800b4dc:	0800b541 	.word	0x0800b541
 800b4e0:	0800b541 	.word	0x0800b541
 800b4e4:	0800b541 	.word	0x0800b541
 800b4e8:	0800b541 	.word	0x0800b541
 800b4ec:	0800b531 	.word	0x0800b531
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b541 	.word	0x0800b541
 800b4f8:	0800b541 	.word	0x0800b541
 800b4fc:	0800b541 	.word	0x0800b541
 800b500:	0800b541 	.word	0x0800b541
 800b504:	0800b541 	.word	0x0800b541
 800b508:	0800b541 	.word	0x0800b541
 800b50c:	0800b539 	.word	0x0800b539
 800b510:	2301      	movs	r3, #1
 800b512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b516:	e326      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b518:	2304      	movs	r3, #4
 800b51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51e:	e322      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b520:	2308      	movs	r3, #8
 800b522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b526:	e31e      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b528:	2310      	movs	r3, #16
 800b52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52e:	e31a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b530:	2320      	movs	r3, #32
 800b532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b536:	e316      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b538:	2340      	movs	r3, #64	; 0x40
 800b53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53e:	e312      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b540:	2380      	movs	r3, #128	; 0x80
 800b542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b546:	e30e      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a69      	ldr	r2, [pc, #420]	; (800b6f4 <UART_SetConfig+0x33c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d130      	bne.n	800b5b4 <UART_SetConfig+0x1fc>
 800b552:	4b67      	ldr	r3, [pc, #412]	; (800b6f0 <UART_SetConfig+0x338>)
 800b554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b05      	cmp	r3, #5
 800b55c:	d826      	bhi.n	800b5ac <UART_SetConfig+0x1f4>
 800b55e:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <UART_SetConfig+0x1ac>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b57d 	.word	0x0800b57d
 800b568:	0800b585 	.word	0x0800b585
 800b56c:	0800b58d 	.word	0x0800b58d
 800b570:	0800b595 	.word	0x0800b595
 800b574:	0800b59d 	.word	0x0800b59d
 800b578:	0800b5a5 	.word	0x0800b5a5
 800b57c:	2300      	movs	r3, #0
 800b57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b582:	e2f0      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b584:	2304      	movs	r3, #4
 800b586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58a:	e2ec      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b58c:	2308      	movs	r3, #8
 800b58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b592:	e2e8      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b594:	2310      	movs	r3, #16
 800b596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59a:	e2e4      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b59c:	2320      	movs	r3, #32
 800b59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a2:	e2e0      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b5a4:	2340      	movs	r3, #64	; 0x40
 800b5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5aa:	e2dc      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b5ac:	2380      	movs	r3, #128	; 0x80
 800b5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5b2:	e2d8      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a4f      	ldr	r2, [pc, #316]	; (800b6f8 <UART_SetConfig+0x340>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d130      	bne.n	800b620 <UART_SetConfig+0x268>
 800b5be:	4b4c      	ldr	r3, [pc, #304]	; (800b6f0 <UART_SetConfig+0x338>)
 800b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	2b05      	cmp	r3, #5
 800b5c8:	d826      	bhi.n	800b618 <UART_SetConfig+0x260>
 800b5ca:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <UART_SetConfig+0x218>)
 800b5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d0:	0800b5e9 	.word	0x0800b5e9
 800b5d4:	0800b5f1 	.word	0x0800b5f1
 800b5d8:	0800b5f9 	.word	0x0800b5f9
 800b5dc:	0800b601 	.word	0x0800b601
 800b5e0:	0800b609 	.word	0x0800b609
 800b5e4:	0800b611 	.word	0x0800b611
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ee:	e2ba      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f6:	e2b6      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b5f8:	2308      	movs	r3, #8
 800b5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fe:	e2b2      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b600:	2310      	movs	r3, #16
 800b602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b606:	e2ae      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b608:	2320      	movs	r3, #32
 800b60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60e:	e2aa      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b610:	2340      	movs	r3, #64	; 0x40
 800b612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b616:	e2a6      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b618:	2380      	movs	r3, #128	; 0x80
 800b61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b61e:	e2a2      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a35      	ldr	r2, [pc, #212]	; (800b6fc <UART_SetConfig+0x344>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d130      	bne.n	800b68c <UART_SetConfig+0x2d4>
 800b62a:	4b31      	ldr	r3, [pc, #196]	; (800b6f0 <UART_SetConfig+0x338>)
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	f003 0307 	and.w	r3, r3, #7
 800b632:	2b05      	cmp	r3, #5
 800b634:	d826      	bhi.n	800b684 <UART_SetConfig+0x2cc>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <UART_SetConfig+0x284>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b655 	.word	0x0800b655
 800b640:	0800b65d 	.word	0x0800b65d
 800b644:	0800b665 	.word	0x0800b665
 800b648:	0800b66d 	.word	0x0800b66d
 800b64c:	0800b675 	.word	0x0800b675
 800b650:	0800b67d 	.word	0x0800b67d
 800b654:	2300      	movs	r3, #0
 800b656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65a:	e284      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b65c:	2304      	movs	r3, #4
 800b65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b662:	e280      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b664:	2308      	movs	r3, #8
 800b666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66a:	e27c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b66c:	2310      	movs	r3, #16
 800b66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b672:	e278      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b674:	2320      	movs	r3, #32
 800b676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67a:	e274      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b67c:	2340      	movs	r3, #64	; 0x40
 800b67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b682:	e270      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b684:	2380      	movs	r3, #128	; 0x80
 800b686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b68a:	e26c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a1b      	ldr	r2, [pc, #108]	; (800b700 <UART_SetConfig+0x348>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d142      	bne.n	800b71c <UART_SetConfig+0x364>
 800b696:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <UART_SetConfig+0x338>)
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	2b05      	cmp	r3, #5
 800b6a0:	d838      	bhi.n	800b714 <UART_SetConfig+0x35c>
 800b6a2:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <UART_SetConfig+0x2f0>)
 800b6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a8:	0800b6c1 	.word	0x0800b6c1
 800b6ac:	0800b6c9 	.word	0x0800b6c9
 800b6b0:	0800b6d1 	.word	0x0800b6d1
 800b6b4:	0800b6d9 	.word	0x0800b6d9
 800b6b8:	0800b705 	.word	0x0800b705
 800b6bc:	0800b70d 	.word	0x0800b70d
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c6:	e24e      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b6c8:	2304      	movs	r3, #4
 800b6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ce:	e24a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b6d0:	2308      	movs	r3, #8
 800b6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d6:	e246      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b6d8:	2310      	movs	r3, #16
 800b6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6de:	e242      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b6e0:	cfff69f3 	.word	0xcfff69f3
 800b6e4:	58000c00 	.word	0x58000c00
 800b6e8:	11fff4ff 	.word	0x11fff4ff
 800b6ec:	40011000 	.word	0x40011000
 800b6f0:	58024400 	.word	0x58024400
 800b6f4:	40004400 	.word	0x40004400
 800b6f8:	40004800 	.word	0x40004800
 800b6fc:	40004c00 	.word	0x40004c00
 800b700:	40005000 	.word	0x40005000
 800b704:	2320      	movs	r3, #32
 800b706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70a:	e22c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b712:	e228      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b714:	2380      	movs	r3, #128	; 0x80
 800b716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71a:	e224      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4ab1      	ldr	r2, [pc, #708]	; (800b9e8 <UART_SetConfig+0x630>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d176      	bne.n	800b814 <UART_SetConfig+0x45c>
 800b726:	4bb1      	ldr	r3, [pc, #708]	; (800b9ec <UART_SetConfig+0x634>)
 800b728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b72e:	2b28      	cmp	r3, #40	; 0x28
 800b730:	d86c      	bhi.n	800b80c <UART_SetConfig+0x454>
 800b732:	a201      	add	r2, pc, #4	; (adr r2, 800b738 <UART_SetConfig+0x380>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b7dd 	.word	0x0800b7dd
 800b73c:	0800b80d 	.word	0x0800b80d
 800b740:	0800b80d 	.word	0x0800b80d
 800b744:	0800b80d 	.word	0x0800b80d
 800b748:	0800b80d 	.word	0x0800b80d
 800b74c:	0800b80d 	.word	0x0800b80d
 800b750:	0800b80d 	.word	0x0800b80d
 800b754:	0800b80d 	.word	0x0800b80d
 800b758:	0800b7e5 	.word	0x0800b7e5
 800b75c:	0800b80d 	.word	0x0800b80d
 800b760:	0800b80d 	.word	0x0800b80d
 800b764:	0800b80d 	.word	0x0800b80d
 800b768:	0800b80d 	.word	0x0800b80d
 800b76c:	0800b80d 	.word	0x0800b80d
 800b770:	0800b80d 	.word	0x0800b80d
 800b774:	0800b80d 	.word	0x0800b80d
 800b778:	0800b7ed 	.word	0x0800b7ed
 800b77c:	0800b80d 	.word	0x0800b80d
 800b780:	0800b80d 	.word	0x0800b80d
 800b784:	0800b80d 	.word	0x0800b80d
 800b788:	0800b80d 	.word	0x0800b80d
 800b78c:	0800b80d 	.word	0x0800b80d
 800b790:	0800b80d 	.word	0x0800b80d
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b7f5 	.word	0x0800b7f5
 800b79c:	0800b80d 	.word	0x0800b80d
 800b7a0:	0800b80d 	.word	0x0800b80d
 800b7a4:	0800b80d 	.word	0x0800b80d
 800b7a8:	0800b80d 	.word	0x0800b80d
 800b7ac:	0800b80d 	.word	0x0800b80d
 800b7b0:	0800b80d 	.word	0x0800b80d
 800b7b4:	0800b80d 	.word	0x0800b80d
 800b7b8:	0800b7fd 	.word	0x0800b7fd
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b80d 	.word	0x0800b80d
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b80d 	.word	0x0800b80d
 800b7cc:	0800b80d 	.word	0x0800b80d
 800b7d0:	0800b80d 	.word	0x0800b80d
 800b7d4:	0800b80d 	.word	0x0800b80d
 800b7d8:	0800b805 	.word	0x0800b805
 800b7dc:	2301      	movs	r3, #1
 800b7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e2:	e1c0      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ea:	e1bc      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b7ec:	2308      	movs	r3, #8
 800b7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f2:	e1b8      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fa:	e1b4      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b7fc:	2320      	movs	r3, #32
 800b7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b802:	e1b0      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b804:	2340      	movs	r3, #64	; 0x40
 800b806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b80a:	e1ac      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b80c:	2380      	movs	r3, #128	; 0x80
 800b80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b812:	e1a8      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a75      	ldr	r2, [pc, #468]	; (800b9f0 <UART_SetConfig+0x638>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d130      	bne.n	800b880 <UART_SetConfig+0x4c8>
 800b81e:	4b73      	ldr	r3, [pc, #460]	; (800b9ec <UART_SetConfig+0x634>)
 800b820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b822:	f003 0307 	and.w	r3, r3, #7
 800b826:	2b05      	cmp	r3, #5
 800b828:	d826      	bhi.n	800b878 <UART_SetConfig+0x4c0>
 800b82a:	a201      	add	r2, pc, #4	; (adr r2, 800b830 <UART_SetConfig+0x478>)
 800b82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b830:	0800b849 	.word	0x0800b849
 800b834:	0800b851 	.word	0x0800b851
 800b838:	0800b859 	.word	0x0800b859
 800b83c:	0800b861 	.word	0x0800b861
 800b840:	0800b869 	.word	0x0800b869
 800b844:	0800b871 	.word	0x0800b871
 800b848:	2300      	movs	r3, #0
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84e:	e18a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b850:	2304      	movs	r3, #4
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b856:	e186      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b858:	2308      	movs	r3, #8
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85e:	e182      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b860:	2310      	movs	r3, #16
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b866:	e17e      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b868:	2320      	movs	r3, #32
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86e:	e17a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b876:	e176      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b878:	2380      	movs	r3, #128	; 0x80
 800b87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b87e:	e172      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a5b      	ldr	r2, [pc, #364]	; (800b9f4 <UART_SetConfig+0x63c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d130      	bne.n	800b8ec <UART_SetConfig+0x534>
 800b88a:	4b58      	ldr	r3, [pc, #352]	; (800b9ec <UART_SetConfig+0x634>)
 800b88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b05      	cmp	r3, #5
 800b894:	d826      	bhi.n	800b8e4 <UART_SetConfig+0x52c>
 800b896:	a201      	add	r2, pc, #4	; (adr r2, 800b89c <UART_SetConfig+0x4e4>)
 800b898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89c:	0800b8b5 	.word	0x0800b8b5
 800b8a0:	0800b8bd 	.word	0x0800b8bd
 800b8a4:	0800b8c5 	.word	0x0800b8c5
 800b8a8:	0800b8cd 	.word	0x0800b8cd
 800b8ac:	0800b8d5 	.word	0x0800b8d5
 800b8b0:	0800b8dd 	.word	0x0800b8dd
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ba:	e154      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8bc:	2304      	movs	r3, #4
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c2:	e150      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8c4:	2308      	movs	r3, #8
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ca:	e14c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8cc:	2310      	movs	r3, #16
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8d2:	e148      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8d4:	2320      	movs	r3, #32
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8da:	e144      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8dc:	2340      	movs	r3, #64	; 0x40
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8e2:	e140      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8e4:	2380      	movs	r3, #128	; 0x80
 800b8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ea:	e13c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a41      	ldr	r2, [pc, #260]	; (800b9f8 <UART_SetConfig+0x640>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	f040 8082 	bne.w	800b9fc <UART_SetConfig+0x644>
 800b8f8:	4b3c      	ldr	r3, [pc, #240]	; (800b9ec <UART_SetConfig+0x634>)
 800b8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b900:	2b28      	cmp	r3, #40	; 0x28
 800b902:	d86d      	bhi.n	800b9e0 <UART_SetConfig+0x628>
 800b904:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <UART_SetConfig+0x554>)
 800b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90a:	bf00      	nop
 800b90c:	0800b9b1 	.word	0x0800b9b1
 800b910:	0800b9e1 	.word	0x0800b9e1
 800b914:	0800b9e1 	.word	0x0800b9e1
 800b918:	0800b9e1 	.word	0x0800b9e1
 800b91c:	0800b9e1 	.word	0x0800b9e1
 800b920:	0800b9e1 	.word	0x0800b9e1
 800b924:	0800b9e1 	.word	0x0800b9e1
 800b928:	0800b9e1 	.word	0x0800b9e1
 800b92c:	0800b9b9 	.word	0x0800b9b9
 800b930:	0800b9e1 	.word	0x0800b9e1
 800b934:	0800b9e1 	.word	0x0800b9e1
 800b938:	0800b9e1 	.word	0x0800b9e1
 800b93c:	0800b9e1 	.word	0x0800b9e1
 800b940:	0800b9e1 	.word	0x0800b9e1
 800b944:	0800b9e1 	.word	0x0800b9e1
 800b948:	0800b9e1 	.word	0x0800b9e1
 800b94c:	0800b9c1 	.word	0x0800b9c1
 800b950:	0800b9e1 	.word	0x0800b9e1
 800b954:	0800b9e1 	.word	0x0800b9e1
 800b958:	0800b9e1 	.word	0x0800b9e1
 800b95c:	0800b9e1 	.word	0x0800b9e1
 800b960:	0800b9e1 	.word	0x0800b9e1
 800b964:	0800b9e1 	.word	0x0800b9e1
 800b968:	0800b9e1 	.word	0x0800b9e1
 800b96c:	0800b9c9 	.word	0x0800b9c9
 800b970:	0800b9e1 	.word	0x0800b9e1
 800b974:	0800b9e1 	.word	0x0800b9e1
 800b978:	0800b9e1 	.word	0x0800b9e1
 800b97c:	0800b9e1 	.word	0x0800b9e1
 800b980:	0800b9e1 	.word	0x0800b9e1
 800b984:	0800b9e1 	.word	0x0800b9e1
 800b988:	0800b9e1 	.word	0x0800b9e1
 800b98c:	0800b9d1 	.word	0x0800b9d1
 800b990:	0800b9e1 	.word	0x0800b9e1
 800b994:	0800b9e1 	.word	0x0800b9e1
 800b998:	0800b9e1 	.word	0x0800b9e1
 800b99c:	0800b9e1 	.word	0x0800b9e1
 800b9a0:	0800b9e1 	.word	0x0800b9e1
 800b9a4:	0800b9e1 	.word	0x0800b9e1
 800b9a8:	0800b9e1 	.word	0x0800b9e1
 800b9ac:	0800b9d9 	.word	0x0800b9d9
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9b6:	e0d6      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9be:	e0d2      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9c6:	e0ce      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9c8:	2310      	movs	r3, #16
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ce:	e0ca      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9d0:	2320      	movs	r3, #32
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d6:	e0c6      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9d8:	2340      	movs	r3, #64	; 0x40
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9de:	e0c2      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9e0:	2380      	movs	r3, #128	; 0x80
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e6:	e0be      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800b9e8:	40011400 	.word	0x40011400
 800b9ec:	58024400 	.word	0x58024400
 800b9f0:	40007800 	.word	0x40007800
 800b9f4:	40007c00 	.word	0x40007c00
 800b9f8:	40011800 	.word	0x40011800
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4aad      	ldr	r2, [pc, #692]	; (800bcb8 <UART_SetConfig+0x900>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d176      	bne.n	800baf4 <UART_SetConfig+0x73c>
 800ba06:	4bad      	ldr	r3, [pc, #692]	; (800bcbc <UART_SetConfig+0x904>)
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba0e:	2b28      	cmp	r3, #40	; 0x28
 800ba10:	d86c      	bhi.n	800baec <UART_SetConfig+0x734>
 800ba12:	a201      	add	r2, pc, #4	; (adr r2, 800ba18 <UART_SetConfig+0x660>)
 800ba14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba18:	0800babd 	.word	0x0800babd
 800ba1c:	0800baed 	.word	0x0800baed
 800ba20:	0800baed 	.word	0x0800baed
 800ba24:	0800baed 	.word	0x0800baed
 800ba28:	0800baed 	.word	0x0800baed
 800ba2c:	0800baed 	.word	0x0800baed
 800ba30:	0800baed 	.word	0x0800baed
 800ba34:	0800baed 	.word	0x0800baed
 800ba38:	0800bac5 	.word	0x0800bac5
 800ba3c:	0800baed 	.word	0x0800baed
 800ba40:	0800baed 	.word	0x0800baed
 800ba44:	0800baed 	.word	0x0800baed
 800ba48:	0800baed 	.word	0x0800baed
 800ba4c:	0800baed 	.word	0x0800baed
 800ba50:	0800baed 	.word	0x0800baed
 800ba54:	0800baed 	.word	0x0800baed
 800ba58:	0800bacd 	.word	0x0800bacd
 800ba5c:	0800baed 	.word	0x0800baed
 800ba60:	0800baed 	.word	0x0800baed
 800ba64:	0800baed 	.word	0x0800baed
 800ba68:	0800baed 	.word	0x0800baed
 800ba6c:	0800baed 	.word	0x0800baed
 800ba70:	0800baed 	.word	0x0800baed
 800ba74:	0800baed 	.word	0x0800baed
 800ba78:	0800bad5 	.word	0x0800bad5
 800ba7c:	0800baed 	.word	0x0800baed
 800ba80:	0800baed 	.word	0x0800baed
 800ba84:	0800baed 	.word	0x0800baed
 800ba88:	0800baed 	.word	0x0800baed
 800ba8c:	0800baed 	.word	0x0800baed
 800ba90:	0800baed 	.word	0x0800baed
 800ba94:	0800baed 	.word	0x0800baed
 800ba98:	0800badd 	.word	0x0800badd
 800ba9c:	0800baed 	.word	0x0800baed
 800baa0:	0800baed 	.word	0x0800baed
 800baa4:	0800baed 	.word	0x0800baed
 800baa8:	0800baed 	.word	0x0800baed
 800baac:	0800baed 	.word	0x0800baed
 800bab0:	0800baed 	.word	0x0800baed
 800bab4:	0800baed 	.word	0x0800baed
 800bab8:	0800bae5 	.word	0x0800bae5
 800babc:	2301      	movs	r3, #1
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bac2:	e050      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bac4:	2304      	movs	r3, #4
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baca:	e04c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bacc:	2308      	movs	r3, #8
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bad2:	e048      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bad4:	2310      	movs	r3, #16
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bada:	e044      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800badc:	2320      	movs	r3, #32
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bae2:	e040      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bae4:	2340      	movs	r3, #64	; 0x40
 800bae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baea:	e03c      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800baec:	2380      	movs	r3, #128	; 0x80
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800baf2:	e038      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a71      	ldr	r2, [pc, #452]	; (800bcc0 <UART_SetConfig+0x908>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d130      	bne.n	800bb60 <UART_SetConfig+0x7a8>
 800bafe:	4b6f      	ldr	r3, [pc, #444]	; (800bcbc <UART_SetConfig+0x904>)
 800bb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	2b05      	cmp	r3, #5
 800bb08:	d826      	bhi.n	800bb58 <UART_SetConfig+0x7a0>
 800bb0a:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <UART_SetConfig+0x758>)
 800bb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb10:	0800bb29 	.word	0x0800bb29
 800bb14:	0800bb31 	.word	0x0800bb31
 800bb18:	0800bb39 	.word	0x0800bb39
 800bb1c:	0800bb41 	.word	0x0800bb41
 800bb20:	0800bb49 	.word	0x0800bb49
 800bb24:	0800bb51 	.word	0x0800bb51
 800bb28:	2302      	movs	r3, #2
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb2e:	e01a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb30:	2304      	movs	r3, #4
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb36:	e016      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb38:	2308      	movs	r3, #8
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb3e:	e012      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb40:	2310      	movs	r3, #16
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb46:	e00e      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb48:	2320      	movs	r3, #32
 800bb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb4e:	e00a      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb50:	2340      	movs	r3, #64	; 0x40
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb56:	e006      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb58:	2380      	movs	r3, #128	; 0x80
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5e:	e002      	b.n	800bb66 <UART_SetConfig+0x7ae>
 800bb60:	2380      	movs	r3, #128	; 0x80
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a55      	ldr	r2, [pc, #340]	; (800bcc0 <UART_SetConfig+0x908>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	f040 80f8 	bne.w	800bd62 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb76:	2b20      	cmp	r3, #32
 800bb78:	dc46      	bgt.n	800bc08 <UART_SetConfig+0x850>
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	db75      	blt.n	800bc6a <UART_SetConfig+0x8b2>
 800bb7e:	3b02      	subs	r3, #2
 800bb80:	2b1e      	cmp	r3, #30
 800bb82:	d872      	bhi.n	800bc6a <UART_SetConfig+0x8b2>
 800bb84:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <UART_SetConfig+0x7d4>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bc0f 	.word	0x0800bc0f
 800bb90:	0800bc6b 	.word	0x0800bc6b
 800bb94:	0800bc17 	.word	0x0800bc17
 800bb98:	0800bc6b 	.word	0x0800bc6b
 800bb9c:	0800bc6b 	.word	0x0800bc6b
 800bba0:	0800bc6b 	.word	0x0800bc6b
 800bba4:	0800bc27 	.word	0x0800bc27
 800bba8:	0800bc6b 	.word	0x0800bc6b
 800bbac:	0800bc6b 	.word	0x0800bc6b
 800bbb0:	0800bc6b 	.word	0x0800bc6b
 800bbb4:	0800bc6b 	.word	0x0800bc6b
 800bbb8:	0800bc6b 	.word	0x0800bc6b
 800bbbc:	0800bc6b 	.word	0x0800bc6b
 800bbc0:	0800bc6b 	.word	0x0800bc6b
 800bbc4:	0800bc37 	.word	0x0800bc37
 800bbc8:	0800bc6b 	.word	0x0800bc6b
 800bbcc:	0800bc6b 	.word	0x0800bc6b
 800bbd0:	0800bc6b 	.word	0x0800bc6b
 800bbd4:	0800bc6b 	.word	0x0800bc6b
 800bbd8:	0800bc6b 	.word	0x0800bc6b
 800bbdc:	0800bc6b 	.word	0x0800bc6b
 800bbe0:	0800bc6b 	.word	0x0800bc6b
 800bbe4:	0800bc6b 	.word	0x0800bc6b
 800bbe8:	0800bc6b 	.word	0x0800bc6b
 800bbec:	0800bc6b 	.word	0x0800bc6b
 800bbf0:	0800bc6b 	.word	0x0800bc6b
 800bbf4:	0800bc6b 	.word	0x0800bc6b
 800bbf8:	0800bc6b 	.word	0x0800bc6b
 800bbfc:	0800bc6b 	.word	0x0800bc6b
 800bc00:	0800bc6b 	.word	0x0800bc6b
 800bc04:	0800bc5d 	.word	0x0800bc5d
 800bc08:	2b40      	cmp	r3, #64	; 0x40
 800bc0a:	d02a      	beq.n	800bc62 <UART_SetConfig+0x8aa>
 800bc0c:	e02d      	b.n	800bc6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bc0e:	f7fc fd11 	bl	8008634 <HAL_RCCEx_GetD3PCLK1Freq>
 800bc12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc14:	e02f      	b.n	800bc76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fc fd20 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc24:	e027      	b.n	800bc76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc26:	f107 0318 	add.w	r3, r7, #24
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fc fe6c 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc34:	e01f      	b.n	800bc76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc36:	4b21      	ldr	r3, [pc, #132]	; (800bcbc <UART_SetConfig+0x904>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0320 	and.w	r3, r3, #32
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d009      	beq.n	800bc56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc42:	4b1e      	ldr	r3, [pc, #120]	; (800bcbc <UART_SetConfig+0x904>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	08db      	lsrs	r3, r3, #3
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <UART_SetConfig+0x90c>)
 800bc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc54:	e00f      	b.n	800bc76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc56:	4b1b      	ldr	r3, [pc, #108]	; (800bcc4 <UART_SetConfig+0x90c>)
 800bc58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5a:	e00c      	b.n	800bc76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc5c:	4b1a      	ldr	r3, [pc, #104]	; (800bcc8 <UART_SetConfig+0x910>)
 800bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc60:	e009      	b.n	800bc76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc68:	e005      	b.n	800bc76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 81ee 	beq.w	800c05a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc82:	4a12      	ldr	r2, [pc, #72]	; (800bccc <UART_SetConfig+0x914>)
 800bc84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc90:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	685a      	ldr	r2, [r3, #4]
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d305      	bcc.n	800bcae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d910      	bls.n	800bcd0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bcb4:	e1d1      	b.n	800c05a <UART_SetConfig+0xca2>
 800bcb6:	bf00      	nop
 800bcb8:	40011c00 	.word	0x40011c00
 800bcbc:	58024400 	.word	0x58024400
 800bcc0:	58000c00 	.word	0x58000c00
 800bcc4:	03d09000 	.word	0x03d09000
 800bcc8:	003d0900 	.word	0x003d0900
 800bccc:	0800f344 	.word	0x0800f344
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
 800bcd6:	60fa      	str	r2, [r7, #12]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	4ac0      	ldr	r2, [pc, #768]	; (800bfe0 <UART_SetConfig+0xc28>)
 800bcde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	2200      	movs	r2, #0
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	607a      	str	r2, [r7, #4]
 800bcea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcf2:	f7f4 fb65 	bl	80003c0 <__aeabi_uldivmod>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f04f 0200 	mov.w	r2, #0
 800bd02:	f04f 0300 	mov.w	r3, #0
 800bd06:	020b      	lsls	r3, r1, #8
 800bd08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd0c:	0202      	lsls	r2, r0, #8
 800bd0e:	6979      	ldr	r1, [r7, #20]
 800bd10:	6849      	ldr	r1, [r1, #4]
 800bd12:	0849      	lsrs	r1, r1, #1
 800bd14:	2000      	movs	r0, #0
 800bd16:	460c      	mov	r4, r1
 800bd18:	4605      	mov	r5, r0
 800bd1a:	eb12 0804 	adds.w	r8, r2, r4
 800bd1e:	eb43 0905 	adc.w	r9, r3, r5
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	469a      	mov	sl, r3
 800bd2a:	4693      	mov	fp, r2
 800bd2c:	4652      	mov	r2, sl
 800bd2e:	465b      	mov	r3, fp
 800bd30:	4640      	mov	r0, r8
 800bd32:	4649      	mov	r1, r9
 800bd34:	f7f4 fb44 	bl	80003c0 <__aeabi_uldivmod>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd46:	d308      	bcc.n	800bd5a <UART_SetConfig+0x9a2>
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd4e:	d204      	bcs.n	800bd5a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd56:	60da      	str	r2, [r3, #12]
 800bd58:	e17f      	b.n	800c05a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bd60:	e17b      	b.n	800c05a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	69db      	ldr	r3, [r3, #28]
 800bd66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd6a:	f040 80bd 	bne.w	800bee8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bd6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd72:	2b20      	cmp	r3, #32
 800bd74:	dc48      	bgt.n	800be08 <UART_SetConfig+0xa50>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	db7b      	blt.n	800be72 <UART_SetConfig+0xaba>
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d879      	bhi.n	800be72 <UART_SetConfig+0xaba>
 800bd7e:	a201      	add	r2, pc, #4	; (adr r2, 800bd84 <UART_SetConfig+0x9cc>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800be0f 	.word	0x0800be0f
 800bd88:	0800be17 	.word	0x0800be17
 800bd8c:	0800be73 	.word	0x0800be73
 800bd90:	0800be73 	.word	0x0800be73
 800bd94:	0800be1f 	.word	0x0800be1f
 800bd98:	0800be73 	.word	0x0800be73
 800bd9c:	0800be73 	.word	0x0800be73
 800bda0:	0800be73 	.word	0x0800be73
 800bda4:	0800be2f 	.word	0x0800be2f
 800bda8:	0800be73 	.word	0x0800be73
 800bdac:	0800be73 	.word	0x0800be73
 800bdb0:	0800be73 	.word	0x0800be73
 800bdb4:	0800be73 	.word	0x0800be73
 800bdb8:	0800be73 	.word	0x0800be73
 800bdbc:	0800be73 	.word	0x0800be73
 800bdc0:	0800be73 	.word	0x0800be73
 800bdc4:	0800be3f 	.word	0x0800be3f
 800bdc8:	0800be73 	.word	0x0800be73
 800bdcc:	0800be73 	.word	0x0800be73
 800bdd0:	0800be73 	.word	0x0800be73
 800bdd4:	0800be73 	.word	0x0800be73
 800bdd8:	0800be73 	.word	0x0800be73
 800bddc:	0800be73 	.word	0x0800be73
 800bde0:	0800be73 	.word	0x0800be73
 800bde4:	0800be73 	.word	0x0800be73
 800bde8:	0800be73 	.word	0x0800be73
 800bdec:	0800be73 	.word	0x0800be73
 800bdf0:	0800be73 	.word	0x0800be73
 800bdf4:	0800be73 	.word	0x0800be73
 800bdf8:	0800be73 	.word	0x0800be73
 800bdfc:	0800be73 	.word	0x0800be73
 800be00:	0800be73 	.word	0x0800be73
 800be04:	0800be65 	.word	0x0800be65
 800be08:	2b40      	cmp	r3, #64	; 0x40
 800be0a:	d02e      	beq.n	800be6a <UART_SetConfig+0xab2>
 800be0c:	e031      	b.n	800be72 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be0e:	f7fa fd73 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800be12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be14:	e033      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be16:	f7fa fd85 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 800be1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800be1c:	e02f      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be22:	4618      	mov	r0, r3
 800be24:	f7fc fc1c 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be2c:	e027      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be2e:	f107 0318 	add.w	r3, r7, #24
 800be32:	4618      	mov	r0, r3
 800be34:	f7fc fd68 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be3c:	e01f      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be3e:	4b69      	ldr	r3, [pc, #420]	; (800bfe4 <UART_SetConfig+0xc2c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b00      	cmp	r3, #0
 800be48:	d009      	beq.n	800be5e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be4a:	4b66      	ldr	r3, [pc, #408]	; (800bfe4 <UART_SetConfig+0xc2c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	08db      	lsrs	r3, r3, #3
 800be50:	f003 0303 	and.w	r3, r3, #3
 800be54:	4a64      	ldr	r2, [pc, #400]	; (800bfe8 <UART_SetConfig+0xc30>)
 800be56:	fa22 f303 	lsr.w	r3, r2, r3
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be5c:	e00f      	b.n	800be7e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800be5e:	4b62      	ldr	r3, [pc, #392]	; (800bfe8 <UART_SetConfig+0xc30>)
 800be60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be62:	e00c      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800be64:	4b61      	ldr	r3, [pc, #388]	; (800bfec <UART_SetConfig+0xc34>)
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be68:	e009      	b.n	800be7e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be70:	e005      	b.n	800be7e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 80ea 	beq.w	800c05a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	4a55      	ldr	r2, [pc, #340]	; (800bfe0 <UART_SetConfig+0xc28>)
 800be8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be90:	461a      	mov	r2, r3
 800be92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be94:	fbb3 f3f2 	udiv	r3, r3, r2
 800be98:	005a      	lsls	r2, r3, #1
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	085b      	lsrs	r3, r3, #1
 800bea0:	441a      	add	r2, r3
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beae:	2b0f      	cmp	r3, #15
 800beb0:	d916      	bls.n	800bee0 <UART_SetConfig+0xb28>
 800beb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beb8:	d212      	bcs.n	800bee0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	f023 030f 	bic.w	r3, r3, #15
 800bec2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	085b      	lsrs	r3, r3, #1
 800bec8:	b29b      	uxth	r3, r3
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	b29a      	uxth	r2, r3
 800bed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bed2:	4313      	orrs	r3, r2
 800bed4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bedc:	60da      	str	r2, [r3, #12]
 800bede:	e0bc      	b.n	800c05a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bee0:	2301      	movs	r3, #1
 800bee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bee6:	e0b8      	b.n	800c05a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bee8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800beec:	2b20      	cmp	r3, #32
 800beee:	dc4b      	bgt.n	800bf88 <UART_SetConfig+0xbd0>
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f2c0 8087 	blt.w	800c004 <UART_SetConfig+0xc4c>
 800bef6:	2b20      	cmp	r3, #32
 800bef8:	f200 8084 	bhi.w	800c004 <UART_SetConfig+0xc4c>
 800befc:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <UART_SetConfig+0xb4c>)
 800befe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf02:	bf00      	nop
 800bf04:	0800bf8f 	.word	0x0800bf8f
 800bf08:	0800bf97 	.word	0x0800bf97
 800bf0c:	0800c005 	.word	0x0800c005
 800bf10:	0800c005 	.word	0x0800c005
 800bf14:	0800bf9f 	.word	0x0800bf9f
 800bf18:	0800c005 	.word	0x0800c005
 800bf1c:	0800c005 	.word	0x0800c005
 800bf20:	0800c005 	.word	0x0800c005
 800bf24:	0800bfaf 	.word	0x0800bfaf
 800bf28:	0800c005 	.word	0x0800c005
 800bf2c:	0800c005 	.word	0x0800c005
 800bf30:	0800c005 	.word	0x0800c005
 800bf34:	0800c005 	.word	0x0800c005
 800bf38:	0800c005 	.word	0x0800c005
 800bf3c:	0800c005 	.word	0x0800c005
 800bf40:	0800c005 	.word	0x0800c005
 800bf44:	0800bfbf 	.word	0x0800bfbf
 800bf48:	0800c005 	.word	0x0800c005
 800bf4c:	0800c005 	.word	0x0800c005
 800bf50:	0800c005 	.word	0x0800c005
 800bf54:	0800c005 	.word	0x0800c005
 800bf58:	0800c005 	.word	0x0800c005
 800bf5c:	0800c005 	.word	0x0800c005
 800bf60:	0800c005 	.word	0x0800c005
 800bf64:	0800c005 	.word	0x0800c005
 800bf68:	0800c005 	.word	0x0800c005
 800bf6c:	0800c005 	.word	0x0800c005
 800bf70:	0800c005 	.word	0x0800c005
 800bf74:	0800c005 	.word	0x0800c005
 800bf78:	0800c005 	.word	0x0800c005
 800bf7c:	0800c005 	.word	0x0800c005
 800bf80:	0800c005 	.word	0x0800c005
 800bf84:	0800bff7 	.word	0x0800bff7
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d037      	beq.n	800bffc <UART_SetConfig+0xc44>
 800bf8c:	e03a      	b.n	800c004 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf8e:	f7fa fcb3 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800bf92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf94:	e03c      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf96:	f7fa fcc5 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 800bf9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf9c:	e038      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fc fb5c 	bl	8008660 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfac:	e030      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfae:	f107 0318 	add.w	r3, r7, #24
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc fca8 	bl	8008908 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfbc:	e028      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfbe:	4b09      	ldr	r3, [pc, #36]	; (800bfe4 <UART_SetConfig+0xc2c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0320 	and.w	r3, r3, #32
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d012      	beq.n	800bff0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfca:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <UART_SetConfig+0xc2c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	08db      	lsrs	r3, r3, #3
 800bfd0:	f003 0303 	and.w	r3, r3, #3
 800bfd4:	4a04      	ldr	r2, [pc, #16]	; (800bfe8 <UART_SetConfig+0xc30>)
 800bfd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfdc:	e018      	b.n	800c010 <UART_SetConfig+0xc58>
 800bfde:	bf00      	nop
 800bfe0:	0800f344 	.word	0x0800f344
 800bfe4:	58024400 	.word	0x58024400
 800bfe8:	03d09000 	.word	0x03d09000
 800bfec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bff0:	4b24      	ldr	r3, [pc, #144]	; (800c084 <UART_SetConfig+0xccc>)
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	e00c      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bff6:	4b24      	ldr	r3, [pc, #144]	; (800c088 <UART_SetConfig+0xcd0>)
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bffa:	e009      	b.n	800c010 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c000:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c002:	e005      	b.n	800c010 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c00e:	bf00      	nop
    }

    if (pclk != 0U)
 800c010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c012:	2b00      	cmp	r3, #0
 800c014:	d021      	beq.n	800c05a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01a:	4a1c      	ldr	r2, [pc, #112]	; (800c08c <UART_SetConfig+0xcd4>)
 800c01c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c020:	461a      	mov	r2, r3
 800c022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c024:	fbb3 f2f2 	udiv	r2, r3, r2
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	085b      	lsrs	r3, r3, #1
 800c02e:	441a      	add	r2, r3
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	fbb2 f3f3 	udiv	r3, r2, r3
 800c038:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	2b0f      	cmp	r3, #15
 800c03e:	d909      	bls.n	800c054 <UART_SetConfig+0xc9c>
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c046:	d205      	bcs.n	800c054 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e002      	b.n	800c05a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2201      	movs	r2, #1
 800c066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2200      	movs	r2, #0
 800c06e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2200      	movs	r2, #0
 800c074:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c076:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3748      	adds	r7, #72	; 0x48
 800c07e:	46bd      	mov	sp, r7
 800c080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c084:	03d09000 	.word	0x03d09000
 800c088:	003d0900 	.word	0x003d0900
 800c08c:	0800f344 	.word	0x0800f344

0800c090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00a      	beq.n	800c0ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	430a      	orrs	r2, r1
 800c0b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00a      	beq.n	800c0dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e0:	f003 0304 	and.w	r3, r3, #4
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00a      	beq.n	800c0fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	430a      	orrs	r2, r1
 800c0fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c102:	f003 0308 	and.w	r3, r3, #8
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c124:	f003 0310 	and.w	r3, r3, #16
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00a      	beq.n	800c142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00a      	beq.n	800c164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	430a      	orrs	r2, r1
 800c162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01a      	beq.n	800c1a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c18e:	d10a      	bne.n	800c1a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d00a      	beq.n	800c1c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	605a      	str	r2, [r3, #4]
  }
}
 800c1c8:	bf00      	nop
 800c1ca:	370c      	adds	r7, #12
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr

0800c1d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b098      	sub	sp, #96	; 0x60
 800c1d8:	af02      	add	r7, sp, #8
 800c1da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1e4:	f7f5 fe1e 	bl	8001e24 <HAL_GetTick>
 800c1e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0308 	and.w	r3, r3, #8
 800c1f4:	2b08      	cmp	r3, #8
 800c1f6:	d12f      	bne.n	800c258 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c200:	2200      	movs	r2, #0
 800c202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f88e 	bl	800c328 <UART_WaitOnFlagUntilTimeout>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d022      	beq.n	800c258 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	e853 3f00 	ldrex	r3, [r3]
 800c21e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c226:	653b      	str	r3, [r7, #80]	; 0x50
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	461a      	mov	r2, r3
 800c22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c230:	647b      	str	r3, [r7, #68]	; 0x44
 800c232:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c238:	e841 2300 	strex	r3, r2, [r1]
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1e6      	bne.n	800c212 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2220      	movs	r2, #32
 800c248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	e063      	b.n	800c320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 0304 	and.w	r3, r3, #4
 800c262:	2b04      	cmp	r3, #4
 800c264:	d149      	bne.n	800c2fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c26a:	9300      	str	r3, [sp, #0]
 800c26c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c26e:	2200      	movs	r2, #0
 800c270:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f857 	bl	800c328 <UART_WaitOnFlagUntilTimeout>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d03c      	beq.n	800c2fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	e853 3f00 	ldrex	r3, [r3]
 800c28c:	623b      	str	r3, [r7, #32]
   return(result);
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c294:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	633b      	str	r3, [r7, #48]	; 0x30
 800c2a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a6:	e841 2300 	strex	r3, r2, [r1]
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1e6      	bne.n	800c280 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	e853 3f00 	ldrex	r3, [r3]
 800c2c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f023 0301 	bic.w	r3, r3, #1
 800c2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3308      	adds	r3, #8
 800c2d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2d2:	61fa      	str	r2, [r7, #28]
 800c2d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d6:	69b9      	ldr	r1, [r7, #24]
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	e841 2300 	strex	r3, r2, [r1]
 800c2de:	617b      	str	r3, [r7, #20]
   return(result);
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1e5      	bne.n	800c2b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e012      	b.n	800c320 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2220      	movs	r2, #32
 800c306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3758      	adds	r7, #88	; 0x58
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	4613      	mov	r3, r2
 800c336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c338:	e049      	b.n	800c3ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d045      	beq.n	800c3ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c342:	f7f5 fd6f 	bl	8001e24 <HAL_GetTick>
 800c346:	4602      	mov	r2, r0
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	1ad3      	subs	r3, r2, r3
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d302      	bcc.n	800c358 <UART_WaitOnFlagUntilTimeout+0x30>
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e048      	b.n	800c3ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 0304 	and.w	r3, r3, #4
 800c366:	2b00      	cmp	r3, #0
 800c368:	d031      	beq.n	800c3ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	f003 0308 	and.w	r3, r3, #8
 800c374:	2b08      	cmp	r3, #8
 800c376:	d110      	bne.n	800c39a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2208      	movs	r2, #8
 800c37e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 f839 	bl	800c3f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2208      	movs	r2, #8
 800c38a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e029      	b.n	800c3ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69db      	ldr	r3, [r3, #28]
 800c3a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3a8:	d111      	bne.n	800c3ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 f81f 	bl	800c3f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2220      	movs	r2, #32
 800c3be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e00f      	b.n	800c3ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69da      	ldr	r2, [r3, #28]
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	4013      	ands	r3, r2
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	bf0c      	ite	eq
 800c3de:	2301      	moveq	r3, #1
 800c3e0:	2300      	movne	r3, #0
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	79fb      	ldrb	r3, [r7, #7]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d0a6      	beq.n	800c33a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b095      	sub	sp, #84	; 0x54
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c408:	e853 3f00 	ldrex	r3, [r3]
 800c40c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c414:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	461a      	mov	r2, r3
 800c41c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c41e:	643b      	str	r3, [r7, #64]	; 0x40
 800c420:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c426:	e841 2300 	strex	r3, r2, [r1]
 800c42a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e6      	bne.n	800c400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3308      	adds	r3, #8
 800c438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	e853 3f00 	ldrex	r3, [r3]
 800c440:	61fb      	str	r3, [r7, #28]
   return(result);
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	4b1e      	ldr	r3, [pc, #120]	; (800c4c0 <UART_EndRxTransfer+0xc8>)
 800c446:	4013      	ands	r3, r2
 800c448:	64bb      	str	r3, [r7, #72]	; 0x48
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	3308      	adds	r3, #8
 800c450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c452:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c45a:	e841 2300 	strex	r3, r2, [r1]
 800c45e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	2b00      	cmp	r3, #0
 800c464:	d1e5      	bne.n	800c432 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d118      	bne.n	800c4a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	e853 3f00 	ldrex	r3, [r3]
 800c47a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	f023 0310 	bic.w	r3, r3, #16
 800c482:	647b      	str	r3, [r7, #68]	; 0x44
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	461a      	mov	r2, r3
 800c48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c48c:	61bb      	str	r3, [r7, #24]
 800c48e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c490:	6979      	ldr	r1, [r7, #20]
 800c492:	69ba      	ldr	r2, [r7, #24]
 800c494:	e841 2300 	strex	r3, r2, [r1]
 800c498:	613b      	str	r3, [r7, #16]
   return(result);
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1e6      	bne.n	800c46e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2220      	movs	r2, #32
 800c4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c4b4:	bf00      	nop
 800c4b6:	3754      	adds	r7, #84	; 0x54
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	effffffe 	.word	0xeffffffe

0800c4c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d101      	bne.n	800c4da <HAL_UARTEx_DisableFifoMode+0x16>
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	e027      	b.n	800c52a <HAL_UARTEx_DisableFifoMode+0x66>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2224      	movs	r2, #36	; 0x24
 800c4e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f022 0201 	bic.w	r2, r2, #1
 800c500:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c508:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2220      	movs	r2, #32
 800c51c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b084      	sub	sp, #16
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c546:	2b01      	cmp	r3, #1
 800c548:	d101      	bne.n	800c54e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c54a:	2302      	movs	r3, #2
 800c54c:	e02d      	b.n	800c5aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2224      	movs	r2, #36	; 0x24
 800c55a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	430a      	orrs	r2, r1
 800c588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f850 	bl	800c630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d101      	bne.n	800c5ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	e02d      	b.n	800c626 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2224      	movs	r2, #36	; 0x24
 800c5d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f022 0201 	bic.w	r2, r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f812 	bl	800c630 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2220      	movs	r2, #32
 800c618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d108      	bne.n	800c652 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c650:	e031      	b.n	800c6b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c652:	2310      	movs	r3, #16
 800c654:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c656:	2310      	movs	r3, #16
 800c658:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	0e5b      	lsrs	r3, r3, #25
 800c662:	b2db      	uxtb	r3, r3
 800c664:	f003 0307 	and.w	r3, r3, #7
 800c668:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	0f5b      	lsrs	r3, r3, #29
 800c672:	b2db      	uxtb	r3, r3
 800c674:	f003 0307 	and.w	r3, r3, #7
 800c678:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	7b3a      	ldrb	r2, [r7, #12]
 800c67e:	4911      	ldr	r1, [pc, #68]	; (800c6c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c680:	5c8a      	ldrb	r2, [r1, r2]
 800c682:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c686:	7b3a      	ldrb	r2, [r7, #12]
 800c688:	490f      	ldr	r1, [pc, #60]	; (800c6c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c68a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c68c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c690:	b29a      	uxth	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	7b7a      	ldrb	r2, [r7, #13]
 800c69c:	4909      	ldr	r1, [pc, #36]	; (800c6c4 <UARTEx_SetNbDataToProcess+0x94>)
 800c69e:	5c8a      	ldrb	r2, [r1, r2]
 800c6a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6a4:	7b7a      	ldrb	r2, [r7, #13]
 800c6a6:	4908      	ldr	r1, [pc, #32]	; (800c6c8 <UARTEx_SetNbDataToProcess+0x98>)
 800c6a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6b6:	bf00      	nop
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	0800f35c 	.word	0x0800f35c
 800c6c8:	0800f364 	.word	0x0800f364

0800c6cc <__cvt>:
 800c6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ce:	ed2d 8b02 	vpush	{d8}
 800c6d2:	eeb0 8b40 	vmov.f64	d8, d0
 800c6d6:	b085      	sub	sp, #20
 800c6d8:	4617      	mov	r7, r2
 800c6da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c6dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6de:	ee18 2a90 	vmov	r2, s17
 800c6e2:	f025 0520 	bic.w	r5, r5, #32
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	bfb6      	itet	lt
 800c6ea:	222d      	movlt	r2, #45	; 0x2d
 800c6ec:	2200      	movge	r2, #0
 800c6ee:	eeb1 8b40 	vneglt.f64	d8, d0
 800c6f2:	2d46      	cmp	r5, #70	; 0x46
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	d004      	beq.n	800c704 <__cvt+0x38>
 800c6fa:	2d45      	cmp	r5, #69	; 0x45
 800c6fc:	d100      	bne.n	800c700 <__cvt+0x34>
 800c6fe:	3401      	adds	r4, #1
 800c700:	2102      	movs	r1, #2
 800c702:	e000      	b.n	800c706 <__cvt+0x3a>
 800c704:	2103      	movs	r1, #3
 800c706:	ab03      	add	r3, sp, #12
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	ab02      	add	r3, sp, #8
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	4622      	mov	r2, r4
 800c710:	4633      	mov	r3, r6
 800c712:	eeb0 0b48 	vmov.f64	d0, d8
 800c716:	f000 fe53 	bl	800d3c0 <_dtoa_r>
 800c71a:	2d47      	cmp	r5, #71	; 0x47
 800c71c:	d101      	bne.n	800c722 <__cvt+0x56>
 800c71e:	07fb      	lsls	r3, r7, #31
 800c720:	d51a      	bpl.n	800c758 <__cvt+0x8c>
 800c722:	2d46      	cmp	r5, #70	; 0x46
 800c724:	eb00 0204 	add.w	r2, r0, r4
 800c728:	d10c      	bne.n	800c744 <__cvt+0x78>
 800c72a:	7803      	ldrb	r3, [r0, #0]
 800c72c:	2b30      	cmp	r3, #48	; 0x30
 800c72e:	d107      	bne.n	800c740 <__cvt+0x74>
 800c730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c738:	bf1c      	itt	ne
 800c73a:	f1c4 0401 	rsbne	r4, r4, #1
 800c73e:	6034      	strne	r4, [r6, #0]
 800c740:	6833      	ldr	r3, [r6, #0]
 800c742:	441a      	add	r2, r3
 800c744:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c74c:	bf08      	it	eq
 800c74e:	9203      	streq	r2, [sp, #12]
 800c750:	2130      	movs	r1, #48	; 0x30
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	4293      	cmp	r3, r2
 800c756:	d307      	bcc.n	800c768 <__cvt+0x9c>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c75c:	1a1b      	subs	r3, r3, r0
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	b005      	add	sp, #20
 800c762:	ecbd 8b02 	vpop	{d8}
 800c766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c768:	1c5c      	adds	r4, r3, #1
 800c76a:	9403      	str	r4, [sp, #12]
 800c76c:	7019      	strb	r1, [r3, #0]
 800c76e:	e7f0      	b.n	800c752 <__cvt+0x86>

0800c770 <__exponent>:
 800c770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c772:	4603      	mov	r3, r0
 800c774:	2900      	cmp	r1, #0
 800c776:	bfb8      	it	lt
 800c778:	4249      	neglt	r1, r1
 800c77a:	f803 2b02 	strb.w	r2, [r3], #2
 800c77e:	bfb4      	ite	lt
 800c780:	222d      	movlt	r2, #45	; 0x2d
 800c782:	222b      	movge	r2, #43	; 0x2b
 800c784:	2909      	cmp	r1, #9
 800c786:	7042      	strb	r2, [r0, #1]
 800c788:	dd2a      	ble.n	800c7e0 <__exponent+0x70>
 800c78a:	f10d 0207 	add.w	r2, sp, #7
 800c78e:	4617      	mov	r7, r2
 800c790:	260a      	movs	r6, #10
 800c792:	4694      	mov	ip, r2
 800c794:	fb91 f5f6 	sdiv	r5, r1, r6
 800c798:	fb06 1415 	mls	r4, r6, r5, r1
 800c79c:	3430      	adds	r4, #48	; 0x30
 800c79e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	2c63      	cmp	r4, #99	; 0x63
 800c7a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800c7aa:	4629      	mov	r1, r5
 800c7ac:	dcf1      	bgt.n	800c792 <__exponent+0x22>
 800c7ae:	3130      	adds	r1, #48	; 0x30
 800c7b0:	f1ac 0402 	sub.w	r4, ip, #2
 800c7b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c7b8:	1c41      	adds	r1, r0, #1
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	42ba      	cmp	r2, r7
 800c7be:	d30a      	bcc.n	800c7d6 <__exponent+0x66>
 800c7c0:	f10d 0209 	add.w	r2, sp, #9
 800c7c4:	eba2 020c 	sub.w	r2, r2, ip
 800c7c8:	42bc      	cmp	r4, r7
 800c7ca:	bf88      	it	hi
 800c7cc:	2200      	movhi	r2, #0
 800c7ce:	4413      	add	r3, r2
 800c7d0:	1a18      	subs	r0, r3, r0
 800c7d2:	b003      	add	sp, #12
 800c7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c7da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c7de:	e7ed      	b.n	800c7bc <__exponent+0x4c>
 800c7e0:	2330      	movs	r3, #48	; 0x30
 800c7e2:	3130      	adds	r1, #48	; 0x30
 800c7e4:	7083      	strb	r3, [r0, #2]
 800c7e6:	70c1      	strb	r1, [r0, #3]
 800c7e8:	1d03      	adds	r3, r0, #4
 800c7ea:	e7f1      	b.n	800c7d0 <__exponent+0x60>
 800c7ec:	0000      	movs	r0, r0
	...

0800c7f0 <_printf_float>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	b08b      	sub	sp, #44	; 0x2c
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	461f      	mov	r7, r3
 800c800:	4605      	mov	r5, r0
 800c802:	f000 fccd 	bl	800d1a0 <_localeconv_r>
 800c806:	f8d0 b000 	ldr.w	fp, [r0]
 800c80a:	4658      	mov	r0, fp
 800c80c:	f7f3 fdd0 	bl	80003b0 <strlen>
 800c810:	2300      	movs	r3, #0
 800c812:	9308      	str	r3, [sp, #32]
 800c814:	f8d8 3000 	ldr.w	r3, [r8]
 800c818:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c81c:	6822      	ldr	r2, [r4, #0]
 800c81e:	3307      	adds	r3, #7
 800c820:	f023 0307 	bic.w	r3, r3, #7
 800c824:	f103 0108 	add.w	r1, r3, #8
 800c828:	f8c8 1000 	str.w	r1, [r8]
 800c82c:	ed93 0b00 	vldr	d0, [r3]
 800c830:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800ca90 <_printf_float+0x2a0>
 800c834:	eeb0 7bc0 	vabs.f64	d7, d0
 800c838:	eeb4 7b46 	vcmp.f64	d7, d6
 800c83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c840:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c844:	4682      	mov	sl, r0
 800c846:	dd24      	ble.n	800c892 <_printf_float+0xa2>
 800c848:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c850:	d502      	bpl.n	800c858 <_printf_float+0x68>
 800c852:	232d      	movs	r3, #45	; 0x2d
 800c854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c858:	498f      	ldr	r1, [pc, #572]	; (800ca98 <_printf_float+0x2a8>)
 800c85a:	4b90      	ldr	r3, [pc, #576]	; (800ca9c <_printf_float+0x2ac>)
 800c85c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c860:	bf94      	ite	ls
 800c862:	4688      	movls	r8, r1
 800c864:	4698      	movhi	r8, r3
 800c866:	2303      	movs	r3, #3
 800c868:	6123      	str	r3, [r4, #16]
 800c86a:	f022 0204 	bic.w	r2, r2, #4
 800c86e:	2300      	movs	r3, #0
 800c870:	6022      	str	r2, [r4, #0]
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	9700      	str	r7, [sp, #0]
 800c876:	4633      	mov	r3, r6
 800c878:	aa09      	add	r2, sp, #36	; 0x24
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	f000 f9d1 	bl	800cc24 <_printf_common>
 800c882:	3001      	adds	r0, #1
 800c884:	f040 808a 	bne.w	800c99c <_printf_float+0x1ac>
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	b00b      	add	sp, #44	; 0x2c
 800c88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c892:	eeb4 0b40 	vcmp.f64	d0, d0
 800c896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c89a:	d709      	bvc.n	800c8b0 <_printf_float+0xc0>
 800c89c:	ee10 3a90 	vmov	r3, s1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	bfbc      	itt	lt
 800c8a4:	232d      	movlt	r3, #45	; 0x2d
 800c8a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8aa:	497d      	ldr	r1, [pc, #500]	; (800caa0 <_printf_float+0x2b0>)
 800c8ac:	4b7d      	ldr	r3, [pc, #500]	; (800caa4 <_printf_float+0x2b4>)
 800c8ae:	e7d5      	b.n	800c85c <_printf_float+0x6c>
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c8b6:	9104      	str	r1, [sp, #16]
 800c8b8:	1c59      	adds	r1, r3, #1
 800c8ba:	d13c      	bne.n	800c936 <_printf_float+0x146>
 800c8bc:	2306      	movs	r3, #6
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	9303      	str	r3, [sp, #12]
 800c8c4:	ab08      	add	r3, sp, #32
 800c8c6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c8ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8ce:	ab07      	add	r3, sp, #28
 800c8d0:	6861      	ldr	r1, [r4, #4]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	6022      	str	r2, [r4, #0]
 800c8d6:	f10d 031b 	add.w	r3, sp, #27
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7ff fef6 	bl	800c6cc <__cvt>
 800c8e0:	9b04      	ldr	r3, [sp, #16]
 800c8e2:	9907      	ldr	r1, [sp, #28]
 800c8e4:	2b47      	cmp	r3, #71	; 0x47
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	d108      	bne.n	800c8fc <_printf_float+0x10c>
 800c8ea:	1cc8      	adds	r0, r1, #3
 800c8ec:	db02      	blt.n	800c8f4 <_printf_float+0x104>
 800c8ee:	6863      	ldr	r3, [r4, #4]
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	dd41      	ble.n	800c978 <_printf_float+0x188>
 800c8f4:	f1a9 0902 	sub.w	r9, r9, #2
 800c8f8:	fa5f f989 	uxtb.w	r9, r9
 800c8fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c900:	d820      	bhi.n	800c944 <_printf_float+0x154>
 800c902:	3901      	subs	r1, #1
 800c904:	464a      	mov	r2, r9
 800c906:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c90a:	9107      	str	r1, [sp, #28]
 800c90c:	f7ff ff30 	bl	800c770 <__exponent>
 800c910:	9a08      	ldr	r2, [sp, #32]
 800c912:	9004      	str	r0, [sp, #16]
 800c914:	1813      	adds	r3, r2, r0
 800c916:	2a01      	cmp	r2, #1
 800c918:	6123      	str	r3, [r4, #16]
 800c91a:	dc02      	bgt.n	800c922 <_printf_float+0x132>
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	07d2      	lsls	r2, r2, #31
 800c920:	d501      	bpl.n	800c926 <_printf_float+0x136>
 800c922:	3301      	adds	r3, #1
 800c924:	6123      	str	r3, [r4, #16]
 800c926:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0a2      	beq.n	800c874 <_printf_float+0x84>
 800c92e:	232d      	movs	r3, #45	; 0x2d
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c934:	e79e      	b.n	800c874 <_printf_float+0x84>
 800c936:	9904      	ldr	r1, [sp, #16]
 800c938:	2947      	cmp	r1, #71	; 0x47
 800c93a:	d1c1      	bne.n	800c8c0 <_printf_float+0xd0>
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1bf      	bne.n	800c8c0 <_printf_float+0xd0>
 800c940:	2301      	movs	r3, #1
 800c942:	e7bc      	b.n	800c8be <_printf_float+0xce>
 800c944:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c948:	d118      	bne.n	800c97c <_printf_float+0x18c>
 800c94a:	2900      	cmp	r1, #0
 800c94c:	6863      	ldr	r3, [r4, #4]
 800c94e:	dd0b      	ble.n	800c968 <_printf_float+0x178>
 800c950:	6121      	str	r1, [r4, #16]
 800c952:	b913      	cbnz	r3, 800c95a <_printf_float+0x16a>
 800c954:	6822      	ldr	r2, [r4, #0]
 800c956:	07d0      	lsls	r0, r2, #31
 800c958:	d502      	bpl.n	800c960 <_printf_float+0x170>
 800c95a:	3301      	adds	r3, #1
 800c95c:	440b      	add	r3, r1
 800c95e:	6123      	str	r3, [r4, #16]
 800c960:	2300      	movs	r3, #0
 800c962:	65a1      	str	r1, [r4, #88]	; 0x58
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	e7de      	b.n	800c926 <_printf_float+0x136>
 800c968:	b913      	cbnz	r3, 800c970 <_printf_float+0x180>
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	07d2      	lsls	r2, r2, #31
 800c96e:	d501      	bpl.n	800c974 <_printf_float+0x184>
 800c970:	3302      	adds	r3, #2
 800c972:	e7f4      	b.n	800c95e <_printf_float+0x16e>
 800c974:	2301      	movs	r3, #1
 800c976:	e7f2      	b.n	800c95e <_printf_float+0x16e>
 800c978:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c97c:	9b08      	ldr	r3, [sp, #32]
 800c97e:	4299      	cmp	r1, r3
 800c980:	db05      	blt.n	800c98e <_printf_float+0x19e>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	6121      	str	r1, [r4, #16]
 800c986:	07d8      	lsls	r0, r3, #31
 800c988:	d5ea      	bpl.n	800c960 <_printf_float+0x170>
 800c98a:	1c4b      	adds	r3, r1, #1
 800c98c:	e7e7      	b.n	800c95e <_printf_float+0x16e>
 800c98e:	2900      	cmp	r1, #0
 800c990:	bfd4      	ite	le
 800c992:	f1c1 0202 	rsble	r2, r1, #2
 800c996:	2201      	movgt	r2, #1
 800c998:	4413      	add	r3, r2
 800c99a:	e7e0      	b.n	800c95e <_printf_float+0x16e>
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	055a      	lsls	r2, r3, #21
 800c9a0:	d407      	bmi.n	800c9b2 <_printf_float+0x1c2>
 800c9a2:	6923      	ldr	r3, [r4, #16]
 800c9a4:	4642      	mov	r2, r8
 800c9a6:	4631      	mov	r1, r6
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	47b8      	blx	r7
 800c9ac:	3001      	adds	r0, #1
 800c9ae:	d12a      	bne.n	800ca06 <_printf_float+0x216>
 800c9b0:	e76a      	b.n	800c888 <_printf_float+0x98>
 800c9b2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c9b6:	f240 80e0 	bls.w	800cb7a <_printf_float+0x38a>
 800c9ba:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c9be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	d133      	bne.n	800ca30 <_printf_float+0x240>
 800c9c8:	4a37      	ldr	r2, [pc, #220]	; (800caa8 <_printf_float+0x2b8>)
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b8      	blx	r7
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	f43f af58 	beq.w	800c888 <_printf_float+0x98>
 800c9d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	db02      	blt.n	800c9e6 <_printf_float+0x1f6>
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	07d8      	lsls	r0, r3, #31
 800c9e4:	d50f      	bpl.n	800ca06 <_printf_float+0x216>
 800c9e6:	4653      	mov	r3, sl
 800c9e8:	465a      	mov	r2, fp
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b8      	blx	r7
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	f43f af49 	beq.w	800c888 <_printf_float+0x98>
 800c9f6:	f04f 0800 	mov.w	r8, #0
 800c9fa:	f104 091a 	add.w	r9, r4, #26
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	4543      	cmp	r3, r8
 800ca04:	dc09      	bgt.n	800ca1a <_printf_float+0x22a>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	079b      	lsls	r3, r3, #30
 800ca0a:	f100 8106 	bmi.w	800cc1a <_printf_float+0x42a>
 800ca0e:	68e0      	ldr	r0, [r4, #12]
 800ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca12:	4298      	cmp	r0, r3
 800ca14:	bfb8      	it	lt
 800ca16:	4618      	movlt	r0, r3
 800ca18:	e738      	b.n	800c88c <_printf_float+0x9c>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	464a      	mov	r2, r9
 800ca1e:	4631      	mov	r1, r6
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b8      	blx	r7
 800ca24:	3001      	adds	r0, #1
 800ca26:	f43f af2f 	beq.w	800c888 <_printf_float+0x98>
 800ca2a:	f108 0801 	add.w	r8, r8, #1
 800ca2e:	e7e6      	b.n	800c9fe <_printf_float+0x20e>
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	dc3a      	bgt.n	800caac <_printf_float+0x2bc>
 800ca36:	4a1c      	ldr	r2, [pc, #112]	; (800caa8 <_printf_float+0x2b8>)
 800ca38:	2301      	movs	r3, #1
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	47b8      	blx	r7
 800ca40:	3001      	adds	r0, #1
 800ca42:	f43f af21 	beq.w	800c888 <_printf_float+0x98>
 800ca46:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	d102      	bne.n	800ca54 <_printf_float+0x264>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	07d9      	lsls	r1, r3, #31
 800ca52:	d5d8      	bpl.n	800ca06 <_printf_float+0x216>
 800ca54:	4653      	mov	r3, sl
 800ca56:	465a      	mov	r2, fp
 800ca58:	4631      	mov	r1, r6
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	47b8      	blx	r7
 800ca5e:	3001      	adds	r0, #1
 800ca60:	f43f af12 	beq.w	800c888 <_printf_float+0x98>
 800ca64:	f04f 0900 	mov.w	r9, #0
 800ca68:	f104 0a1a 	add.w	sl, r4, #26
 800ca6c:	9b07      	ldr	r3, [sp, #28]
 800ca6e:	425b      	negs	r3, r3
 800ca70:	454b      	cmp	r3, r9
 800ca72:	dc01      	bgt.n	800ca78 <_printf_float+0x288>
 800ca74:	9b08      	ldr	r3, [sp, #32]
 800ca76:	e795      	b.n	800c9a4 <_printf_float+0x1b4>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4628      	mov	r0, r5
 800ca80:	47b8      	blx	r7
 800ca82:	3001      	adds	r0, #1
 800ca84:	f43f af00 	beq.w	800c888 <_printf_float+0x98>
 800ca88:	f109 0901 	add.w	r9, r9, #1
 800ca8c:	e7ee      	b.n	800ca6c <_printf_float+0x27c>
 800ca8e:	bf00      	nop
 800ca90:	ffffffff 	.word	0xffffffff
 800ca94:	7fefffff 	.word	0x7fefffff
 800ca98:	0800f36c 	.word	0x0800f36c
 800ca9c:	0800f370 	.word	0x0800f370
 800caa0:	0800f374 	.word	0x0800f374
 800caa4:	0800f378 	.word	0x0800f378
 800caa8:	0800f37c 	.word	0x0800f37c
 800caac:	9a08      	ldr	r2, [sp, #32]
 800caae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cab0:	429a      	cmp	r2, r3
 800cab2:	bfa8      	it	ge
 800cab4:	461a      	movge	r2, r3
 800cab6:	2a00      	cmp	r2, #0
 800cab8:	4691      	mov	r9, r2
 800caba:	dc38      	bgt.n	800cb2e <_printf_float+0x33e>
 800cabc:	2300      	movs	r3, #0
 800cabe:	9305      	str	r3, [sp, #20]
 800cac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cac4:	f104 021a 	add.w	r2, r4, #26
 800cac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800caca:	9905      	ldr	r1, [sp, #20]
 800cacc:	9304      	str	r3, [sp, #16]
 800cace:	eba3 0309 	sub.w	r3, r3, r9
 800cad2:	428b      	cmp	r3, r1
 800cad4:	dc33      	bgt.n	800cb3e <_printf_float+0x34e>
 800cad6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cada:	429a      	cmp	r2, r3
 800cadc:	db3c      	blt.n	800cb58 <_printf_float+0x368>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	07da      	lsls	r2, r3, #31
 800cae2:	d439      	bmi.n	800cb58 <_printf_float+0x368>
 800cae4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800cae8:	eba2 0903 	sub.w	r9, r2, r3
 800caec:	9b04      	ldr	r3, [sp, #16]
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	4591      	cmp	r9, r2
 800caf2:	bfa8      	it	ge
 800caf4:	4691      	movge	r9, r2
 800caf6:	f1b9 0f00 	cmp.w	r9, #0
 800cafa:	dc35      	bgt.n	800cb68 <_printf_float+0x378>
 800cafc:	f04f 0800 	mov.w	r8, #0
 800cb00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb04:	f104 0a1a 	add.w	sl, r4, #26
 800cb08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb0c:	1a9b      	subs	r3, r3, r2
 800cb0e:	eba3 0309 	sub.w	r3, r3, r9
 800cb12:	4543      	cmp	r3, r8
 800cb14:	f77f af77 	ble.w	800ca06 <_printf_float+0x216>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4652      	mov	r2, sl
 800cb1c:	4631      	mov	r1, r6
 800cb1e:	4628      	mov	r0, r5
 800cb20:	47b8      	blx	r7
 800cb22:	3001      	adds	r0, #1
 800cb24:	f43f aeb0 	beq.w	800c888 <_printf_float+0x98>
 800cb28:	f108 0801 	add.w	r8, r8, #1
 800cb2c:	e7ec      	b.n	800cb08 <_printf_float+0x318>
 800cb2e:	4613      	mov	r3, r2
 800cb30:	4631      	mov	r1, r6
 800cb32:	4642      	mov	r2, r8
 800cb34:	4628      	mov	r0, r5
 800cb36:	47b8      	blx	r7
 800cb38:	3001      	adds	r0, #1
 800cb3a:	d1bf      	bne.n	800cabc <_printf_float+0x2cc>
 800cb3c:	e6a4      	b.n	800c888 <_printf_float+0x98>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	4631      	mov	r1, r6
 800cb42:	4628      	mov	r0, r5
 800cb44:	9204      	str	r2, [sp, #16]
 800cb46:	47b8      	blx	r7
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f43f ae9d 	beq.w	800c888 <_printf_float+0x98>
 800cb4e:	9b05      	ldr	r3, [sp, #20]
 800cb50:	9a04      	ldr	r2, [sp, #16]
 800cb52:	3301      	adds	r3, #1
 800cb54:	9305      	str	r3, [sp, #20]
 800cb56:	e7b7      	b.n	800cac8 <_printf_float+0x2d8>
 800cb58:	4653      	mov	r3, sl
 800cb5a:	465a      	mov	r2, fp
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4628      	mov	r0, r5
 800cb60:	47b8      	blx	r7
 800cb62:	3001      	adds	r0, #1
 800cb64:	d1be      	bne.n	800cae4 <_printf_float+0x2f4>
 800cb66:	e68f      	b.n	800c888 <_printf_float+0x98>
 800cb68:	9a04      	ldr	r2, [sp, #16]
 800cb6a:	464b      	mov	r3, r9
 800cb6c:	4442      	add	r2, r8
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4628      	mov	r0, r5
 800cb72:	47b8      	blx	r7
 800cb74:	3001      	adds	r0, #1
 800cb76:	d1c1      	bne.n	800cafc <_printf_float+0x30c>
 800cb78:	e686      	b.n	800c888 <_printf_float+0x98>
 800cb7a:	9a08      	ldr	r2, [sp, #32]
 800cb7c:	2a01      	cmp	r2, #1
 800cb7e:	dc01      	bgt.n	800cb84 <_printf_float+0x394>
 800cb80:	07db      	lsls	r3, r3, #31
 800cb82:	d537      	bpl.n	800cbf4 <_printf_float+0x404>
 800cb84:	2301      	movs	r3, #1
 800cb86:	4642      	mov	r2, r8
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	47b8      	blx	r7
 800cb8e:	3001      	adds	r0, #1
 800cb90:	f43f ae7a 	beq.w	800c888 <_printf_float+0x98>
 800cb94:	4653      	mov	r3, sl
 800cb96:	465a      	mov	r2, fp
 800cb98:	4631      	mov	r1, r6
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	47b8      	blx	r7
 800cb9e:	3001      	adds	r0, #1
 800cba0:	f43f ae72 	beq.w	800c888 <_printf_float+0x98>
 800cba4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cba8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	9b08      	ldr	r3, [sp, #32]
 800cbb2:	d01a      	beq.n	800cbea <_printf_float+0x3fa>
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	f108 0201 	add.w	r2, r8, #1
 800cbba:	4631      	mov	r1, r6
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	47b8      	blx	r7
 800cbc0:	3001      	adds	r0, #1
 800cbc2:	d10e      	bne.n	800cbe2 <_printf_float+0x3f2>
 800cbc4:	e660      	b.n	800c888 <_printf_float+0x98>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	464a      	mov	r2, r9
 800cbca:	4631      	mov	r1, r6
 800cbcc:	4628      	mov	r0, r5
 800cbce:	47b8      	blx	r7
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	f43f ae59 	beq.w	800c888 <_printf_float+0x98>
 800cbd6:	f108 0801 	add.w	r8, r8, #1
 800cbda:	9b08      	ldr	r3, [sp, #32]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	4543      	cmp	r3, r8
 800cbe0:	dcf1      	bgt.n	800cbc6 <_printf_float+0x3d6>
 800cbe2:	9b04      	ldr	r3, [sp, #16]
 800cbe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbe8:	e6dd      	b.n	800c9a6 <_printf_float+0x1b6>
 800cbea:	f04f 0800 	mov.w	r8, #0
 800cbee:	f104 091a 	add.w	r9, r4, #26
 800cbf2:	e7f2      	b.n	800cbda <_printf_float+0x3ea>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	4642      	mov	r2, r8
 800cbf8:	e7df      	b.n	800cbba <_printf_float+0x3ca>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	464a      	mov	r2, r9
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4628      	mov	r0, r5
 800cc02:	47b8      	blx	r7
 800cc04:	3001      	adds	r0, #1
 800cc06:	f43f ae3f 	beq.w	800c888 <_printf_float+0x98>
 800cc0a:	f108 0801 	add.w	r8, r8, #1
 800cc0e:	68e3      	ldr	r3, [r4, #12]
 800cc10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc12:	1a5b      	subs	r3, r3, r1
 800cc14:	4543      	cmp	r3, r8
 800cc16:	dcf0      	bgt.n	800cbfa <_printf_float+0x40a>
 800cc18:	e6f9      	b.n	800ca0e <_printf_float+0x21e>
 800cc1a:	f04f 0800 	mov.w	r8, #0
 800cc1e:	f104 0919 	add.w	r9, r4, #25
 800cc22:	e7f4      	b.n	800cc0e <_printf_float+0x41e>

0800cc24 <_printf_common>:
 800cc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc28:	4616      	mov	r6, r2
 800cc2a:	4699      	mov	r9, r3
 800cc2c:	688a      	ldr	r2, [r1, #8]
 800cc2e:	690b      	ldr	r3, [r1, #16]
 800cc30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc34:	4293      	cmp	r3, r2
 800cc36:	bfb8      	it	lt
 800cc38:	4613      	movlt	r3, r2
 800cc3a:	6033      	str	r3, [r6, #0]
 800cc3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc40:	4607      	mov	r7, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	b10a      	cbz	r2, 800cc4a <_printf_common+0x26>
 800cc46:	3301      	adds	r3, #1
 800cc48:	6033      	str	r3, [r6, #0]
 800cc4a:	6823      	ldr	r3, [r4, #0]
 800cc4c:	0699      	lsls	r1, r3, #26
 800cc4e:	bf42      	ittt	mi
 800cc50:	6833      	ldrmi	r3, [r6, #0]
 800cc52:	3302      	addmi	r3, #2
 800cc54:	6033      	strmi	r3, [r6, #0]
 800cc56:	6825      	ldr	r5, [r4, #0]
 800cc58:	f015 0506 	ands.w	r5, r5, #6
 800cc5c:	d106      	bne.n	800cc6c <_printf_common+0x48>
 800cc5e:	f104 0a19 	add.w	sl, r4, #25
 800cc62:	68e3      	ldr	r3, [r4, #12]
 800cc64:	6832      	ldr	r2, [r6, #0]
 800cc66:	1a9b      	subs	r3, r3, r2
 800cc68:	42ab      	cmp	r3, r5
 800cc6a:	dc26      	bgt.n	800ccba <_printf_common+0x96>
 800cc6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc70:	1e13      	subs	r3, r2, #0
 800cc72:	6822      	ldr	r2, [r4, #0]
 800cc74:	bf18      	it	ne
 800cc76:	2301      	movne	r3, #1
 800cc78:	0692      	lsls	r2, r2, #26
 800cc7a:	d42b      	bmi.n	800ccd4 <_printf_common+0xb0>
 800cc7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc80:	4649      	mov	r1, r9
 800cc82:	4638      	mov	r0, r7
 800cc84:	47c0      	blx	r8
 800cc86:	3001      	adds	r0, #1
 800cc88:	d01e      	beq.n	800ccc8 <_printf_common+0xa4>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	6922      	ldr	r2, [r4, #16]
 800cc8e:	f003 0306 	and.w	r3, r3, #6
 800cc92:	2b04      	cmp	r3, #4
 800cc94:	bf02      	ittt	eq
 800cc96:	68e5      	ldreq	r5, [r4, #12]
 800cc98:	6833      	ldreq	r3, [r6, #0]
 800cc9a:	1aed      	subeq	r5, r5, r3
 800cc9c:	68a3      	ldr	r3, [r4, #8]
 800cc9e:	bf0c      	ite	eq
 800cca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cca4:	2500      	movne	r5, #0
 800cca6:	4293      	cmp	r3, r2
 800cca8:	bfc4      	itt	gt
 800ccaa:	1a9b      	subgt	r3, r3, r2
 800ccac:	18ed      	addgt	r5, r5, r3
 800ccae:	2600      	movs	r6, #0
 800ccb0:	341a      	adds	r4, #26
 800ccb2:	42b5      	cmp	r5, r6
 800ccb4:	d11a      	bne.n	800ccec <_printf_common+0xc8>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e008      	b.n	800cccc <_printf_common+0xa8>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	4652      	mov	r2, sl
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4638      	mov	r0, r7
 800ccc2:	47c0      	blx	r8
 800ccc4:	3001      	adds	r0, #1
 800ccc6:	d103      	bne.n	800ccd0 <_printf_common+0xac>
 800ccc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd0:	3501      	adds	r5, #1
 800ccd2:	e7c6      	b.n	800cc62 <_printf_common+0x3e>
 800ccd4:	18e1      	adds	r1, r4, r3
 800ccd6:	1c5a      	adds	r2, r3, #1
 800ccd8:	2030      	movs	r0, #48	; 0x30
 800ccda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccde:	4422      	add	r2, r4
 800cce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cce8:	3302      	adds	r3, #2
 800ccea:	e7c7      	b.n	800cc7c <_printf_common+0x58>
 800ccec:	2301      	movs	r3, #1
 800ccee:	4622      	mov	r2, r4
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	47c0      	blx	r8
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d0e6      	beq.n	800ccc8 <_printf_common+0xa4>
 800ccfa:	3601      	adds	r6, #1
 800ccfc:	e7d9      	b.n	800ccb2 <_printf_common+0x8e>
	...

0800cd00 <_printf_i>:
 800cd00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd04:	7e0f      	ldrb	r7, [r1, #24]
 800cd06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd08:	2f78      	cmp	r7, #120	; 0x78
 800cd0a:	4691      	mov	r9, r2
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	460c      	mov	r4, r1
 800cd10:	469a      	mov	sl, r3
 800cd12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd16:	d807      	bhi.n	800cd28 <_printf_i+0x28>
 800cd18:	2f62      	cmp	r7, #98	; 0x62
 800cd1a:	d80a      	bhi.n	800cd32 <_printf_i+0x32>
 800cd1c:	2f00      	cmp	r7, #0
 800cd1e:	f000 80d4 	beq.w	800ceca <_printf_i+0x1ca>
 800cd22:	2f58      	cmp	r7, #88	; 0x58
 800cd24:	f000 80c0 	beq.w	800cea8 <_printf_i+0x1a8>
 800cd28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd30:	e03a      	b.n	800cda8 <_printf_i+0xa8>
 800cd32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd36:	2b15      	cmp	r3, #21
 800cd38:	d8f6      	bhi.n	800cd28 <_printf_i+0x28>
 800cd3a:	a101      	add	r1, pc, #4	; (adr r1, 800cd40 <_printf_i+0x40>)
 800cd3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd40:	0800cd99 	.word	0x0800cd99
 800cd44:	0800cdad 	.word	0x0800cdad
 800cd48:	0800cd29 	.word	0x0800cd29
 800cd4c:	0800cd29 	.word	0x0800cd29
 800cd50:	0800cd29 	.word	0x0800cd29
 800cd54:	0800cd29 	.word	0x0800cd29
 800cd58:	0800cdad 	.word	0x0800cdad
 800cd5c:	0800cd29 	.word	0x0800cd29
 800cd60:	0800cd29 	.word	0x0800cd29
 800cd64:	0800cd29 	.word	0x0800cd29
 800cd68:	0800cd29 	.word	0x0800cd29
 800cd6c:	0800ceb1 	.word	0x0800ceb1
 800cd70:	0800cdd9 	.word	0x0800cdd9
 800cd74:	0800ce6b 	.word	0x0800ce6b
 800cd78:	0800cd29 	.word	0x0800cd29
 800cd7c:	0800cd29 	.word	0x0800cd29
 800cd80:	0800ced3 	.word	0x0800ced3
 800cd84:	0800cd29 	.word	0x0800cd29
 800cd88:	0800cdd9 	.word	0x0800cdd9
 800cd8c:	0800cd29 	.word	0x0800cd29
 800cd90:	0800cd29 	.word	0x0800cd29
 800cd94:	0800ce73 	.word	0x0800ce73
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	1d1a      	adds	r2, r3, #4
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	602a      	str	r2, [r5, #0]
 800cda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cda4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cda8:	2301      	movs	r3, #1
 800cdaa:	e09f      	b.n	800ceec <_printf_i+0x1ec>
 800cdac:	6820      	ldr	r0, [r4, #0]
 800cdae:	682b      	ldr	r3, [r5, #0]
 800cdb0:	0607      	lsls	r7, r0, #24
 800cdb2:	f103 0104 	add.w	r1, r3, #4
 800cdb6:	6029      	str	r1, [r5, #0]
 800cdb8:	d501      	bpl.n	800cdbe <_printf_i+0xbe>
 800cdba:	681e      	ldr	r6, [r3, #0]
 800cdbc:	e003      	b.n	800cdc6 <_printf_i+0xc6>
 800cdbe:	0646      	lsls	r6, r0, #25
 800cdc0:	d5fb      	bpl.n	800cdba <_printf_i+0xba>
 800cdc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdc6:	2e00      	cmp	r6, #0
 800cdc8:	da03      	bge.n	800cdd2 <_printf_i+0xd2>
 800cdca:	232d      	movs	r3, #45	; 0x2d
 800cdcc:	4276      	negs	r6, r6
 800cdce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd2:	485a      	ldr	r0, [pc, #360]	; (800cf3c <_printf_i+0x23c>)
 800cdd4:	230a      	movs	r3, #10
 800cdd6:	e012      	b.n	800cdfe <_printf_i+0xfe>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	1d19      	adds	r1, r3, #4
 800cdde:	6029      	str	r1, [r5, #0]
 800cde0:	0605      	lsls	r5, r0, #24
 800cde2:	d501      	bpl.n	800cde8 <_printf_i+0xe8>
 800cde4:	681e      	ldr	r6, [r3, #0]
 800cde6:	e002      	b.n	800cdee <_printf_i+0xee>
 800cde8:	0641      	lsls	r1, r0, #25
 800cdea:	d5fb      	bpl.n	800cde4 <_printf_i+0xe4>
 800cdec:	881e      	ldrh	r6, [r3, #0]
 800cdee:	4853      	ldr	r0, [pc, #332]	; (800cf3c <_printf_i+0x23c>)
 800cdf0:	2f6f      	cmp	r7, #111	; 0x6f
 800cdf2:	bf0c      	ite	eq
 800cdf4:	2308      	moveq	r3, #8
 800cdf6:	230a      	movne	r3, #10
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdfe:	6865      	ldr	r5, [r4, #4]
 800ce00:	60a5      	str	r5, [r4, #8]
 800ce02:	2d00      	cmp	r5, #0
 800ce04:	bfa2      	ittt	ge
 800ce06:	6821      	ldrge	r1, [r4, #0]
 800ce08:	f021 0104 	bicge.w	r1, r1, #4
 800ce0c:	6021      	strge	r1, [r4, #0]
 800ce0e:	b90e      	cbnz	r6, 800ce14 <_printf_i+0x114>
 800ce10:	2d00      	cmp	r5, #0
 800ce12:	d04b      	beq.n	800ceac <_printf_i+0x1ac>
 800ce14:	4615      	mov	r5, r2
 800ce16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ce1e:	5dc7      	ldrb	r7, [r0, r7]
 800ce20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce24:	4637      	mov	r7, r6
 800ce26:	42bb      	cmp	r3, r7
 800ce28:	460e      	mov	r6, r1
 800ce2a:	d9f4      	bls.n	800ce16 <_printf_i+0x116>
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d10b      	bne.n	800ce48 <_printf_i+0x148>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	07de      	lsls	r6, r3, #31
 800ce34:	d508      	bpl.n	800ce48 <_printf_i+0x148>
 800ce36:	6923      	ldr	r3, [r4, #16]
 800ce38:	6861      	ldr	r1, [r4, #4]
 800ce3a:	4299      	cmp	r1, r3
 800ce3c:	bfde      	ittt	le
 800ce3e:	2330      	movle	r3, #48	; 0x30
 800ce40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce48:	1b52      	subs	r2, r2, r5
 800ce4a:	6122      	str	r2, [r4, #16]
 800ce4c:	f8cd a000 	str.w	sl, [sp]
 800ce50:	464b      	mov	r3, r9
 800ce52:	aa03      	add	r2, sp, #12
 800ce54:	4621      	mov	r1, r4
 800ce56:	4640      	mov	r0, r8
 800ce58:	f7ff fee4 	bl	800cc24 <_printf_common>
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d14a      	bne.n	800cef6 <_printf_i+0x1f6>
 800ce60:	f04f 30ff 	mov.w	r0, #4294967295
 800ce64:	b004      	add	sp, #16
 800ce66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6a:	6823      	ldr	r3, [r4, #0]
 800ce6c:	f043 0320 	orr.w	r3, r3, #32
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	4833      	ldr	r0, [pc, #204]	; (800cf40 <_printf_i+0x240>)
 800ce74:	2778      	movs	r7, #120	; 0x78
 800ce76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce7a:	6823      	ldr	r3, [r4, #0]
 800ce7c:	6829      	ldr	r1, [r5, #0]
 800ce7e:	061f      	lsls	r7, r3, #24
 800ce80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce84:	d402      	bmi.n	800ce8c <_printf_i+0x18c>
 800ce86:	065f      	lsls	r7, r3, #25
 800ce88:	bf48      	it	mi
 800ce8a:	b2b6      	uxthmi	r6, r6
 800ce8c:	07df      	lsls	r7, r3, #31
 800ce8e:	bf48      	it	mi
 800ce90:	f043 0320 	orrmi.w	r3, r3, #32
 800ce94:	6029      	str	r1, [r5, #0]
 800ce96:	bf48      	it	mi
 800ce98:	6023      	strmi	r3, [r4, #0]
 800ce9a:	b91e      	cbnz	r6, 800cea4 <_printf_i+0x1a4>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	f023 0320 	bic.w	r3, r3, #32
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	2310      	movs	r3, #16
 800cea6:	e7a7      	b.n	800cdf8 <_printf_i+0xf8>
 800cea8:	4824      	ldr	r0, [pc, #144]	; (800cf3c <_printf_i+0x23c>)
 800ceaa:	e7e4      	b.n	800ce76 <_printf_i+0x176>
 800ceac:	4615      	mov	r5, r2
 800ceae:	e7bd      	b.n	800ce2c <_printf_i+0x12c>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	6826      	ldr	r6, [r4, #0]
 800ceb4:	6961      	ldr	r1, [r4, #20]
 800ceb6:	1d18      	adds	r0, r3, #4
 800ceb8:	6028      	str	r0, [r5, #0]
 800ceba:	0635      	lsls	r5, r6, #24
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	d501      	bpl.n	800cec4 <_printf_i+0x1c4>
 800cec0:	6019      	str	r1, [r3, #0]
 800cec2:	e002      	b.n	800ceca <_printf_i+0x1ca>
 800cec4:	0670      	lsls	r0, r6, #25
 800cec6:	d5fb      	bpl.n	800cec0 <_printf_i+0x1c0>
 800cec8:	8019      	strh	r1, [r3, #0]
 800ceca:	2300      	movs	r3, #0
 800cecc:	6123      	str	r3, [r4, #16]
 800cece:	4615      	mov	r5, r2
 800ced0:	e7bc      	b.n	800ce4c <_printf_i+0x14c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	1d1a      	adds	r2, r3, #4
 800ced6:	602a      	str	r2, [r5, #0]
 800ced8:	681d      	ldr	r5, [r3, #0]
 800ceda:	6862      	ldr	r2, [r4, #4]
 800cedc:	2100      	movs	r1, #0
 800cede:	4628      	mov	r0, r5
 800cee0:	f7f3 fa16 	bl	8000310 <memchr>
 800cee4:	b108      	cbz	r0, 800ceea <_printf_i+0x1ea>
 800cee6:	1b40      	subs	r0, r0, r5
 800cee8:	6060      	str	r0, [r4, #4]
 800ceea:	6863      	ldr	r3, [r4, #4]
 800ceec:	6123      	str	r3, [r4, #16]
 800ceee:	2300      	movs	r3, #0
 800cef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cef4:	e7aa      	b.n	800ce4c <_printf_i+0x14c>
 800cef6:	6923      	ldr	r3, [r4, #16]
 800cef8:	462a      	mov	r2, r5
 800cefa:	4649      	mov	r1, r9
 800cefc:	4640      	mov	r0, r8
 800cefe:	47d0      	blx	sl
 800cf00:	3001      	adds	r0, #1
 800cf02:	d0ad      	beq.n	800ce60 <_printf_i+0x160>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	079b      	lsls	r3, r3, #30
 800cf08:	d413      	bmi.n	800cf32 <_printf_i+0x232>
 800cf0a:	68e0      	ldr	r0, [r4, #12]
 800cf0c:	9b03      	ldr	r3, [sp, #12]
 800cf0e:	4298      	cmp	r0, r3
 800cf10:	bfb8      	it	lt
 800cf12:	4618      	movlt	r0, r3
 800cf14:	e7a6      	b.n	800ce64 <_printf_i+0x164>
 800cf16:	2301      	movs	r3, #1
 800cf18:	4632      	mov	r2, r6
 800cf1a:	4649      	mov	r1, r9
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	47d0      	blx	sl
 800cf20:	3001      	adds	r0, #1
 800cf22:	d09d      	beq.n	800ce60 <_printf_i+0x160>
 800cf24:	3501      	adds	r5, #1
 800cf26:	68e3      	ldr	r3, [r4, #12]
 800cf28:	9903      	ldr	r1, [sp, #12]
 800cf2a:	1a5b      	subs	r3, r3, r1
 800cf2c:	42ab      	cmp	r3, r5
 800cf2e:	dcf2      	bgt.n	800cf16 <_printf_i+0x216>
 800cf30:	e7eb      	b.n	800cf0a <_printf_i+0x20a>
 800cf32:	2500      	movs	r5, #0
 800cf34:	f104 0619 	add.w	r6, r4, #25
 800cf38:	e7f5      	b.n	800cf26 <_printf_i+0x226>
 800cf3a:	bf00      	nop
 800cf3c:	0800f37e 	.word	0x0800f37e
 800cf40:	0800f38f 	.word	0x0800f38f

0800cf44 <std>:
 800cf44:	2300      	movs	r3, #0
 800cf46:	b510      	push	{r4, lr}
 800cf48:	4604      	mov	r4, r0
 800cf4a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf52:	6083      	str	r3, [r0, #8]
 800cf54:	8181      	strh	r1, [r0, #12]
 800cf56:	6643      	str	r3, [r0, #100]	; 0x64
 800cf58:	81c2      	strh	r2, [r0, #14]
 800cf5a:	6183      	str	r3, [r0, #24]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	2208      	movs	r2, #8
 800cf60:	305c      	adds	r0, #92	; 0x5c
 800cf62:	f000 f914 	bl	800d18e <memset>
 800cf66:	4b0d      	ldr	r3, [pc, #52]	; (800cf9c <std+0x58>)
 800cf68:	6263      	str	r3, [r4, #36]	; 0x24
 800cf6a:	4b0d      	ldr	r3, [pc, #52]	; (800cfa0 <std+0x5c>)
 800cf6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf6e:	4b0d      	ldr	r3, [pc, #52]	; (800cfa4 <std+0x60>)
 800cf70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf72:	4b0d      	ldr	r3, [pc, #52]	; (800cfa8 <std+0x64>)
 800cf74:	6323      	str	r3, [r4, #48]	; 0x30
 800cf76:	4b0d      	ldr	r3, [pc, #52]	; (800cfac <std+0x68>)
 800cf78:	6224      	str	r4, [r4, #32]
 800cf7a:	429c      	cmp	r4, r3
 800cf7c:	d006      	beq.n	800cf8c <std+0x48>
 800cf7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf82:	4294      	cmp	r4, r2
 800cf84:	d002      	beq.n	800cf8c <std+0x48>
 800cf86:	33d0      	adds	r3, #208	; 0xd0
 800cf88:	429c      	cmp	r4, r3
 800cf8a:	d105      	bne.n	800cf98 <std+0x54>
 800cf8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf94:	f000 b978 	b.w	800d288 <__retarget_lock_init_recursive>
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0800d109 	.word	0x0800d109
 800cfa0:	0800d12b 	.word	0x0800d12b
 800cfa4:	0800d163 	.word	0x0800d163
 800cfa8:	0800d187 	.word	0x0800d187
 800cfac:	240005c0 	.word	0x240005c0

0800cfb0 <stdio_exit_handler>:
 800cfb0:	4a02      	ldr	r2, [pc, #8]	; (800cfbc <stdio_exit_handler+0xc>)
 800cfb2:	4903      	ldr	r1, [pc, #12]	; (800cfc0 <stdio_exit_handler+0x10>)
 800cfb4:	4803      	ldr	r0, [pc, #12]	; (800cfc4 <stdio_exit_handler+0x14>)
 800cfb6:	f000 b869 	b.w	800d08c <_fwalk_sglue>
 800cfba:	bf00      	nop
 800cfbc:	24000010 	.word	0x24000010
 800cfc0:	0800eb4d 	.word	0x0800eb4d
 800cfc4:	2400001c 	.word	0x2400001c

0800cfc8 <cleanup_stdio>:
 800cfc8:	6841      	ldr	r1, [r0, #4]
 800cfca:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <cleanup_stdio+0x34>)
 800cfcc:	4299      	cmp	r1, r3
 800cfce:	b510      	push	{r4, lr}
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	d001      	beq.n	800cfd8 <cleanup_stdio+0x10>
 800cfd4:	f001 fdba 	bl	800eb4c <_fflush_r>
 800cfd8:	68a1      	ldr	r1, [r4, #8]
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <cleanup_stdio+0x38>)
 800cfdc:	4299      	cmp	r1, r3
 800cfde:	d002      	beq.n	800cfe6 <cleanup_stdio+0x1e>
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 fdb3 	bl	800eb4c <_fflush_r>
 800cfe6:	68e1      	ldr	r1, [r4, #12]
 800cfe8:	4b06      	ldr	r3, [pc, #24]	; (800d004 <cleanup_stdio+0x3c>)
 800cfea:	4299      	cmp	r1, r3
 800cfec:	d004      	beq.n	800cff8 <cleanup_stdio+0x30>
 800cfee:	4620      	mov	r0, r4
 800cff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff4:	f001 bdaa 	b.w	800eb4c <_fflush_r>
 800cff8:	bd10      	pop	{r4, pc}
 800cffa:	bf00      	nop
 800cffc:	240005c0 	.word	0x240005c0
 800d000:	24000628 	.word	0x24000628
 800d004:	24000690 	.word	0x24000690

0800d008 <global_stdio_init.part.0>:
 800d008:	b510      	push	{r4, lr}
 800d00a:	4b0b      	ldr	r3, [pc, #44]	; (800d038 <global_stdio_init.part.0+0x30>)
 800d00c:	4c0b      	ldr	r4, [pc, #44]	; (800d03c <global_stdio_init.part.0+0x34>)
 800d00e:	4a0c      	ldr	r2, [pc, #48]	; (800d040 <global_stdio_init.part.0+0x38>)
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	4620      	mov	r0, r4
 800d014:	2200      	movs	r2, #0
 800d016:	2104      	movs	r1, #4
 800d018:	f7ff ff94 	bl	800cf44 <std>
 800d01c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d020:	2201      	movs	r2, #1
 800d022:	2109      	movs	r1, #9
 800d024:	f7ff ff8e 	bl	800cf44 <std>
 800d028:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d02c:	2202      	movs	r2, #2
 800d02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d032:	2112      	movs	r1, #18
 800d034:	f7ff bf86 	b.w	800cf44 <std>
 800d038:	240006f8 	.word	0x240006f8
 800d03c:	240005c0 	.word	0x240005c0
 800d040:	0800cfb1 	.word	0x0800cfb1

0800d044 <__sfp_lock_acquire>:
 800d044:	4801      	ldr	r0, [pc, #4]	; (800d04c <__sfp_lock_acquire+0x8>)
 800d046:	f000 b920 	b.w	800d28a <__retarget_lock_acquire_recursive>
 800d04a:	bf00      	nop
 800d04c:	24000701 	.word	0x24000701

0800d050 <__sfp_lock_release>:
 800d050:	4801      	ldr	r0, [pc, #4]	; (800d058 <__sfp_lock_release+0x8>)
 800d052:	f000 b91b 	b.w	800d28c <__retarget_lock_release_recursive>
 800d056:	bf00      	nop
 800d058:	24000701 	.word	0x24000701

0800d05c <__sinit>:
 800d05c:	b510      	push	{r4, lr}
 800d05e:	4604      	mov	r4, r0
 800d060:	f7ff fff0 	bl	800d044 <__sfp_lock_acquire>
 800d064:	6a23      	ldr	r3, [r4, #32]
 800d066:	b11b      	cbz	r3, 800d070 <__sinit+0x14>
 800d068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d06c:	f7ff bff0 	b.w	800d050 <__sfp_lock_release>
 800d070:	4b04      	ldr	r3, [pc, #16]	; (800d084 <__sinit+0x28>)
 800d072:	6223      	str	r3, [r4, #32]
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <__sinit+0x2c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f5      	bne.n	800d068 <__sinit+0xc>
 800d07c:	f7ff ffc4 	bl	800d008 <global_stdio_init.part.0>
 800d080:	e7f2      	b.n	800d068 <__sinit+0xc>
 800d082:	bf00      	nop
 800d084:	0800cfc9 	.word	0x0800cfc9
 800d088:	240006f8 	.word	0x240006f8

0800d08c <_fwalk_sglue>:
 800d08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d090:	4607      	mov	r7, r0
 800d092:	4688      	mov	r8, r1
 800d094:	4614      	mov	r4, r2
 800d096:	2600      	movs	r6, #0
 800d098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d09c:	f1b9 0901 	subs.w	r9, r9, #1
 800d0a0:	d505      	bpl.n	800d0ae <_fwalk_sglue+0x22>
 800d0a2:	6824      	ldr	r4, [r4, #0]
 800d0a4:	2c00      	cmp	r4, #0
 800d0a6:	d1f7      	bne.n	800d098 <_fwalk_sglue+0xc>
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d907      	bls.n	800d0c4 <_fwalk_sglue+0x38>
 800d0b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	d003      	beq.n	800d0c4 <_fwalk_sglue+0x38>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4638      	mov	r0, r7
 800d0c0:	47c0      	blx	r8
 800d0c2:	4306      	orrs	r6, r0
 800d0c4:	3568      	adds	r5, #104	; 0x68
 800d0c6:	e7e9      	b.n	800d09c <_fwalk_sglue+0x10>

0800d0c8 <siprintf>:
 800d0c8:	b40e      	push	{r1, r2, r3}
 800d0ca:	b500      	push	{lr}
 800d0cc:	b09c      	sub	sp, #112	; 0x70
 800d0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d0d0:	9002      	str	r0, [sp, #8]
 800d0d2:	9006      	str	r0, [sp, #24]
 800d0d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0d8:	4809      	ldr	r0, [pc, #36]	; (800d100 <siprintf+0x38>)
 800d0da:	9107      	str	r1, [sp, #28]
 800d0dc:	9104      	str	r1, [sp, #16]
 800d0de:	4909      	ldr	r1, [pc, #36]	; (800d104 <siprintf+0x3c>)
 800d0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e4:	9105      	str	r1, [sp, #20]
 800d0e6:	6800      	ldr	r0, [r0, #0]
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	a902      	add	r1, sp, #8
 800d0ec:	f001 fbaa 	bl	800e844 <_svfiprintf_r>
 800d0f0:	9b02      	ldr	r3, [sp, #8]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	701a      	strb	r2, [r3, #0]
 800d0f6:	b01c      	add	sp, #112	; 0x70
 800d0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0fc:	b003      	add	sp, #12
 800d0fe:	4770      	bx	lr
 800d100:	24000068 	.word	0x24000068
 800d104:	ffff0208 	.word	0xffff0208

0800d108 <__sread>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	460c      	mov	r4, r1
 800d10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d110:	f000 f86c 	bl	800d1ec <_read_r>
 800d114:	2800      	cmp	r0, #0
 800d116:	bfab      	itete	ge
 800d118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d11a:	89a3      	ldrhlt	r3, [r4, #12]
 800d11c:	181b      	addge	r3, r3, r0
 800d11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d122:	bfac      	ite	ge
 800d124:	6563      	strge	r3, [r4, #84]	; 0x54
 800d126:	81a3      	strhlt	r3, [r4, #12]
 800d128:	bd10      	pop	{r4, pc}

0800d12a <__swrite>:
 800d12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12e:	461f      	mov	r7, r3
 800d130:	898b      	ldrh	r3, [r1, #12]
 800d132:	05db      	lsls	r3, r3, #23
 800d134:	4605      	mov	r5, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4616      	mov	r6, r2
 800d13a:	d505      	bpl.n	800d148 <__swrite+0x1e>
 800d13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d140:	2302      	movs	r3, #2
 800d142:	2200      	movs	r2, #0
 800d144:	f000 f840 	bl	800d1c8 <_lseek_r>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d15e:	f000 b857 	b.w	800d210 <_write_r>

0800d162 <__sseek>:
 800d162:	b510      	push	{r4, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16a:	f000 f82d 	bl	800d1c8 <_lseek_r>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	bf15      	itete	ne
 800d174:	6560      	strne	r0, [r4, #84]	; 0x54
 800d176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d17e:	81a3      	strheq	r3, [r4, #12]
 800d180:	bf18      	it	ne
 800d182:	81a3      	strhne	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__sclose>:
 800d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18a:	f000 b80d 	b.w	800d1a8 <_close_r>

0800d18e <memset>:
 800d18e:	4402      	add	r2, r0
 800d190:	4603      	mov	r3, r0
 800d192:	4293      	cmp	r3, r2
 800d194:	d100      	bne.n	800d198 <memset+0xa>
 800d196:	4770      	bx	lr
 800d198:	f803 1b01 	strb.w	r1, [r3], #1
 800d19c:	e7f9      	b.n	800d192 <memset+0x4>
	...

0800d1a0 <_localeconv_r>:
 800d1a0:	4800      	ldr	r0, [pc, #0]	; (800d1a4 <_localeconv_r+0x4>)
 800d1a2:	4770      	bx	lr
 800d1a4:	2400015c 	.word	0x2400015c

0800d1a8 <_close_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d06      	ldr	r5, [pc, #24]	; (800d1c4 <_close_r+0x1c>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	4608      	mov	r0, r1
 800d1b2:	602b      	str	r3, [r5, #0]
 800d1b4:	f7f4 faab 	bl	800170e <_close>
 800d1b8:	1c43      	adds	r3, r0, #1
 800d1ba:	d102      	bne.n	800d1c2 <_close_r+0x1a>
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	b103      	cbz	r3, 800d1c2 <_close_r+0x1a>
 800d1c0:	6023      	str	r3, [r4, #0]
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}
 800d1c4:	240006fc 	.word	0x240006fc

0800d1c8 <_lseek_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d07      	ldr	r5, [pc, #28]	; (800d1e8 <_lseek_r+0x20>)
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	602a      	str	r2, [r5, #0]
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f7f4 fac0 	bl	800175c <_lseek>
 800d1dc:	1c43      	adds	r3, r0, #1
 800d1de:	d102      	bne.n	800d1e6 <_lseek_r+0x1e>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	b103      	cbz	r3, 800d1e6 <_lseek_r+0x1e>
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	bd38      	pop	{r3, r4, r5, pc}
 800d1e8:	240006fc 	.word	0x240006fc

0800d1ec <_read_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	; (800d20c <_read_r+0x20>)
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f4 fa4e 	bl	800169c <_read>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_read_r+0x1e>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_read_r+0x1e>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	240006fc 	.word	0x240006fc

0800d210 <_write_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_write_r+0x20>)
 800d214:	4604      	mov	r4, r0
 800d216:	4608      	mov	r0, r1
 800d218:	4611      	mov	r1, r2
 800d21a:	2200      	movs	r2, #0
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f4 fa59 	bl	80016d6 <_write>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_write_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_write_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	240006fc 	.word	0x240006fc

0800d234 <__errno>:
 800d234:	4b01      	ldr	r3, [pc, #4]	; (800d23c <__errno+0x8>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	24000068 	.word	0x24000068

0800d240 <__libc_init_array>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	4d0d      	ldr	r5, [pc, #52]	; (800d278 <__libc_init_array+0x38>)
 800d244:	4c0d      	ldr	r4, [pc, #52]	; (800d27c <__libc_init_array+0x3c>)
 800d246:	1b64      	subs	r4, r4, r5
 800d248:	10a4      	asrs	r4, r4, #2
 800d24a:	2600      	movs	r6, #0
 800d24c:	42a6      	cmp	r6, r4
 800d24e:	d109      	bne.n	800d264 <__libc_init_array+0x24>
 800d250:	4d0b      	ldr	r5, [pc, #44]	; (800d280 <__libc_init_array+0x40>)
 800d252:	4c0c      	ldr	r4, [pc, #48]	; (800d284 <__libc_init_array+0x44>)
 800d254:	f002 f810 	bl	800f278 <_init>
 800d258:	1b64      	subs	r4, r4, r5
 800d25a:	10a4      	asrs	r4, r4, #2
 800d25c:	2600      	movs	r6, #0
 800d25e:	42a6      	cmp	r6, r4
 800d260:	d105      	bne.n	800d26e <__libc_init_array+0x2e>
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	f855 3b04 	ldr.w	r3, [r5], #4
 800d268:	4798      	blx	r3
 800d26a:	3601      	adds	r6, #1
 800d26c:	e7ee      	b.n	800d24c <__libc_init_array+0xc>
 800d26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d272:	4798      	blx	r3
 800d274:	3601      	adds	r6, #1
 800d276:	e7f2      	b.n	800d25e <__libc_init_array+0x1e>
 800d278:	0800f6e4 	.word	0x0800f6e4
 800d27c:	0800f6e4 	.word	0x0800f6e4
 800d280:	0800f6e4 	.word	0x0800f6e4
 800d284:	0800f6e8 	.word	0x0800f6e8

0800d288 <__retarget_lock_init_recursive>:
 800d288:	4770      	bx	lr

0800d28a <__retarget_lock_acquire_recursive>:
 800d28a:	4770      	bx	lr

0800d28c <__retarget_lock_release_recursive>:
 800d28c:	4770      	bx	lr

0800d28e <memcpy>:
 800d28e:	440a      	add	r2, r1
 800d290:	4291      	cmp	r1, r2
 800d292:	f100 33ff 	add.w	r3, r0, #4294967295
 800d296:	d100      	bne.n	800d29a <memcpy+0xc>
 800d298:	4770      	bx	lr
 800d29a:	b510      	push	{r4, lr}
 800d29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2a4:	4291      	cmp	r1, r2
 800d2a6:	d1f9      	bne.n	800d29c <memcpy+0xe>
 800d2a8:	bd10      	pop	{r4, pc}

0800d2aa <quorem>:
 800d2aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ae:	6903      	ldr	r3, [r0, #16]
 800d2b0:	690c      	ldr	r4, [r1, #16]
 800d2b2:	42a3      	cmp	r3, r4
 800d2b4:	4607      	mov	r7, r0
 800d2b6:	db7e      	blt.n	800d3b6 <quorem+0x10c>
 800d2b8:	3c01      	subs	r4, #1
 800d2ba:	f101 0814 	add.w	r8, r1, #20
 800d2be:	f100 0514 	add.w	r5, r0, #20
 800d2c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2e0:	d331      	bcc.n	800d346 <quorem+0x9c>
 800d2e2:	f04f 0e00 	mov.w	lr, #0
 800d2e6:	4640      	mov	r0, r8
 800d2e8:	46ac      	mov	ip, r5
 800d2ea:	46f2      	mov	sl, lr
 800d2ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2f0:	b293      	uxth	r3, r2
 800d2f2:	fb06 e303 	mla	r3, r6, r3, lr
 800d2f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2fa:	0c1a      	lsrs	r2, r3, #16
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	ebaa 0303 	sub.w	r3, sl, r3
 800d302:	f8dc a000 	ldr.w	sl, [ip]
 800d306:	fa13 f38a 	uxtah	r3, r3, sl
 800d30a:	fb06 220e 	mla	r2, r6, lr, r2
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	9b00      	ldr	r3, [sp, #0]
 800d312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d316:	b292      	uxth	r2, r2
 800d318:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d31c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d320:	f8bd 3000 	ldrh.w	r3, [sp]
 800d324:	4581      	cmp	r9, r0
 800d326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d32a:	f84c 3b04 	str.w	r3, [ip], #4
 800d32e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d332:	d2db      	bcs.n	800d2ec <quorem+0x42>
 800d334:	f855 300b 	ldr.w	r3, [r5, fp]
 800d338:	b92b      	cbnz	r3, 800d346 <quorem+0x9c>
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	3b04      	subs	r3, #4
 800d33e:	429d      	cmp	r5, r3
 800d340:	461a      	mov	r2, r3
 800d342:	d32c      	bcc.n	800d39e <quorem+0xf4>
 800d344:	613c      	str	r4, [r7, #16]
 800d346:	4638      	mov	r0, r7
 800d348:	f001 f922 	bl	800e590 <__mcmp>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	db22      	blt.n	800d396 <quorem+0xec>
 800d350:	3601      	adds	r6, #1
 800d352:	4629      	mov	r1, r5
 800d354:	2000      	movs	r0, #0
 800d356:	f858 2b04 	ldr.w	r2, [r8], #4
 800d35a:	f8d1 c000 	ldr.w	ip, [r1]
 800d35e:	b293      	uxth	r3, r2
 800d360:	1ac3      	subs	r3, r0, r3
 800d362:	0c12      	lsrs	r2, r2, #16
 800d364:	fa13 f38c 	uxtah	r3, r3, ip
 800d368:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d370:	b29b      	uxth	r3, r3
 800d372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d376:	45c1      	cmp	r9, r8
 800d378:	f841 3b04 	str.w	r3, [r1], #4
 800d37c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d380:	d2e9      	bcs.n	800d356 <quorem+0xac>
 800d382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d38a:	b922      	cbnz	r2, 800d396 <quorem+0xec>
 800d38c:	3b04      	subs	r3, #4
 800d38e:	429d      	cmp	r5, r3
 800d390:	461a      	mov	r2, r3
 800d392:	d30a      	bcc.n	800d3aa <quorem+0x100>
 800d394:	613c      	str	r4, [r7, #16]
 800d396:	4630      	mov	r0, r6
 800d398:	b003      	add	sp, #12
 800d39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39e:	6812      	ldr	r2, [r2, #0]
 800d3a0:	3b04      	subs	r3, #4
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	d1ce      	bne.n	800d344 <quorem+0x9a>
 800d3a6:	3c01      	subs	r4, #1
 800d3a8:	e7c9      	b.n	800d33e <quorem+0x94>
 800d3aa:	6812      	ldr	r2, [r2, #0]
 800d3ac:	3b04      	subs	r3, #4
 800d3ae:	2a00      	cmp	r2, #0
 800d3b0:	d1f0      	bne.n	800d394 <quorem+0xea>
 800d3b2:	3c01      	subs	r4, #1
 800d3b4:	e7eb      	b.n	800d38e <quorem+0xe4>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e7ee      	b.n	800d398 <quorem+0xee>
 800d3ba:	0000      	movs	r0, r0
 800d3bc:	0000      	movs	r0, r0
	...

0800d3c0 <_dtoa_r>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	ed2d 8b02 	vpush	{d8}
 800d3c8:	69c5      	ldr	r5, [r0, #28]
 800d3ca:	b091      	sub	sp, #68	; 0x44
 800d3cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3d0:	ec59 8b10 	vmov	r8, r9, d0
 800d3d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d3d6:	9106      	str	r1, [sp, #24]
 800d3d8:	4606      	mov	r6, r0
 800d3da:	9208      	str	r2, [sp, #32]
 800d3dc:	930c      	str	r3, [sp, #48]	; 0x30
 800d3de:	b975      	cbnz	r5, 800d3fe <_dtoa_r+0x3e>
 800d3e0:	2010      	movs	r0, #16
 800d3e2:	f000 fda5 	bl	800df30 <malloc>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	61f0      	str	r0, [r6, #28]
 800d3ea:	b920      	cbnz	r0, 800d3f6 <_dtoa_r+0x36>
 800d3ec:	4ba6      	ldr	r3, [pc, #664]	; (800d688 <_dtoa_r+0x2c8>)
 800d3ee:	21ef      	movs	r1, #239	; 0xef
 800d3f0:	48a6      	ldr	r0, [pc, #664]	; (800d68c <_dtoa_r+0x2cc>)
 800d3f2:	f001 fbfd 	bl	800ebf0 <__assert_func>
 800d3f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3fa:	6005      	str	r5, [r0, #0]
 800d3fc:	60c5      	str	r5, [r0, #12]
 800d3fe:	69f3      	ldr	r3, [r6, #28]
 800d400:	6819      	ldr	r1, [r3, #0]
 800d402:	b151      	cbz	r1, 800d41a <_dtoa_r+0x5a>
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	604a      	str	r2, [r1, #4]
 800d408:	2301      	movs	r3, #1
 800d40a:	4093      	lsls	r3, r2
 800d40c:	608b      	str	r3, [r1, #8]
 800d40e:	4630      	mov	r0, r6
 800d410:	f000 fe82 	bl	800e118 <_Bfree>
 800d414:	69f3      	ldr	r3, [r6, #28]
 800d416:	2200      	movs	r2, #0
 800d418:	601a      	str	r2, [r3, #0]
 800d41a:	f1b9 0300 	subs.w	r3, r9, #0
 800d41e:	bfbb      	ittet	lt
 800d420:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d424:	9303      	strlt	r3, [sp, #12]
 800d426:	2300      	movge	r3, #0
 800d428:	2201      	movlt	r2, #1
 800d42a:	bfac      	ite	ge
 800d42c:	6023      	strge	r3, [r4, #0]
 800d42e:	6022      	strlt	r2, [r4, #0]
 800d430:	4b97      	ldr	r3, [pc, #604]	; (800d690 <_dtoa_r+0x2d0>)
 800d432:	9c03      	ldr	r4, [sp, #12]
 800d434:	43a3      	bics	r3, r4
 800d436:	d11c      	bne.n	800d472 <_dtoa_r+0xb2>
 800d438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d43a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d444:	ea53 0308 	orrs.w	r3, r3, r8
 800d448:	f000 84fb 	beq.w	800de42 <_dtoa_r+0xa82>
 800d44c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d44e:	b963      	cbnz	r3, 800d46a <_dtoa_r+0xaa>
 800d450:	4b90      	ldr	r3, [pc, #576]	; (800d694 <_dtoa_r+0x2d4>)
 800d452:	e020      	b.n	800d496 <_dtoa_r+0xd6>
 800d454:	4b90      	ldr	r3, [pc, #576]	; (800d698 <_dtoa_r+0x2d8>)
 800d456:	9301      	str	r3, [sp, #4]
 800d458:	3308      	adds	r3, #8
 800d45a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d45c:	6013      	str	r3, [r2, #0]
 800d45e:	9801      	ldr	r0, [sp, #4]
 800d460:	b011      	add	sp, #68	; 0x44
 800d462:	ecbd 8b02 	vpop	{d8}
 800d466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46a:	4b8a      	ldr	r3, [pc, #552]	; (800d694 <_dtoa_r+0x2d4>)
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	3303      	adds	r3, #3
 800d470:	e7f3      	b.n	800d45a <_dtoa_r+0x9a>
 800d472:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d476:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d47e:	d10c      	bne.n	800d49a <_dtoa_r+0xda>
 800d480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d482:	2301      	movs	r3, #1
 800d484:	6013      	str	r3, [r2, #0]
 800d486:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d488:	2b00      	cmp	r3, #0
 800d48a:	f000 84d7 	beq.w	800de3c <_dtoa_r+0xa7c>
 800d48e:	4b83      	ldr	r3, [pc, #524]	; (800d69c <_dtoa_r+0x2dc>)
 800d490:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d492:	6013      	str	r3, [r2, #0]
 800d494:	3b01      	subs	r3, #1
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	e7e1      	b.n	800d45e <_dtoa_r+0x9e>
 800d49a:	aa0e      	add	r2, sp, #56	; 0x38
 800d49c:	a90f      	add	r1, sp, #60	; 0x3c
 800d49e:	4630      	mov	r0, r6
 800d4a0:	eeb0 0b48 	vmov.f64	d0, d8
 800d4a4:	f001 f91a 	bl	800e6dc <__d2b>
 800d4a8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d4ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d046      	beq.n	800d542 <_dtoa_r+0x182>
 800d4b4:	eeb0 7b48 	vmov.f64	d7, d8
 800d4b8:	ee18 1a90 	vmov	r1, s17
 800d4bc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d4c0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d4c4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d4c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	ee07 1a90 	vmov	s15, r1
 800d4d2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d4d6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d670 <_dtoa_r+0x2b0>
 800d4da:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d4de:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d678 <_dtoa_r+0x2b8>
 800d4e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4e6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d680 <_dtoa_r+0x2c0>
 800d4ea:	ee07 3a90 	vmov	s15, r3
 800d4ee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d4f2:	eeb0 7b46 	vmov.f64	d7, d6
 800d4f6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d4fa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d506:	ee16 ba90 	vmov	fp, s13
 800d50a:	9009      	str	r0, [sp, #36]	; 0x24
 800d50c:	d508      	bpl.n	800d520 <_dtoa_r+0x160>
 800d50e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d512:	eeb4 6b47 	vcmp.f64	d6, d7
 800d516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51a:	bf18      	it	ne
 800d51c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d520:	f1bb 0f16 	cmp.w	fp, #22
 800d524:	d82b      	bhi.n	800d57e <_dtoa_r+0x1be>
 800d526:	495e      	ldr	r1, [pc, #376]	; (800d6a0 <_dtoa_r+0x2e0>)
 800d528:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d52c:	ed91 7b00 	vldr	d7, [r1]
 800d530:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d538:	d501      	bpl.n	800d53e <_dtoa_r+0x17e>
 800d53a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d53e:	2100      	movs	r1, #0
 800d540:	e01e      	b.n	800d580 <_dtoa_r+0x1c0>
 800d542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d544:	4413      	add	r3, r2
 800d546:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d54a:	2920      	cmp	r1, #32
 800d54c:	bfc1      	itttt	gt
 800d54e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d552:	408c      	lslgt	r4, r1
 800d554:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d558:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d55c:	bfd6      	itet	le
 800d55e:	f1c1 0120 	rsble	r1, r1, #32
 800d562:	4321      	orrgt	r1, r4
 800d564:	fa08 f101 	lslle.w	r1, r8, r1
 800d568:	ee07 1a90 	vmov	s15, r1
 800d56c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d570:	3b01      	subs	r3, #1
 800d572:	ee17 1a90 	vmov	r1, s15
 800d576:	2001      	movs	r0, #1
 800d578:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d57c:	e7a7      	b.n	800d4ce <_dtoa_r+0x10e>
 800d57e:	2101      	movs	r1, #1
 800d580:	1ad2      	subs	r2, r2, r3
 800d582:	1e53      	subs	r3, r2, #1
 800d584:	9305      	str	r3, [sp, #20]
 800d586:	bf45      	ittet	mi
 800d588:	f1c2 0301 	rsbmi	r3, r2, #1
 800d58c:	9304      	strmi	r3, [sp, #16]
 800d58e:	2300      	movpl	r3, #0
 800d590:	2300      	movmi	r3, #0
 800d592:	bf4c      	ite	mi
 800d594:	9305      	strmi	r3, [sp, #20]
 800d596:	9304      	strpl	r3, [sp, #16]
 800d598:	f1bb 0f00 	cmp.w	fp, #0
 800d59c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d59e:	db18      	blt.n	800d5d2 <_dtoa_r+0x212>
 800d5a0:	9b05      	ldr	r3, [sp, #20]
 800d5a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d5a6:	445b      	add	r3, fp
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9a06      	ldr	r2, [sp, #24]
 800d5ae:	2a09      	cmp	r2, #9
 800d5b0:	d848      	bhi.n	800d644 <_dtoa_r+0x284>
 800d5b2:	2a05      	cmp	r2, #5
 800d5b4:	bfc4      	itt	gt
 800d5b6:	3a04      	subgt	r2, #4
 800d5b8:	9206      	strgt	r2, [sp, #24]
 800d5ba:	9a06      	ldr	r2, [sp, #24]
 800d5bc:	f1a2 0202 	sub.w	r2, r2, #2
 800d5c0:	bfcc      	ite	gt
 800d5c2:	2400      	movgt	r4, #0
 800d5c4:	2401      	movle	r4, #1
 800d5c6:	2a03      	cmp	r2, #3
 800d5c8:	d847      	bhi.n	800d65a <_dtoa_r+0x29a>
 800d5ca:	e8df f002 	tbb	[pc, r2]
 800d5ce:	2d0b      	.short	0x2d0b
 800d5d0:	392b      	.short	0x392b
 800d5d2:	9b04      	ldr	r3, [sp, #16]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	eba3 030b 	sub.w	r3, r3, fp
 800d5da:	9304      	str	r3, [sp, #16]
 800d5dc:	920a      	str	r2, [sp, #40]	; 0x28
 800d5de:	f1cb 0300 	rsb	r3, fp, #0
 800d5e2:	e7e3      	b.n	800d5ac <_dtoa_r+0x1ec>
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	9207      	str	r2, [sp, #28]
 800d5e8:	9a08      	ldr	r2, [sp, #32]
 800d5ea:	2a00      	cmp	r2, #0
 800d5ec:	dc38      	bgt.n	800d660 <_dtoa_r+0x2a0>
 800d5ee:	f04f 0a01 	mov.w	sl, #1
 800d5f2:	46d1      	mov	r9, sl
 800d5f4:	4652      	mov	r2, sl
 800d5f6:	f8cd a020 	str.w	sl, [sp, #32]
 800d5fa:	69f7      	ldr	r7, [r6, #28]
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	2004      	movs	r0, #4
 800d600:	f100 0c14 	add.w	ip, r0, #20
 800d604:	4594      	cmp	ip, r2
 800d606:	d930      	bls.n	800d66a <_dtoa_r+0x2aa>
 800d608:	6079      	str	r1, [r7, #4]
 800d60a:	4630      	mov	r0, r6
 800d60c:	930d      	str	r3, [sp, #52]	; 0x34
 800d60e:	f000 fd43 	bl	800e098 <_Balloc>
 800d612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d614:	9001      	str	r0, [sp, #4]
 800d616:	4602      	mov	r2, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	d145      	bne.n	800d6a8 <_dtoa_r+0x2e8>
 800d61c:	4b21      	ldr	r3, [pc, #132]	; (800d6a4 <_dtoa_r+0x2e4>)
 800d61e:	f240 11af 	movw	r1, #431	; 0x1af
 800d622:	e6e5      	b.n	800d3f0 <_dtoa_r+0x30>
 800d624:	2201      	movs	r2, #1
 800d626:	e7de      	b.n	800d5e6 <_dtoa_r+0x226>
 800d628:	2200      	movs	r2, #0
 800d62a:	9207      	str	r2, [sp, #28]
 800d62c:	9a08      	ldr	r2, [sp, #32]
 800d62e:	eb0b 0a02 	add.w	sl, fp, r2
 800d632:	f10a 0901 	add.w	r9, sl, #1
 800d636:	464a      	mov	r2, r9
 800d638:	2a01      	cmp	r2, #1
 800d63a:	bfb8      	it	lt
 800d63c:	2201      	movlt	r2, #1
 800d63e:	e7dc      	b.n	800d5fa <_dtoa_r+0x23a>
 800d640:	2201      	movs	r2, #1
 800d642:	e7f2      	b.n	800d62a <_dtoa_r+0x26a>
 800d644:	2401      	movs	r4, #1
 800d646:	2200      	movs	r2, #0
 800d648:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d64c:	f04f 3aff 	mov.w	sl, #4294967295
 800d650:	2100      	movs	r1, #0
 800d652:	46d1      	mov	r9, sl
 800d654:	2212      	movs	r2, #18
 800d656:	9108      	str	r1, [sp, #32]
 800d658:	e7cf      	b.n	800d5fa <_dtoa_r+0x23a>
 800d65a:	2201      	movs	r2, #1
 800d65c:	9207      	str	r2, [sp, #28]
 800d65e:	e7f5      	b.n	800d64c <_dtoa_r+0x28c>
 800d660:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d664:	46d1      	mov	r9, sl
 800d666:	4652      	mov	r2, sl
 800d668:	e7c7      	b.n	800d5fa <_dtoa_r+0x23a>
 800d66a:	3101      	adds	r1, #1
 800d66c:	0040      	lsls	r0, r0, #1
 800d66e:	e7c7      	b.n	800d600 <_dtoa_r+0x240>
 800d670:	636f4361 	.word	0x636f4361
 800d674:	3fd287a7 	.word	0x3fd287a7
 800d678:	8b60c8b3 	.word	0x8b60c8b3
 800d67c:	3fc68a28 	.word	0x3fc68a28
 800d680:	509f79fb 	.word	0x509f79fb
 800d684:	3fd34413 	.word	0x3fd34413
 800d688:	0800f3ad 	.word	0x0800f3ad
 800d68c:	0800f3c4 	.word	0x0800f3c4
 800d690:	7ff00000 	.word	0x7ff00000
 800d694:	0800f3a9 	.word	0x0800f3a9
 800d698:	0800f3a0 	.word	0x0800f3a0
 800d69c:	0800f37d 	.word	0x0800f37d
 800d6a0:	0800f4b0 	.word	0x0800f4b0
 800d6a4:	0800f41c 	.word	0x0800f41c
 800d6a8:	69f2      	ldr	r2, [r6, #28]
 800d6aa:	9901      	ldr	r1, [sp, #4]
 800d6ac:	6011      	str	r1, [r2, #0]
 800d6ae:	f1b9 0f0e 	cmp.w	r9, #14
 800d6b2:	d86c      	bhi.n	800d78e <_dtoa_r+0x3ce>
 800d6b4:	2c00      	cmp	r4, #0
 800d6b6:	d06a      	beq.n	800d78e <_dtoa_r+0x3ce>
 800d6b8:	f1bb 0f00 	cmp.w	fp, #0
 800d6bc:	f340 80a0 	ble.w	800d800 <_dtoa_r+0x440>
 800d6c0:	4ac1      	ldr	r2, [pc, #772]	; (800d9c8 <_dtoa_r+0x608>)
 800d6c2:	f00b 010f 	and.w	r1, fp, #15
 800d6c6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d6ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6ce:	ed92 7b00 	vldr	d7, [r2]
 800d6d2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d6d6:	f000 8087 	beq.w	800d7e8 <_dtoa_r+0x428>
 800d6da:	49bc      	ldr	r1, [pc, #752]	; (800d9cc <_dtoa_r+0x60c>)
 800d6dc:	ed91 6b08 	vldr	d6, [r1, #32]
 800d6e0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d6e4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d6e8:	f002 020f 	and.w	r2, r2, #15
 800d6ec:	2103      	movs	r1, #3
 800d6ee:	48b7      	ldr	r0, [pc, #732]	; (800d9cc <_dtoa_r+0x60c>)
 800d6f0:	2a00      	cmp	r2, #0
 800d6f2:	d17b      	bne.n	800d7ec <_dtoa_r+0x42c>
 800d6f4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d702:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d706:	2a00      	cmp	r2, #0
 800d708:	f000 80a0 	beq.w	800d84c <_dtoa_r+0x48c>
 800d70c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d710:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d718:	f140 8098 	bpl.w	800d84c <_dtoa_r+0x48c>
 800d71c:	f1b9 0f00 	cmp.w	r9, #0
 800d720:	f000 8094 	beq.w	800d84c <_dtoa_r+0x48c>
 800d724:	f1ba 0f00 	cmp.w	sl, #0
 800d728:	dd2f      	ble.n	800d78a <_dtoa_r+0x3ca>
 800d72a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d72e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d732:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d736:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d73a:	3101      	adds	r1, #1
 800d73c:	4654      	mov	r4, sl
 800d73e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d742:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d746:	ee07 1a90 	vmov	s15, r1
 800d74a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d74e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d752:	ee15 7a90 	vmov	r7, s11
 800d756:	ec51 0b15 	vmov	r0, r1, d5
 800d75a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d75e:	2c00      	cmp	r4, #0
 800d760:	d177      	bne.n	800d852 <_dtoa_r+0x492>
 800d762:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d766:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d76a:	ec41 0b17 	vmov	d7, r0, r1
 800d76e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d776:	f300 826a 	bgt.w	800dc4e <_dtoa_r+0x88e>
 800d77a:	eeb1 7b47 	vneg.f64	d7, d7
 800d77e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d786:	f100 8260 	bmi.w	800dc4a <_dtoa_r+0x88a>
 800d78a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d78e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d790:	2a00      	cmp	r2, #0
 800d792:	f2c0 811d 	blt.w	800d9d0 <_dtoa_r+0x610>
 800d796:	f1bb 0f0e 	cmp.w	fp, #14
 800d79a:	f300 8119 	bgt.w	800d9d0 <_dtoa_r+0x610>
 800d79e:	4b8a      	ldr	r3, [pc, #552]	; (800d9c8 <_dtoa_r+0x608>)
 800d7a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7a4:	ed93 6b00 	vldr	d6, [r3]
 800d7a8:	9b08      	ldr	r3, [sp, #32]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f280 80b7 	bge.w	800d91e <_dtoa_r+0x55e>
 800d7b0:	f1b9 0f00 	cmp.w	r9, #0
 800d7b4:	f300 80b3 	bgt.w	800d91e <_dtoa_r+0x55e>
 800d7b8:	f040 8246 	bne.w	800dc48 <_dtoa_r+0x888>
 800d7bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d7c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d7c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d0:	464c      	mov	r4, r9
 800d7d2:	464f      	mov	r7, r9
 800d7d4:	f280 821c 	bge.w	800dc10 <_dtoa_r+0x850>
 800d7d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d7dc:	2331      	movs	r3, #49	; 0x31
 800d7de:	f808 3b01 	strb.w	r3, [r8], #1
 800d7e2:	f10b 0b01 	add.w	fp, fp, #1
 800d7e6:	e218      	b.n	800dc1a <_dtoa_r+0x85a>
 800d7e8:	2102      	movs	r1, #2
 800d7ea:	e780      	b.n	800d6ee <_dtoa_r+0x32e>
 800d7ec:	07d4      	lsls	r4, r2, #31
 800d7ee:	d504      	bpl.n	800d7fa <_dtoa_r+0x43a>
 800d7f0:	ed90 6b00 	vldr	d6, [r0]
 800d7f4:	3101      	adds	r1, #1
 800d7f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7fa:	1052      	asrs	r2, r2, #1
 800d7fc:	3008      	adds	r0, #8
 800d7fe:	e777      	b.n	800d6f0 <_dtoa_r+0x330>
 800d800:	d022      	beq.n	800d848 <_dtoa_r+0x488>
 800d802:	f1cb 0200 	rsb	r2, fp, #0
 800d806:	4970      	ldr	r1, [pc, #448]	; (800d9c8 <_dtoa_r+0x608>)
 800d808:	f002 000f 	and.w	r0, r2, #15
 800d80c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d810:	ed91 7b00 	vldr	d7, [r1]
 800d814:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d818:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d81c:	486b      	ldr	r0, [pc, #428]	; (800d9cc <_dtoa_r+0x60c>)
 800d81e:	1112      	asrs	r2, r2, #4
 800d820:	2400      	movs	r4, #0
 800d822:	2102      	movs	r1, #2
 800d824:	b92a      	cbnz	r2, 800d832 <_dtoa_r+0x472>
 800d826:	2c00      	cmp	r4, #0
 800d828:	f43f af6a 	beq.w	800d700 <_dtoa_r+0x340>
 800d82c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d830:	e766      	b.n	800d700 <_dtoa_r+0x340>
 800d832:	07d7      	lsls	r7, r2, #31
 800d834:	d505      	bpl.n	800d842 <_dtoa_r+0x482>
 800d836:	ed90 6b00 	vldr	d6, [r0]
 800d83a:	3101      	adds	r1, #1
 800d83c:	2401      	movs	r4, #1
 800d83e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d842:	1052      	asrs	r2, r2, #1
 800d844:	3008      	adds	r0, #8
 800d846:	e7ed      	b.n	800d824 <_dtoa_r+0x464>
 800d848:	2102      	movs	r1, #2
 800d84a:	e759      	b.n	800d700 <_dtoa_r+0x340>
 800d84c:	465a      	mov	r2, fp
 800d84e:	464c      	mov	r4, r9
 800d850:	e775      	b.n	800d73e <_dtoa_r+0x37e>
 800d852:	ec41 0b17 	vmov	d7, r0, r1
 800d856:	495c      	ldr	r1, [pc, #368]	; (800d9c8 <_dtoa_r+0x608>)
 800d858:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d85c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d860:	9901      	ldr	r1, [sp, #4]
 800d862:	440c      	add	r4, r1
 800d864:	9907      	ldr	r1, [sp, #28]
 800d866:	b351      	cbz	r1, 800d8be <_dtoa_r+0x4fe>
 800d868:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d86c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d870:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d874:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d878:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d87c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d880:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d884:	ee14 1a90 	vmov	r1, s9
 800d888:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d88c:	3130      	adds	r1, #48	; 0x30
 800d88e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	f808 1b01 	strb.w	r1, [r8], #1
 800d89e:	d439      	bmi.n	800d914 <_dtoa_r+0x554>
 800d8a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d8a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	d472      	bmi.n	800d994 <_dtoa_r+0x5d4>
 800d8ae:	45a0      	cmp	r8, r4
 800d8b0:	f43f af6b 	beq.w	800d78a <_dtoa_r+0x3ca>
 800d8b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d8b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8bc:	e7e0      	b.n	800d880 <_dtoa_r+0x4c0>
 800d8be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8d0:	ee14 1a90 	vmov	r1, s9
 800d8d4:	3130      	adds	r1, #48	; 0x30
 800d8d6:	f808 1b01 	strb.w	r1, [r8], #1
 800d8da:	45a0      	cmp	r8, r4
 800d8dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8e4:	d118      	bne.n	800d918 <_dtoa_r+0x558>
 800d8e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d8ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d8ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	dc4d      	bgt.n	800d994 <_dtoa_r+0x5d4>
 800d8f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d8fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	f57f af41 	bpl.w	800d78a <_dtoa_r+0x3ca>
 800d908:	4680      	mov	r8, r0
 800d90a:	3801      	subs	r0, #1
 800d90c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d910:	2b30      	cmp	r3, #48	; 0x30
 800d912:	d0f9      	beq.n	800d908 <_dtoa_r+0x548>
 800d914:	4693      	mov	fp, r2
 800d916:	e02a      	b.n	800d96e <_dtoa_r+0x5ae>
 800d918:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d91c:	e7d6      	b.n	800d8cc <_dtoa_r+0x50c>
 800d91e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d922:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d926:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d92a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d92e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d932:	ee15 3a10 	vmov	r3, s10
 800d936:	3330      	adds	r3, #48	; 0x30
 800d938:	f808 3b01 	strb.w	r3, [r8], #1
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	eba8 0303 	sub.w	r3, r8, r3
 800d942:	4599      	cmp	r9, r3
 800d944:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d948:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d94c:	d133      	bne.n	800d9b6 <_dtoa_r+0x5f6>
 800d94e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95a:	dc1a      	bgt.n	800d992 <_dtoa_r+0x5d2>
 800d95c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d964:	d103      	bne.n	800d96e <_dtoa_r+0x5ae>
 800d966:	ee15 3a10 	vmov	r3, s10
 800d96a:	07d9      	lsls	r1, r3, #31
 800d96c:	d411      	bmi.n	800d992 <_dtoa_r+0x5d2>
 800d96e:	4629      	mov	r1, r5
 800d970:	4630      	mov	r0, r6
 800d972:	f000 fbd1 	bl	800e118 <_Bfree>
 800d976:	2300      	movs	r3, #0
 800d978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d97a:	f888 3000 	strb.w	r3, [r8]
 800d97e:	f10b 0301 	add.w	r3, fp, #1
 800d982:	6013      	str	r3, [r2, #0]
 800d984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d986:	2b00      	cmp	r3, #0
 800d988:	f43f ad69 	beq.w	800d45e <_dtoa_r+0x9e>
 800d98c:	f8c3 8000 	str.w	r8, [r3]
 800d990:	e565      	b.n	800d45e <_dtoa_r+0x9e>
 800d992:	465a      	mov	r2, fp
 800d994:	4643      	mov	r3, r8
 800d996:	4698      	mov	r8, r3
 800d998:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d99c:	2939      	cmp	r1, #57	; 0x39
 800d99e:	d106      	bne.n	800d9ae <_dtoa_r+0x5ee>
 800d9a0:	9901      	ldr	r1, [sp, #4]
 800d9a2:	4299      	cmp	r1, r3
 800d9a4:	d1f7      	bne.n	800d996 <_dtoa_r+0x5d6>
 800d9a6:	9801      	ldr	r0, [sp, #4]
 800d9a8:	2130      	movs	r1, #48	; 0x30
 800d9aa:	3201      	adds	r2, #1
 800d9ac:	7001      	strb	r1, [r0, #0]
 800d9ae:	7819      	ldrb	r1, [r3, #0]
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	7019      	strb	r1, [r3, #0]
 800d9b4:	e7ae      	b.n	800d914 <_dtoa_r+0x554>
 800d9b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c2:	d1b2      	bne.n	800d92a <_dtoa_r+0x56a>
 800d9c4:	e7d3      	b.n	800d96e <_dtoa_r+0x5ae>
 800d9c6:	bf00      	nop
 800d9c8:	0800f4b0 	.word	0x0800f4b0
 800d9cc:	0800f488 	.word	0x0800f488
 800d9d0:	9907      	ldr	r1, [sp, #28]
 800d9d2:	2900      	cmp	r1, #0
 800d9d4:	f000 80d0 	beq.w	800db78 <_dtoa_r+0x7b8>
 800d9d8:	9906      	ldr	r1, [sp, #24]
 800d9da:	2901      	cmp	r1, #1
 800d9dc:	f300 80b4 	bgt.w	800db48 <_dtoa_r+0x788>
 800d9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9e2:	2900      	cmp	r1, #0
 800d9e4:	f000 80ac 	beq.w	800db40 <_dtoa_r+0x780>
 800d9e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d9ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d9f0:	461c      	mov	r4, r3
 800d9f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9f4:	9b04      	ldr	r3, [sp, #16]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	9b05      	ldr	r3, [sp, #20]
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	4630      	mov	r0, r6
 800da02:	9305      	str	r3, [sp, #20]
 800da04:	f000 fc3e 	bl	800e284 <__i2b>
 800da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0a:	4607      	mov	r7, r0
 800da0c:	f1b8 0f00 	cmp.w	r8, #0
 800da10:	d00d      	beq.n	800da2e <_dtoa_r+0x66e>
 800da12:	9a05      	ldr	r2, [sp, #20]
 800da14:	2a00      	cmp	r2, #0
 800da16:	dd0a      	ble.n	800da2e <_dtoa_r+0x66e>
 800da18:	4542      	cmp	r2, r8
 800da1a:	9904      	ldr	r1, [sp, #16]
 800da1c:	bfa8      	it	ge
 800da1e:	4642      	movge	r2, r8
 800da20:	1a89      	subs	r1, r1, r2
 800da22:	9104      	str	r1, [sp, #16]
 800da24:	9905      	ldr	r1, [sp, #20]
 800da26:	eba8 0802 	sub.w	r8, r8, r2
 800da2a:	1a8a      	subs	r2, r1, r2
 800da2c:	9205      	str	r2, [sp, #20]
 800da2e:	b303      	cbz	r3, 800da72 <_dtoa_r+0x6b2>
 800da30:	9a07      	ldr	r2, [sp, #28]
 800da32:	2a00      	cmp	r2, #0
 800da34:	f000 80a5 	beq.w	800db82 <_dtoa_r+0x7c2>
 800da38:	2c00      	cmp	r4, #0
 800da3a:	dd13      	ble.n	800da64 <_dtoa_r+0x6a4>
 800da3c:	4639      	mov	r1, r7
 800da3e:	4622      	mov	r2, r4
 800da40:	4630      	mov	r0, r6
 800da42:	930d      	str	r3, [sp, #52]	; 0x34
 800da44:	f000 fcde 	bl	800e404 <__pow5mult>
 800da48:	462a      	mov	r2, r5
 800da4a:	4601      	mov	r1, r0
 800da4c:	4607      	mov	r7, r0
 800da4e:	4630      	mov	r0, r6
 800da50:	f000 fc2e 	bl	800e2b0 <__multiply>
 800da54:	4629      	mov	r1, r5
 800da56:	9009      	str	r0, [sp, #36]	; 0x24
 800da58:	4630      	mov	r0, r6
 800da5a:	f000 fb5d 	bl	800e118 <_Bfree>
 800da5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da62:	4615      	mov	r5, r2
 800da64:	1b1a      	subs	r2, r3, r4
 800da66:	d004      	beq.n	800da72 <_dtoa_r+0x6b2>
 800da68:	4629      	mov	r1, r5
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 fcca 	bl	800e404 <__pow5mult>
 800da70:	4605      	mov	r5, r0
 800da72:	2101      	movs	r1, #1
 800da74:	4630      	mov	r0, r6
 800da76:	f000 fc05 	bl	800e284 <__i2b>
 800da7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	4604      	mov	r4, r0
 800da80:	f340 8081 	ble.w	800db86 <_dtoa_r+0x7c6>
 800da84:	461a      	mov	r2, r3
 800da86:	4601      	mov	r1, r0
 800da88:	4630      	mov	r0, r6
 800da8a:	f000 fcbb 	bl	800e404 <__pow5mult>
 800da8e:	9b06      	ldr	r3, [sp, #24]
 800da90:	2b01      	cmp	r3, #1
 800da92:	4604      	mov	r4, r0
 800da94:	dd7a      	ble.n	800db8c <_dtoa_r+0x7cc>
 800da96:	2300      	movs	r3, #0
 800da98:	9309      	str	r3, [sp, #36]	; 0x24
 800da9a:	6922      	ldr	r2, [r4, #16]
 800da9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800daa0:	6910      	ldr	r0, [r2, #16]
 800daa2:	f000 fba1 	bl	800e1e8 <__hi0bits>
 800daa6:	f1c0 0020 	rsb	r0, r0, #32
 800daaa:	9b05      	ldr	r3, [sp, #20]
 800daac:	4418      	add	r0, r3
 800daae:	f010 001f 	ands.w	r0, r0, #31
 800dab2:	f000 8093 	beq.w	800dbdc <_dtoa_r+0x81c>
 800dab6:	f1c0 0220 	rsb	r2, r0, #32
 800daba:	2a04      	cmp	r2, #4
 800dabc:	f340 8085 	ble.w	800dbca <_dtoa_r+0x80a>
 800dac0:	9b04      	ldr	r3, [sp, #16]
 800dac2:	f1c0 001c 	rsb	r0, r0, #28
 800dac6:	4403      	add	r3, r0
 800dac8:	9304      	str	r3, [sp, #16]
 800daca:	9b05      	ldr	r3, [sp, #20]
 800dacc:	4480      	add	r8, r0
 800dace:	4403      	add	r3, r0
 800dad0:	9305      	str	r3, [sp, #20]
 800dad2:	9b04      	ldr	r3, [sp, #16]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	dd05      	ble.n	800dae4 <_dtoa_r+0x724>
 800dad8:	4629      	mov	r1, r5
 800dada:	461a      	mov	r2, r3
 800dadc:	4630      	mov	r0, r6
 800dade:	f000 fceb 	bl	800e4b8 <__lshift>
 800dae2:	4605      	mov	r5, r0
 800dae4:	9b05      	ldr	r3, [sp, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dd05      	ble.n	800daf6 <_dtoa_r+0x736>
 800daea:	4621      	mov	r1, r4
 800daec:	461a      	mov	r2, r3
 800daee:	4630      	mov	r0, r6
 800daf0:	f000 fce2 	bl	800e4b8 <__lshift>
 800daf4:	4604      	mov	r4, r0
 800daf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d071      	beq.n	800dbe0 <_dtoa_r+0x820>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4628      	mov	r0, r5
 800db00:	f000 fd46 	bl	800e590 <__mcmp>
 800db04:	2800      	cmp	r0, #0
 800db06:	da6b      	bge.n	800dbe0 <_dtoa_r+0x820>
 800db08:	2300      	movs	r3, #0
 800db0a:	4629      	mov	r1, r5
 800db0c:	220a      	movs	r2, #10
 800db0e:	4630      	mov	r0, r6
 800db10:	f000 fb24 	bl	800e15c <__multadd>
 800db14:	9b07      	ldr	r3, [sp, #28]
 800db16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db1a:	4605      	mov	r5, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f000 8197 	beq.w	800de50 <_dtoa_r+0xa90>
 800db22:	4639      	mov	r1, r7
 800db24:	2300      	movs	r3, #0
 800db26:	220a      	movs	r2, #10
 800db28:	4630      	mov	r0, r6
 800db2a:	f000 fb17 	bl	800e15c <__multadd>
 800db2e:	f1ba 0f00 	cmp.w	sl, #0
 800db32:	4607      	mov	r7, r0
 800db34:	f300 8093 	bgt.w	800dc5e <_dtoa_r+0x89e>
 800db38:	9b06      	ldr	r3, [sp, #24]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	dc57      	bgt.n	800dbee <_dtoa_r+0x82e>
 800db3e:	e08e      	b.n	800dc5e <_dtoa_r+0x89e>
 800db40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db46:	e751      	b.n	800d9ec <_dtoa_r+0x62c>
 800db48:	f109 34ff 	add.w	r4, r9, #4294967295
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	bfbf      	itttt	lt
 800db50:	1ae2      	sublt	r2, r4, r3
 800db52:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800db54:	189b      	addlt	r3, r3, r2
 800db56:	930a      	strlt	r3, [sp, #40]	; 0x28
 800db58:	bfae      	itee	ge
 800db5a:	1b1c      	subge	r4, r3, r4
 800db5c:	4623      	movlt	r3, r4
 800db5e:	2400      	movlt	r4, #0
 800db60:	f1b9 0f00 	cmp.w	r9, #0
 800db64:	bfb5      	itete	lt
 800db66:	9a04      	ldrlt	r2, [sp, #16]
 800db68:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800db6c:	eba2 0809 	sublt.w	r8, r2, r9
 800db70:	464a      	movge	r2, r9
 800db72:	bfb8      	it	lt
 800db74:	2200      	movlt	r2, #0
 800db76:	e73c      	b.n	800d9f2 <_dtoa_r+0x632>
 800db78:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800db7c:	9f07      	ldr	r7, [sp, #28]
 800db7e:	461c      	mov	r4, r3
 800db80:	e744      	b.n	800da0c <_dtoa_r+0x64c>
 800db82:	461a      	mov	r2, r3
 800db84:	e770      	b.n	800da68 <_dtoa_r+0x6a8>
 800db86:	9b06      	ldr	r3, [sp, #24]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	dc18      	bgt.n	800dbbe <_dtoa_r+0x7fe>
 800db8c:	9b02      	ldr	r3, [sp, #8]
 800db8e:	b9b3      	cbnz	r3, 800dbbe <_dtoa_r+0x7fe>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800db96:	b9a2      	cbnz	r2, 800dbc2 <_dtoa_r+0x802>
 800db98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800db9c:	0d12      	lsrs	r2, r2, #20
 800db9e:	0512      	lsls	r2, r2, #20
 800dba0:	b18a      	cbz	r2, 800dbc6 <_dtoa_r+0x806>
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	3301      	adds	r3, #1
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	9b05      	ldr	r3, [sp, #20]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	9305      	str	r3, [sp, #20]
 800dbae:	2301      	movs	r3, #1
 800dbb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f47f af70 	bne.w	800da9a <_dtoa_r+0x6da>
 800dbba:	2001      	movs	r0, #1
 800dbbc:	e775      	b.n	800daaa <_dtoa_r+0x6ea>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e7f6      	b.n	800dbb0 <_dtoa_r+0x7f0>
 800dbc2:	9b02      	ldr	r3, [sp, #8]
 800dbc4:	e7f4      	b.n	800dbb0 <_dtoa_r+0x7f0>
 800dbc6:	9209      	str	r2, [sp, #36]	; 0x24
 800dbc8:	e7f3      	b.n	800dbb2 <_dtoa_r+0x7f2>
 800dbca:	d082      	beq.n	800dad2 <_dtoa_r+0x712>
 800dbcc:	9b04      	ldr	r3, [sp, #16]
 800dbce:	321c      	adds	r2, #28
 800dbd0:	4413      	add	r3, r2
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	9b05      	ldr	r3, [sp, #20]
 800dbd6:	4490      	add	r8, r2
 800dbd8:	4413      	add	r3, r2
 800dbda:	e779      	b.n	800dad0 <_dtoa_r+0x710>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	e7f5      	b.n	800dbcc <_dtoa_r+0x80c>
 800dbe0:	f1b9 0f00 	cmp.w	r9, #0
 800dbe4:	dc36      	bgt.n	800dc54 <_dtoa_r+0x894>
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	dd33      	ble.n	800dc54 <_dtoa_r+0x894>
 800dbec:	46ca      	mov	sl, r9
 800dbee:	f1ba 0f00 	cmp.w	sl, #0
 800dbf2:	d10d      	bne.n	800dc10 <_dtoa_r+0x850>
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4653      	mov	r3, sl
 800dbf8:	2205      	movs	r2, #5
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f000 faae 	bl	800e15c <__multadd>
 800dc00:	4601      	mov	r1, r0
 800dc02:	4604      	mov	r4, r0
 800dc04:	4628      	mov	r0, r5
 800dc06:	f000 fcc3 	bl	800e590 <__mcmp>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f73f ade4 	bgt.w	800d7d8 <_dtoa_r+0x418>
 800dc10:	9b08      	ldr	r3, [sp, #32]
 800dc12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc16:	ea6f 0b03 	mvn.w	fp, r3
 800dc1a:	f04f 0900 	mov.w	r9, #0
 800dc1e:	4621      	mov	r1, r4
 800dc20:	4630      	mov	r0, r6
 800dc22:	f000 fa79 	bl	800e118 <_Bfree>
 800dc26:	2f00      	cmp	r7, #0
 800dc28:	f43f aea1 	beq.w	800d96e <_dtoa_r+0x5ae>
 800dc2c:	f1b9 0f00 	cmp.w	r9, #0
 800dc30:	d005      	beq.n	800dc3e <_dtoa_r+0x87e>
 800dc32:	45b9      	cmp	r9, r7
 800dc34:	d003      	beq.n	800dc3e <_dtoa_r+0x87e>
 800dc36:	4649      	mov	r1, r9
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 fa6d 	bl	800e118 <_Bfree>
 800dc3e:	4639      	mov	r1, r7
 800dc40:	4630      	mov	r0, r6
 800dc42:	f000 fa69 	bl	800e118 <_Bfree>
 800dc46:	e692      	b.n	800d96e <_dtoa_r+0x5ae>
 800dc48:	2400      	movs	r4, #0
 800dc4a:	4627      	mov	r7, r4
 800dc4c:	e7e0      	b.n	800dc10 <_dtoa_r+0x850>
 800dc4e:	4693      	mov	fp, r2
 800dc50:	4627      	mov	r7, r4
 800dc52:	e5c1      	b.n	800d7d8 <_dtoa_r+0x418>
 800dc54:	9b07      	ldr	r3, [sp, #28]
 800dc56:	46ca      	mov	sl, r9
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 8100 	beq.w	800de5e <_dtoa_r+0xa9e>
 800dc5e:	f1b8 0f00 	cmp.w	r8, #0
 800dc62:	dd05      	ble.n	800dc70 <_dtoa_r+0x8b0>
 800dc64:	4639      	mov	r1, r7
 800dc66:	4642      	mov	r2, r8
 800dc68:	4630      	mov	r0, r6
 800dc6a:	f000 fc25 	bl	800e4b8 <__lshift>
 800dc6e:	4607      	mov	r7, r0
 800dc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d05d      	beq.n	800dd32 <_dtoa_r+0x972>
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f000 fa0d 	bl	800e098 <_Balloc>
 800dc7e:	4680      	mov	r8, r0
 800dc80:	b928      	cbnz	r0, 800dc8e <_dtoa_r+0x8ce>
 800dc82:	4b82      	ldr	r3, [pc, #520]	; (800de8c <_dtoa_r+0xacc>)
 800dc84:	4602      	mov	r2, r0
 800dc86:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dc8a:	f7ff bbb1 	b.w	800d3f0 <_dtoa_r+0x30>
 800dc8e:	693a      	ldr	r2, [r7, #16]
 800dc90:	3202      	adds	r2, #2
 800dc92:	0092      	lsls	r2, r2, #2
 800dc94:	f107 010c 	add.w	r1, r7, #12
 800dc98:	300c      	adds	r0, #12
 800dc9a:	f7ff faf8 	bl	800d28e <memcpy>
 800dc9e:	2201      	movs	r2, #1
 800dca0:	4641      	mov	r1, r8
 800dca2:	4630      	mov	r0, r6
 800dca4:	f000 fc08 	bl	800e4b8 <__lshift>
 800dca8:	9b01      	ldr	r3, [sp, #4]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	4453      	add	r3, sl
 800dcb2:	9308      	str	r3, [sp, #32]
 800dcb4:	9b02      	ldr	r3, [sp, #8]
 800dcb6:	f003 0301 	and.w	r3, r3, #1
 800dcba:	46b9      	mov	r9, r7
 800dcbc:	9307      	str	r3, [sp, #28]
 800dcbe:	4607      	mov	r7, r0
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	9302      	str	r3, [sp, #8]
 800dcca:	f7ff faee 	bl	800d2aa <quorem>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	3330      	adds	r3, #48	; 0x30
 800dcd2:	9005      	str	r0, [sp, #20]
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcda:	f000 fc59 	bl	800e590 <__mcmp>
 800dcde:	463a      	mov	r2, r7
 800dce0:	4682      	mov	sl, r0
 800dce2:	4621      	mov	r1, r4
 800dce4:	4630      	mov	r0, r6
 800dce6:	f000 fc6f 	bl	800e5c8 <__mdiff>
 800dcea:	68c2      	ldr	r2, [r0, #12]
 800dcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcee:	4680      	mov	r8, r0
 800dcf0:	bb0a      	cbnz	r2, 800dd36 <_dtoa_r+0x976>
 800dcf2:	4601      	mov	r1, r0
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f000 fc4b 	bl	800e590 <__mcmp>
 800dcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	4641      	mov	r1, r8
 800dd00:	4630      	mov	r0, r6
 800dd02:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800dd06:	f000 fa07 	bl	800e118 <_Bfree>
 800dd0a:	9b06      	ldr	r3, [sp, #24]
 800dd0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd0e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800dd12:	ea43 0102 	orr.w	r1, r3, r2
 800dd16:	9b07      	ldr	r3, [sp, #28]
 800dd18:	4319      	orrs	r1, r3
 800dd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1c:	d10d      	bne.n	800dd3a <_dtoa_r+0x97a>
 800dd1e:	2b39      	cmp	r3, #57	; 0x39
 800dd20:	d029      	beq.n	800dd76 <_dtoa_r+0x9b6>
 800dd22:	f1ba 0f00 	cmp.w	sl, #0
 800dd26:	dd01      	ble.n	800dd2c <_dtoa_r+0x96c>
 800dd28:	9b05      	ldr	r3, [sp, #20]
 800dd2a:	3331      	adds	r3, #49	; 0x31
 800dd2c:	9a02      	ldr	r2, [sp, #8]
 800dd2e:	7013      	strb	r3, [r2, #0]
 800dd30:	e775      	b.n	800dc1e <_dtoa_r+0x85e>
 800dd32:	4638      	mov	r0, r7
 800dd34:	e7b8      	b.n	800dca8 <_dtoa_r+0x8e8>
 800dd36:	2201      	movs	r2, #1
 800dd38:	e7e1      	b.n	800dcfe <_dtoa_r+0x93e>
 800dd3a:	f1ba 0f00 	cmp.w	sl, #0
 800dd3e:	db06      	blt.n	800dd4e <_dtoa_r+0x98e>
 800dd40:	9906      	ldr	r1, [sp, #24]
 800dd42:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd46:	9907      	ldr	r1, [sp, #28]
 800dd48:	ea5a 0a01 	orrs.w	sl, sl, r1
 800dd4c:	d120      	bne.n	800dd90 <_dtoa_r+0x9d0>
 800dd4e:	2a00      	cmp	r2, #0
 800dd50:	ddec      	ble.n	800dd2c <_dtoa_r+0x96c>
 800dd52:	4629      	mov	r1, r5
 800dd54:	2201      	movs	r2, #1
 800dd56:	4630      	mov	r0, r6
 800dd58:	9304      	str	r3, [sp, #16]
 800dd5a:	f000 fbad 	bl	800e4b8 <__lshift>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4605      	mov	r5, r0
 800dd62:	f000 fc15 	bl	800e590 <__mcmp>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	9b04      	ldr	r3, [sp, #16]
 800dd6a:	dc02      	bgt.n	800dd72 <_dtoa_r+0x9b2>
 800dd6c:	d1de      	bne.n	800dd2c <_dtoa_r+0x96c>
 800dd6e:	07da      	lsls	r2, r3, #31
 800dd70:	d5dc      	bpl.n	800dd2c <_dtoa_r+0x96c>
 800dd72:	2b39      	cmp	r3, #57	; 0x39
 800dd74:	d1d8      	bne.n	800dd28 <_dtoa_r+0x968>
 800dd76:	9a02      	ldr	r2, [sp, #8]
 800dd78:	2339      	movs	r3, #57	; 0x39
 800dd7a:	7013      	strb	r3, [r2, #0]
 800dd7c:	4643      	mov	r3, r8
 800dd7e:	4698      	mov	r8, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd86:	2a39      	cmp	r2, #57	; 0x39
 800dd88:	d051      	beq.n	800de2e <_dtoa_r+0xa6e>
 800dd8a:	3201      	adds	r2, #1
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	e746      	b.n	800dc1e <_dtoa_r+0x85e>
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	dd03      	ble.n	800dd9c <_dtoa_r+0x9dc>
 800dd94:	2b39      	cmp	r3, #57	; 0x39
 800dd96:	d0ee      	beq.n	800dd76 <_dtoa_r+0x9b6>
 800dd98:	3301      	adds	r3, #1
 800dd9a:	e7c7      	b.n	800dd2c <_dtoa_r+0x96c>
 800dd9c:	9a04      	ldr	r2, [sp, #16]
 800dd9e:	9908      	ldr	r1, [sp, #32]
 800dda0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dda4:	428a      	cmp	r2, r1
 800dda6:	d02b      	beq.n	800de00 <_dtoa_r+0xa40>
 800dda8:	4629      	mov	r1, r5
 800ddaa:	2300      	movs	r3, #0
 800ddac:	220a      	movs	r2, #10
 800ddae:	4630      	mov	r0, r6
 800ddb0:	f000 f9d4 	bl	800e15c <__multadd>
 800ddb4:	45b9      	cmp	r9, r7
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	f04f 0300 	mov.w	r3, #0
 800ddbc:	f04f 020a 	mov.w	r2, #10
 800ddc0:	4649      	mov	r1, r9
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	d107      	bne.n	800ddd6 <_dtoa_r+0xa16>
 800ddc6:	f000 f9c9 	bl	800e15c <__multadd>
 800ddca:	4681      	mov	r9, r0
 800ddcc:	4607      	mov	r7, r0
 800ddce:	9b04      	ldr	r3, [sp, #16]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	9304      	str	r3, [sp, #16]
 800ddd4:	e774      	b.n	800dcc0 <_dtoa_r+0x900>
 800ddd6:	f000 f9c1 	bl	800e15c <__multadd>
 800ddda:	4639      	mov	r1, r7
 800dddc:	4681      	mov	r9, r0
 800ddde:	2300      	movs	r3, #0
 800dde0:	220a      	movs	r2, #10
 800dde2:	4630      	mov	r0, r6
 800dde4:	f000 f9ba 	bl	800e15c <__multadd>
 800dde8:	4607      	mov	r7, r0
 800ddea:	e7f0      	b.n	800ddce <_dtoa_r+0xa0e>
 800ddec:	f1ba 0f00 	cmp.w	sl, #0
 800ddf0:	9a01      	ldr	r2, [sp, #4]
 800ddf2:	bfcc      	ite	gt
 800ddf4:	46d0      	movgt	r8, sl
 800ddf6:	f04f 0801 	movle.w	r8, #1
 800ddfa:	4490      	add	r8, r2
 800ddfc:	f04f 0900 	mov.w	r9, #0
 800de00:	4629      	mov	r1, r5
 800de02:	2201      	movs	r2, #1
 800de04:	4630      	mov	r0, r6
 800de06:	9302      	str	r3, [sp, #8]
 800de08:	f000 fb56 	bl	800e4b8 <__lshift>
 800de0c:	4621      	mov	r1, r4
 800de0e:	4605      	mov	r5, r0
 800de10:	f000 fbbe 	bl	800e590 <__mcmp>
 800de14:	2800      	cmp	r0, #0
 800de16:	dcb1      	bgt.n	800dd7c <_dtoa_r+0x9bc>
 800de18:	d102      	bne.n	800de20 <_dtoa_r+0xa60>
 800de1a:	9b02      	ldr	r3, [sp, #8]
 800de1c:	07db      	lsls	r3, r3, #31
 800de1e:	d4ad      	bmi.n	800dd7c <_dtoa_r+0x9bc>
 800de20:	4643      	mov	r3, r8
 800de22:	4698      	mov	r8, r3
 800de24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de28:	2a30      	cmp	r2, #48	; 0x30
 800de2a:	d0fa      	beq.n	800de22 <_dtoa_r+0xa62>
 800de2c:	e6f7      	b.n	800dc1e <_dtoa_r+0x85e>
 800de2e:	9a01      	ldr	r2, [sp, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	d1a4      	bne.n	800dd7e <_dtoa_r+0x9be>
 800de34:	f10b 0b01 	add.w	fp, fp, #1
 800de38:	2331      	movs	r3, #49	; 0x31
 800de3a:	e778      	b.n	800dd2e <_dtoa_r+0x96e>
 800de3c:	4b14      	ldr	r3, [pc, #80]	; (800de90 <_dtoa_r+0xad0>)
 800de3e:	f7ff bb2a 	b.w	800d496 <_dtoa_r+0xd6>
 800de42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de44:	2b00      	cmp	r3, #0
 800de46:	f47f ab05 	bne.w	800d454 <_dtoa_r+0x94>
 800de4a:	4b12      	ldr	r3, [pc, #72]	; (800de94 <_dtoa_r+0xad4>)
 800de4c:	f7ff bb23 	b.w	800d496 <_dtoa_r+0xd6>
 800de50:	f1ba 0f00 	cmp.w	sl, #0
 800de54:	dc03      	bgt.n	800de5e <_dtoa_r+0xa9e>
 800de56:	9b06      	ldr	r3, [sp, #24]
 800de58:	2b02      	cmp	r3, #2
 800de5a:	f73f aec8 	bgt.w	800dbee <_dtoa_r+0x82e>
 800de5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de62:	4621      	mov	r1, r4
 800de64:	4628      	mov	r0, r5
 800de66:	f7ff fa20 	bl	800d2aa <quorem>
 800de6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de6e:	f808 3b01 	strb.w	r3, [r8], #1
 800de72:	9a01      	ldr	r2, [sp, #4]
 800de74:	eba8 0202 	sub.w	r2, r8, r2
 800de78:	4592      	cmp	sl, r2
 800de7a:	ddb7      	ble.n	800ddec <_dtoa_r+0xa2c>
 800de7c:	4629      	mov	r1, r5
 800de7e:	2300      	movs	r3, #0
 800de80:	220a      	movs	r2, #10
 800de82:	4630      	mov	r0, r6
 800de84:	f000 f96a 	bl	800e15c <__multadd>
 800de88:	4605      	mov	r5, r0
 800de8a:	e7ea      	b.n	800de62 <_dtoa_r+0xaa2>
 800de8c:	0800f41c 	.word	0x0800f41c
 800de90:	0800f37c 	.word	0x0800f37c
 800de94:	0800f3a0 	.word	0x0800f3a0

0800de98 <_free_r>:
 800de98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de9a:	2900      	cmp	r1, #0
 800de9c:	d044      	beq.n	800df28 <_free_r+0x90>
 800de9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea2:	9001      	str	r0, [sp, #4]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f1a1 0404 	sub.w	r4, r1, #4
 800deaa:	bfb8      	it	lt
 800deac:	18e4      	addlt	r4, r4, r3
 800deae:	f000 f8e7 	bl	800e080 <__malloc_lock>
 800deb2:	4a1e      	ldr	r2, [pc, #120]	; (800df2c <_free_r+0x94>)
 800deb4:	9801      	ldr	r0, [sp, #4]
 800deb6:	6813      	ldr	r3, [r2, #0]
 800deb8:	b933      	cbnz	r3, 800dec8 <_free_r+0x30>
 800deba:	6063      	str	r3, [r4, #4]
 800debc:	6014      	str	r4, [r2, #0]
 800debe:	b003      	add	sp, #12
 800dec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dec4:	f000 b8e2 	b.w	800e08c <__malloc_unlock>
 800dec8:	42a3      	cmp	r3, r4
 800deca:	d908      	bls.n	800dede <_free_r+0x46>
 800decc:	6825      	ldr	r5, [r4, #0]
 800dece:	1961      	adds	r1, r4, r5
 800ded0:	428b      	cmp	r3, r1
 800ded2:	bf01      	itttt	eq
 800ded4:	6819      	ldreq	r1, [r3, #0]
 800ded6:	685b      	ldreq	r3, [r3, #4]
 800ded8:	1949      	addeq	r1, r1, r5
 800deda:	6021      	streq	r1, [r4, #0]
 800dedc:	e7ed      	b.n	800deba <_free_r+0x22>
 800dede:	461a      	mov	r2, r3
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	b10b      	cbz	r3, 800dee8 <_free_r+0x50>
 800dee4:	42a3      	cmp	r3, r4
 800dee6:	d9fa      	bls.n	800dede <_free_r+0x46>
 800dee8:	6811      	ldr	r1, [r2, #0]
 800deea:	1855      	adds	r5, r2, r1
 800deec:	42a5      	cmp	r5, r4
 800deee:	d10b      	bne.n	800df08 <_free_r+0x70>
 800def0:	6824      	ldr	r4, [r4, #0]
 800def2:	4421      	add	r1, r4
 800def4:	1854      	adds	r4, r2, r1
 800def6:	42a3      	cmp	r3, r4
 800def8:	6011      	str	r1, [r2, #0]
 800defa:	d1e0      	bne.n	800debe <_free_r+0x26>
 800defc:	681c      	ldr	r4, [r3, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	6053      	str	r3, [r2, #4]
 800df02:	440c      	add	r4, r1
 800df04:	6014      	str	r4, [r2, #0]
 800df06:	e7da      	b.n	800debe <_free_r+0x26>
 800df08:	d902      	bls.n	800df10 <_free_r+0x78>
 800df0a:	230c      	movs	r3, #12
 800df0c:	6003      	str	r3, [r0, #0]
 800df0e:	e7d6      	b.n	800debe <_free_r+0x26>
 800df10:	6825      	ldr	r5, [r4, #0]
 800df12:	1961      	adds	r1, r4, r5
 800df14:	428b      	cmp	r3, r1
 800df16:	bf04      	itt	eq
 800df18:	6819      	ldreq	r1, [r3, #0]
 800df1a:	685b      	ldreq	r3, [r3, #4]
 800df1c:	6063      	str	r3, [r4, #4]
 800df1e:	bf04      	itt	eq
 800df20:	1949      	addeq	r1, r1, r5
 800df22:	6021      	streq	r1, [r4, #0]
 800df24:	6054      	str	r4, [r2, #4]
 800df26:	e7ca      	b.n	800debe <_free_r+0x26>
 800df28:	b003      	add	sp, #12
 800df2a:	bd30      	pop	{r4, r5, pc}
 800df2c:	24000704 	.word	0x24000704

0800df30 <malloc>:
 800df30:	4b02      	ldr	r3, [pc, #8]	; (800df3c <malloc+0xc>)
 800df32:	4601      	mov	r1, r0
 800df34:	6818      	ldr	r0, [r3, #0]
 800df36:	f000 b823 	b.w	800df80 <_malloc_r>
 800df3a:	bf00      	nop
 800df3c:	24000068 	.word	0x24000068

0800df40 <sbrk_aligned>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	4e0e      	ldr	r6, [pc, #56]	; (800df7c <sbrk_aligned+0x3c>)
 800df44:	460c      	mov	r4, r1
 800df46:	6831      	ldr	r1, [r6, #0]
 800df48:	4605      	mov	r5, r0
 800df4a:	b911      	cbnz	r1, 800df52 <sbrk_aligned+0x12>
 800df4c:	f000 fe40 	bl	800ebd0 <_sbrk_r>
 800df50:	6030      	str	r0, [r6, #0]
 800df52:	4621      	mov	r1, r4
 800df54:	4628      	mov	r0, r5
 800df56:	f000 fe3b 	bl	800ebd0 <_sbrk_r>
 800df5a:	1c43      	adds	r3, r0, #1
 800df5c:	d00a      	beq.n	800df74 <sbrk_aligned+0x34>
 800df5e:	1cc4      	adds	r4, r0, #3
 800df60:	f024 0403 	bic.w	r4, r4, #3
 800df64:	42a0      	cmp	r0, r4
 800df66:	d007      	beq.n	800df78 <sbrk_aligned+0x38>
 800df68:	1a21      	subs	r1, r4, r0
 800df6a:	4628      	mov	r0, r5
 800df6c:	f000 fe30 	bl	800ebd0 <_sbrk_r>
 800df70:	3001      	adds	r0, #1
 800df72:	d101      	bne.n	800df78 <sbrk_aligned+0x38>
 800df74:	f04f 34ff 	mov.w	r4, #4294967295
 800df78:	4620      	mov	r0, r4
 800df7a:	bd70      	pop	{r4, r5, r6, pc}
 800df7c:	24000708 	.word	0x24000708

0800df80 <_malloc_r>:
 800df80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df84:	1ccd      	adds	r5, r1, #3
 800df86:	f025 0503 	bic.w	r5, r5, #3
 800df8a:	3508      	adds	r5, #8
 800df8c:	2d0c      	cmp	r5, #12
 800df8e:	bf38      	it	cc
 800df90:	250c      	movcc	r5, #12
 800df92:	2d00      	cmp	r5, #0
 800df94:	4607      	mov	r7, r0
 800df96:	db01      	blt.n	800df9c <_malloc_r+0x1c>
 800df98:	42a9      	cmp	r1, r5
 800df9a:	d905      	bls.n	800dfa8 <_malloc_r+0x28>
 800df9c:	230c      	movs	r3, #12
 800df9e:	603b      	str	r3, [r7, #0]
 800dfa0:	2600      	movs	r6, #0
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e07c <_malloc_r+0xfc>
 800dfac:	f000 f868 	bl	800e080 <__malloc_lock>
 800dfb0:	f8d8 3000 	ldr.w	r3, [r8]
 800dfb4:	461c      	mov	r4, r3
 800dfb6:	bb5c      	cbnz	r4, 800e010 <_malloc_r+0x90>
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7ff ffc0 	bl	800df40 <sbrk_aligned>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	d155      	bne.n	800e072 <_malloc_r+0xf2>
 800dfc6:	f8d8 4000 	ldr.w	r4, [r8]
 800dfca:	4626      	mov	r6, r4
 800dfcc:	2e00      	cmp	r6, #0
 800dfce:	d145      	bne.n	800e05c <_malloc_r+0xdc>
 800dfd0:	2c00      	cmp	r4, #0
 800dfd2:	d048      	beq.n	800e066 <_malloc_r+0xe6>
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	4638      	mov	r0, r7
 800dfda:	eb04 0903 	add.w	r9, r4, r3
 800dfde:	f000 fdf7 	bl	800ebd0 <_sbrk_r>
 800dfe2:	4581      	cmp	r9, r0
 800dfe4:	d13f      	bne.n	800e066 <_malloc_r+0xe6>
 800dfe6:	6821      	ldr	r1, [r4, #0]
 800dfe8:	1a6d      	subs	r5, r5, r1
 800dfea:	4629      	mov	r1, r5
 800dfec:	4638      	mov	r0, r7
 800dfee:	f7ff ffa7 	bl	800df40 <sbrk_aligned>
 800dff2:	3001      	adds	r0, #1
 800dff4:	d037      	beq.n	800e066 <_malloc_r+0xe6>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	442b      	add	r3, r5
 800dffa:	6023      	str	r3, [r4, #0]
 800dffc:	f8d8 3000 	ldr.w	r3, [r8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d038      	beq.n	800e076 <_malloc_r+0xf6>
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	42a2      	cmp	r2, r4
 800e008:	d12b      	bne.n	800e062 <_malloc_r+0xe2>
 800e00a:	2200      	movs	r2, #0
 800e00c:	605a      	str	r2, [r3, #4]
 800e00e:	e00f      	b.n	800e030 <_malloc_r+0xb0>
 800e010:	6822      	ldr	r2, [r4, #0]
 800e012:	1b52      	subs	r2, r2, r5
 800e014:	d41f      	bmi.n	800e056 <_malloc_r+0xd6>
 800e016:	2a0b      	cmp	r2, #11
 800e018:	d917      	bls.n	800e04a <_malloc_r+0xca>
 800e01a:	1961      	adds	r1, r4, r5
 800e01c:	42a3      	cmp	r3, r4
 800e01e:	6025      	str	r5, [r4, #0]
 800e020:	bf18      	it	ne
 800e022:	6059      	strne	r1, [r3, #4]
 800e024:	6863      	ldr	r3, [r4, #4]
 800e026:	bf08      	it	eq
 800e028:	f8c8 1000 	streq.w	r1, [r8]
 800e02c:	5162      	str	r2, [r4, r5]
 800e02e:	604b      	str	r3, [r1, #4]
 800e030:	4638      	mov	r0, r7
 800e032:	f104 060b 	add.w	r6, r4, #11
 800e036:	f000 f829 	bl	800e08c <__malloc_unlock>
 800e03a:	f026 0607 	bic.w	r6, r6, #7
 800e03e:	1d23      	adds	r3, r4, #4
 800e040:	1af2      	subs	r2, r6, r3
 800e042:	d0ae      	beq.n	800dfa2 <_malloc_r+0x22>
 800e044:	1b9b      	subs	r3, r3, r6
 800e046:	50a3      	str	r3, [r4, r2]
 800e048:	e7ab      	b.n	800dfa2 <_malloc_r+0x22>
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	6862      	ldr	r2, [r4, #4]
 800e04e:	d1dd      	bne.n	800e00c <_malloc_r+0x8c>
 800e050:	f8c8 2000 	str.w	r2, [r8]
 800e054:	e7ec      	b.n	800e030 <_malloc_r+0xb0>
 800e056:	4623      	mov	r3, r4
 800e058:	6864      	ldr	r4, [r4, #4]
 800e05a:	e7ac      	b.n	800dfb6 <_malloc_r+0x36>
 800e05c:	4634      	mov	r4, r6
 800e05e:	6876      	ldr	r6, [r6, #4]
 800e060:	e7b4      	b.n	800dfcc <_malloc_r+0x4c>
 800e062:	4613      	mov	r3, r2
 800e064:	e7cc      	b.n	800e000 <_malloc_r+0x80>
 800e066:	230c      	movs	r3, #12
 800e068:	603b      	str	r3, [r7, #0]
 800e06a:	4638      	mov	r0, r7
 800e06c:	f000 f80e 	bl	800e08c <__malloc_unlock>
 800e070:	e797      	b.n	800dfa2 <_malloc_r+0x22>
 800e072:	6025      	str	r5, [r4, #0]
 800e074:	e7dc      	b.n	800e030 <_malloc_r+0xb0>
 800e076:	605b      	str	r3, [r3, #4]
 800e078:	deff      	udf	#255	; 0xff
 800e07a:	bf00      	nop
 800e07c:	24000704 	.word	0x24000704

0800e080 <__malloc_lock>:
 800e080:	4801      	ldr	r0, [pc, #4]	; (800e088 <__malloc_lock+0x8>)
 800e082:	f7ff b902 	b.w	800d28a <__retarget_lock_acquire_recursive>
 800e086:	bf00      	nop
 800e088:	24000700 	.word	0x24000700

0800e08c <__malloc_unlock>:
 800e08c:	4801      	ldr	r0, [pc, #4]	; (800e094 <__malloc_unlock+0x8>)
 800e08e:	f7ff b8fd 	b.w	800d28c <__retarget_lock_release_recursive>
 800e092:	bf00      	nop
 800e094:	24000700 	.word	0x24000700

0800e098 <_Balloc>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	69c6      	ldr	r6, [r0, #28]
 800e09c:	4604      	mov	r4, r0
 800e09e:	460d      	mov	r5, r1
 800e0a0:	b976      	cbnz	r6, 800e0c0 <_Balloc+0x28>
 800e0a2:	2010      	movs	r0, #16
 800e0a4:	f7ff ff44 	bl	800df30 <malloc>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	61e0      	str	r0, [r4, #28]
 800e0ac:	b920      	cbnz	r0, 800e0b8 <_Balloc+0x20>
 800e0ae:	4b18      	ldr	r3, [pc, #96]	; (800e110 <_Balloc+0x78>)
 800e0b0:	4818      	ldr	r0, [pc, #96]	; (800e114 <_Balloc+0x7c>)
 800e0b2:	216b      	movs	r1, #107	; 0x6b
 800e0b4:	f000 fd9c 	bl	800ebf0 <__assert_func>
 800e0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0bc:	6006      	str	r6, [r0, #0]
 800e0be:	60c6      	str	r6, [r0, #12]
 800e0c0:	69e6      	ldr	r6, [r4, #28]
 800e0c2:	68f3      	ldr	r3, [r6, #12]
 800e0c4:	b183      	cbz	r3, 800e0e8 <_Balloc+0x50>
 800e0c6:	69e3      	ldr	r3, [r4, #28]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0ce:	b9b8      	cbnz	r0, 800e100 <_Balloc+0x68>
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e0d6:	1d72      	adds	r2, r6, #5
 800e0d8:	0092      	lsls	r2, r2, #2
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f000 fda6 	bl	800ec2c <_calloc_r>
 800e0e0:	b160      	cbz	r0, 800e0fc <_Balloc+0x64>
 800e0e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0e6:	e00e      	b.n	800e106 <_Balloc+0x6e>
 800e0e8:	2221      	movs	r2, #33	; 0x21
 800e0ea:	2104      	movs	r1, #4
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f000 fd9d 	bl	800ec2c <_calloc_r>
 800e0f2:	69e3      	ldr	r3, [r4, #28]
 800e0f4:	60f0      	str	r0, [r6, #12]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1e4      	bne.n	800e0c6 <_Balloc+0x2e>
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}
 800e100:	6802      	ldr	r2, [r0, #0]
 800e102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e106:	2300      	movs	r3, #0
 800e108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e10c:	e7f7      	b.n	800e0fe <_Balloc+0x66>
 800e10e:	bf00      	nop
 800e110:	0800f3ad 	.word	0x0800f3ad
 800e114:	0800f42d 	.word	0x0800f42d

0800e118 <_Bfree>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	69c6      	ldr	r6, [r0, #28]
 800e11c:	4605      	mov	r5, r0
 800e11e:	460c      	mov	r4, r1
 800e120:	b976      	cbnz	r6, 800e140 <_Bfree+0x28>
 800e122:	2010      	movs	r0, #16
 800e124:	f7ff ff04 	bl	800df30 <malloc>
 800e128:	4602      	mov	r2, r0
 800e12a:	61e8      	str	r0, [r5, #28]
 800e12c:	b920      	cbnz	r0, 800e138 <_Bfree+0x20>
 800e12e:	4b09      	ldr	r3, [pc, #36]	; (800e154 <_Bfree+0x3c>)
 800e130:	4809      	ldr	r0, [pc, #36]	; (800e158 <_Bfree+0x40>)
 800e132:	218f      	movs	r1, #143	; 0x8f
 800e134:	f000 fd5c 	bl	800ebf0 <__assert_func>
 800e138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e13c:	6006      	str	r6, [r0, #0]
 800e13e:	60c6      	str	r6, [r0, #12]
 800e140:	b13c      	cbz	r4, 800e152 <_Bfree+0x3a>
 800e142:	69eb      	ldr	r3, [r5, #28]
 800e144:	6862      	ldr	r2, [r4, #4]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e14c:	6021      	str	r1, [r4, #0]
 800e14e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e152:	bd70      	pop	{r4, r5, r6, pc}
 800e154:	0800f3ad 	.word	0x0800f3ad
 800e158:	0800f42d 	.word	0x0800f42d

0800e15c <__multadd>:
 800e15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e160:	690d      	ldr	r5, [r1, #16]
 800e162:	4607      	mov	r7, r0
 800e164:	460c      	mov	r4, r1
 800e166:	461e      	mov	r6, r3
 800e168:	f101 0c14 	add.w	ip, r1, #20
 800e16c:	2000      	movs	r0, #0
 800e16e:	f8dc 3000 	ldr.w	r3, [ip]
 800e172:	b299      	uxth	r1, r3
 800e174:	fb02 6101 	mla	r1, r2, r1, r6
 800e178:	0c1e      	lsrs	r6, r3, #16
 800e17a:	0c0b      	lsrs	r3, r1, #16
 800e17c:	fb02 3306 	mla	r3, r2, r6, r3
 800e180:	b289      	uxth	r1, r1
 800e182:	3001      	adds	r0, #1
 800e184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e188:	4285      	cmp	r5, r0
 800e18a:	f84c 1b04 	str.w	r1, [ip], #4
 800e18e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e192:	dcec      	bgt.n	800e16e <__multadd+0x12>
 800e194:	b30e      	cbz	r6, 800e1da <__multadd+0x7e>
 800e196:	68a3      	ldr	r3, [r4, #8]
 800e198:	42ab      	cmp	r3, r5
 800e19a:	dc19      	bgt.n	800e1d0 <__multadd+0x74>
 800e19c:	6861      	ldr	r1, [r4, #4]
 800e19e:	4638      	mov	r0, r7
 800e1a0:	3101      	adds	r1, #1
 800e1a2:	f7ff ff79 	bl	800e098 <_Balloc>
 800e1a6:	4680      	mov	r8, r0
 800e1a8:	b928      	cbnz	r0, 800e1b6 <__multadd+0x5a>
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	4b0c      	ldr	r3, [pc, #48]	; (800e1e0 <__multadd+0x84>)
 800e1ae:	480d      	ldr	r0, [pc, #52]	; (800e1e4 <__multadd+0x88>)
 800e1b0:	21ba      	movs	r1, #186	; 0xba
 800e1b2:	f000 fd1d 	bl	800ebf0 <__assert_func>
 800e1b6:	6922      	ldr	r2, [r4, #16]
 800e1b8:	3202      	adds	r2, #2
 800e1ba:	f104 010c 	add.w	r1, r4, #12
 800e1be:	0092      	lsls	r2, r2, #2
 800e1c0:	300c      	adds	r0, #12
 800e1c2:	f7ff f864 	bl	800d28e <memcpy>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f7ff ffa5 	bl	800e118 <_Bfree>
 800e1ce:	4644      	mov	r4, r8
 800e1d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	615e      	str	r6, [r3, #20]
 800e1d8:	6125      	str	r5, [r4, #16]
 800e1da:	4620      	mov	r0, r4
 800e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e0:	0800f41c 	.word	0x0800f41c
 800e1e4:	0800f42d 	.word	0x0800f42d

0800e1e8 <__hi0bits>:
 800e1e8:	0c03      	lsrs	r3, r0, #16
 800e1ea:	041b      	lsls	r3, r3, #16
 800e1ec:	b9d3      	cbnz	r3, 800e224 <__hi0bits+0x3c>
 800e1ee:	0400      	lsls	r0, r0, #16
 800e1f0:	2310      	movs	r3, #16
 800e1f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1f6:	bf04      	itt	eq
 800e1f8:	0200      	lsleq	r0, r0, #8
 800e1fa:	3308      	addeq	r3, #8
 800e1fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e200:	bf04      	itt	eq
 800e202:	0100      	lsleq	r0, r0, #4
 800e204:	3304      	addeq	r3, #4
 800e206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e20a:	bf04      	itt	eq
 800e20c:	0080      	lsleq	r0, r0, #2
 800e20e:	3302      	addeq	r3, #2
 800e210:	2800      	cmp	r0, #0
 800e212:	db05      	blt.n	800e220 <__hi0bits+0x38>
 800e214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e218:	f103 0301 	add.w	r3, r3, #1
 800e21c:	bf08      	it	eq
 800e21e:	2320      	moveq	r3, #32
 800e220:	4618      	mov	r0, r3
 800e222:	4770      	bx	lr
 800e224:	2300      	movs	r3, #0
 800e226:	e7e4      	b.n	800e1f2 <__hi0bits+0xa>

0800e228 <__lo0bits>:
 800e228:	6803      	ldr	r3, [r0, #0]
 800e22a:	f013 0207 	ands.w	r2, r3, #7
 800e22e:	d00c      	beq.n	800e24a <__lo0bits+0x22>
 800e230:	07d9      	lsls	r1, r3, #31
 800e232:	d422      	bmi.n	800e27a <__lo0bits+0x52>
 800e234:	079a      	lsls	r2, r3, #30
 800e236:	bf49      	itett	mi
 800e238:	085b      	lsrmi	r3, r3, #1
 800e23a:	089b      	lsrpl	r3, r3, #2
 800e23c:	6003      	strmi	r3, [r0, #0]
 800e23e:	2201      	movmi	r2, #1
 800e240:	bf5c      	itt	pl
 800e242:	6003      	strpl	r3, [r0, #0]
 800e244:	2202      	movpl	r2, #2
 800e246:	4610      	mov	r0, r2
 800e248:	4770      	bx	lr
 800e24a:	b299      	uxth	r1, r3
 800e24c:	b909      	cbnz	r1, 800e252 <__lo0bits+0x2a>
 800e24e:	0c1b      	lsrs	r3, r3, #16
 800e250:	2210      	movs	r2, #16
 800e252:	b2d9      	uxtb	r1, r3
 800e254:	b909      	cbnz	r1, 800e25a <__lo0bits+0x32>
 800e256:	3208      	adds	r2, #8
 800e258:	0a1b      	lsrs	r3, r3, #8
 800e25a:	0719      	lsls	r1, r3, #28
 800e25c:	bf04      	itt	eq
 800e25e:	091b      	lsreq	r3, r3, #4
 800e260:	3204      	addeq	r2, #4
 800e262:	0799      	lsls	r1, r3, #30
 800e264:	bf04      	itt	eq
 800e266:	089b      	lsreq	r3, r3, #2
 800e268:	3202      	addeq	r2, #2
 800e26a:	07d9      	lsls	r1, r3, #31
 800e26c:	d403      	bmi.n	800e276 <__lo0bits+0x4e>
 800e26e:	085b      	lsrs	r3, r3, #1
 800e270:	f102 0201 	add.w	r2, r2, #1
 800e274:	d003      	beq.n	800e27e <__lo0bits+0x56>
 800e276:	6003      	str	r3, [r0, #0]
 800e278:	e7e5      	b.n	800e246 <__lo0bits+0x1e>
 800e27a:	2200      	movs	r2, #0
 800e27c:	e7e3      	b.n	800e246 <__lo0bits+0x1e>
 800e27e:	2220      	movs	r2, #32
 800e280:	e7e1      	b.n	800e246 <__lo0bits+0x1e>
	...

0800e284 <__i2b>:
 800e284:	b510      	push	{r4, lr}
 800e286:	460c      	mov	r4, r1
 800e288:	2101      	movs	r1, #1
 800e28a:	f7ff ff05 	bl	800e098 <_Balloc>
 800e28e:	4602      	mov	r2, r0
 800e290:	b928      	cbnz	r0, 800e29e <__i2b+0x1a>
 800e292:	4b05      	ldr	r3, [pc, #20]	; (800e2a8 <__i2b+0x24>)
 800e294:	4805      	ldr	r0, [pc, #20]	; (800e2ac <__i2b+0x28>)
 800e296:	f240 1145 	movw	r1, #325	; 0x145
 800e29a:	f000 fca9 	bl	800ebf0 <__assert_func>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	6144      	str	r4, [r0, #20]
 800e2a2:	6103      	str	r3, [r0, #16]
 800e2a4:	bd10      	pop	{r4, pc}
 800e2a6:	bf00      	nop
 800e2a8:	0800f41c 	.word	0x0800f41c
 800e2ac:	0800f42d 	.word	0x0800f42d

0800e2b0 <__multiply>:
 800e2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b4:	4691      	mov	r9, r2
 800e2b6:	690a      	ldr	r2, [r1, #16]
 800e2b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	bfb8      	it	lt
 800e2c0:	460b      	movlt	r3, r1
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	bfbc      	itt	lt
 800e2c6:	464c      	movlt	r4, r9
 800e2c8:	4699      	movlt	r9, r3
 800e2ca:	6927      	ldr	r7, [r4, #16]
 800e2cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	6861      	ldr	r1, [r4, #4]
 800e2d4:	eb07 060a 	add.w	r6, r7, sl
 800e2d8:	42b3      	cmp	r3, r6
 800e2da:	b085      	sub	sp, #20
 800e2dc:	bfb8      	it	lt
 800e2de:	3101      	addlt	r1, #1
 800e2e0:	f7ff feda 	bl	800e098 <_Balloc>
 800e2e4:	b930      	cbnz	r0, 800e2f4 <__multiply+0x44>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	4b44      	ldr	r3, [pc, #272]	; (800e3fc <__multiply+0x14c>)
 800e2ea:	4845      	ldr	r0, [pc, #276]	; (800e400 <__multiply+0x150>)
 800e2ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e2f0:	f000 fc7e 	bl	800ebf0 <__assert_func>
 800e2f4:	f100 0514 	add.w	r5, r0, #20
 800e2f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2fc:	462b      	mov	r3, r5
 800e2fe:	2200      	movs	r2, #0
 800e300:	4543      	cmp	r3, r8
 800e302:	d321      	bcc.n	800e348 <__multiply+0x98>
 800e304:	f104 0314 	add.w	r3, r4, #20
 800e308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e30c:	f109 0314 	add.w	r3, r9, #20
 800e310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e314:	9202      	str	r2, [sp, #8]
 800e316:	1b3a      	subs	r2, r7, r4
 800e318:	3a15      	subs	r2, #21
 800e31a:	f022 0203 	bic.w	r2, r2, #3
 800e31e:	3204      	adds	r2, #4
 800e320:	f104 0115 	add.w	r1, r4, #21
 800e324:	428f      	cmp	r7, r1
 800e326:	bf38      	it	cc
 800e328:	2204      	movcc	r2, #4
 800e32a:	9201      	str	r2, [sp, #4]
 800e32c:	9a02      	ldr	r2, [sp, #8]
 800e32e:	9303      	str	r3, [sp, #12]
 800e330:	429a      	cmp	r2, r3
 800e332:	d80c      	bhi.n	800e34e <__multiply+0x9e>
 800e334:	2e00      	cmp	r6, #0
 800e336:	dd03      	ble.n	800e340 <__multiply+0x90>
 800e338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d05b      	beq.n	800e3f8 <__multiply+0x148>
 800e340:	6106      	str	r6, [r0, #16]
 800e342:	b005      	add	sp, #20
 800e344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e348:	f843 2b04 	str.w	r2, [r3], #4
 800e34c:	e7d8      	b.n	800e300 <__multiply+0x50>
 800e34e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e352:	f1ba 0f00 	cmp.w	sl, #0
 800e356:	d024      	beq.n	800e3a2 <__multiply+0xf2>
 800e358:	f104 0e14 	add.w	lr, r4, #20
 800e35c:	46a9      	mov	r9, r5
 800e35e:	f04f 0c00 	mov.w	ip, #0
 800e362:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e366:	f8d9 1000 	ldr.w	r1, [r9]
 800e36a:	fa1f fb82 	uxth.w	fp, r2
 800e36e:	b289      	uxth	r1, r1
 800e370:	fb0a 110b 	mla	r1, sl, fp, r1
 800e374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e378:	f8d9 2000 	ldr.w	r2, [r9]
 800e37c:	4461      	add	r1, ip
 800e37e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e382:	fb0a c20b 	mla	r2, sl, fp, ip
 800e386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e38a:	b289      	uxth	r1, r1
 800e38c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e390:	4577      	cmp	r7, lr
 800e392:	f849 1b04 	str.w	r1, [r9], #4
 800e396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e39a:	d8e2      	bhi.n	800e362 <__multiply+0xb2>
 800e39c:	9a01      	ldr	r2, [sp, #4]
 800e39e:	f845 c002 	str.w	ip, [r5, r2]
 800e3a2:	9a03      	ldr	r2, [sp, #12]
 800e3a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3a8:	3304      	adds	r3, #4
 800e3aa:	f1b9 0f00 	cmp.w	r9, #0
 800e3ae:	d021      	beq.n	800e3f4 <__multiply+0x144>
 800e3b0:	6829      	ldr	r1, [r5, #0]
 800e3b2:	f104 0c14 	add.w	ip, r4, #20
 800e3b6:	46ae      	mov	lr, r5
 800e3b8:	f04f 0a00 	mov.w	sl, #0
 800e3bc:	f8bc b000 	ldrh.w	fp, [ip]
 800e3c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3c4:	fb09 220b 	mla	r2, r9, fp, r2
 800e3c8:	4452      	add	r2, sl
 800e3ca:	b289      	uxth	r1, r1
 800e3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3d0:	f84e 1b04 	str.w	r1, [lr], #4
 800e3d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e3d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3dc:	f8be 1000 	ldrh.w	r1, [lr]
 800e3e0:	fb09 110a 	mla	r1, r9, sl, r1
 800e3e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e3e8:	4567      	cmp	r7, ip
 800e3ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3ee:	d8e5      	bhi.n	800e3bc <__multiply+0x10c>
 800e3f0:	9a01      	ldr	r2, [sp, #4]
 800e3f2:	50a9      	str	r1, [r5, r2]
 800e3f4:	3504      	adds	r5, #4
 800e3f6:	e799      	b.n	800e32c <__multiply+0x7c>
 800e3f8:	3e01      	subs	r6, #1
 800e3fa:	e79b      	b.n	800e334 <__multiply+0x84>
 800e3fc:	0800f41c 	.word	0x0800f41c
 800e400:	0800f42d 	.word	0x0800f42d

0800e404 <__pow5mult>:
 800e404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e408:	4615      	mov	r5, r2
 800e40a:	f012 0203 	ands.w	r2, r2, #3
 800e40e:	4606      	mov	r6, r0
 800e410:	460f      	mov	r7, r1
 800e412:	d007      	beq.n	800e424 <__pow5mult+0x20>
 800e414:	4c25      	ldr	r4, [pc, #148]	; (800e4ac <__pow5mult+0xa8>)
 800e416:	3a01      	subs	r2, #1
 800e418:	2300      	movs	r3, #0
 800e41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e41e:	f7ff fe9d 	bl	800e15c <__multadd>
 800e422:	4607      	mov	r7, r0
 800e424:	10ad      	asrs	r5, r5, #2
 800e426:	d03d      	beq.n	800e4a4 <__pow5mult+0xa0>
 800e428:	69f4      	ldr	r4, [r6, #28]
 800e42a:	b97c      	cbnz	r4, 800e44c <__pow5mult+0x48>
 800e42c:	2010      	movs	r0, #16
 800e42e:	f7ff fd7f 	bl	800df30 <malloc>
 800e432:	4602      	mov	r2, r0
 800e434:	61f0      	str	r0, [r6, #28]
 800e436:	b928      	cbnz	r0, 800e444 <__pow5mult+0x40>
 800e438:	4b1d      	ldr	r3, [pc, #116]	; (800e4b0 <__pow5mult+0xac>)
 800e43a:	481e      	ldr	r0, [pc, #120]	; (800e4b4 <__pow5mult+0xb0>)
 800e43c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e440:	f000 fbd6 	bl	800ebf0 <__assert_func>
 800e444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e448:	6004      	str	r4, [r0, #0]
 800e44a:	60c4      	str	r4, [r0, #12]
 800e44c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e454:	b94c      	cbnz	r4, 800e46a <__pow5mult+0x66>
 800e456:	f240 2171 	movw	r1, #625	; 0x271
 800e45a:	4630      	mov	r0, r6
 800e45c:	f7ff ff12 	bl	800e284 <__i2b>
 800e460:	2300      	movs	r3, #0
 800e462:	f8c8 0008 	str.w	r0, [r8, #8]
 800e466:	4604      	mov	r4, r0
 800e468:	6003      	str	r3, [r0, #0]
 800e46a:	f04f 0900 	mov.w	r9, #0
 800e46e:	07eb      	lsls	r3, r5, #31
 800e470:	d50a      	bpl.n	800e488 <__pow5mult+0x84>
 800e472:	4639      	mov	r1, r7
 800e474:	4622      	mov	r2, r4
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff1a 	bl	800e2b0 <__multiply>
 800e47c:	4639      	mov	r1, r7
 800e47e:	4680      	mov	r8, r0
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff fe49 	bl	800e118 <_Bfree>
 800e486:	4647      	mov	r7, r8
 800e488:	106d      	asrs	r5, r5, #1
 800e48a:	d00b      	beq.n	800e4a4 <__pow5mult+0xa0>
 800e48c:	6820      	ldr	r0, [r4, #0]
 800e48e:	b938      	cbnz	r0, 800e4a0 <__pow5mult+0x9c>
 800e490:	4622      	mov	r2, r4
 800e492:	4621      	mov	r1, r4
 800e494:	4630      	mov	r0, r6
 800e496:	f7ff ff0b 	bl	800e2b0 <__multiply>
 800e49a:	6020      	str	r0, [r4, #0]
 800e49c:	f8c0 9000 	str.w	r9, [r0]
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	e7e4      	b.n	800e46e <__pow5mult+0x6a>
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0800f578 	.word	0x0800f578
 800e4b0:	0800f3ad 	.word	0x0800f3ad
 800e4b4:	0800f42d 	.word	0x0800f42d

0800e4b8 <__lshift>:
 800e4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4bc:	460c      	mov	r4, r1
 800e4be:	6849      	ldr	r1, [r1, #4]
 800e4c0:	6923      	ldr	r3, [r4, #16]
 800e4c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4c6:	68a3      	ldr	r3, [r4, #8]
 800e4c8:	4607      	mov	r7, r0
 800e4ca:	4691      	mov	r9, r2
 800e4cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4d0:	f108 0601 	add.w	r6, r8, #1
 800e4d4:	42b3      	cmp	r3, r6
 800e4d6:	db0b      	blt.n	800e4f0 <__lshift+0x38>
 800e4d8:	4638      	mov	r0, r7
 800e4da:	f7ff fddd 	bl	800e098 <_Balloc>
 800e4de:	4605      	mov	r5, r0
 800e4e0:	b948      	cbnz	r0, 800e4f6 <__lshift+0x3e>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	4b28      	ldr	r3, [pc, #160]	; (800e588 <__lshift+0xd0>)
 800e4e6:	4829      	ldr	r0, [pc, #164]	; (800e58c <__lshift+0xd4>)
 800e4e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e4ec:	f000 fb80 	bl	800ebf0 <__assert_func>
 800e4f0:	3101      	adds	r1, #1
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	e7ee      	b.n	800e4d4 <__lshift+0x1c>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	f100 0114 	add.w	r1, r0, #20
 800e4fc:	f100 0210 	add.w	r2, r0, #16
 800e500:	4618      	mov	r0, r3
 800e502:	4553      	cmp	r3, sl
 800e504:	db33      	blt.n	800e56e <__lshift+0xb6>
 800e506:	6920      	ldr	r0, [r4, #16]
 800e508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e50c:	f104 0314 	add.w	r3, r4, #20
 800e510:	f019 091f 	ands.w	r9, r9, #31
 800e514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e51c:	d02b      	beq.n	800e576 <__lshift+0xbe>
 800e51e:	f1c9 0e20 	rsb	lr, r9, #32
 800e522:	468a      	mov	sl, r1
 800e524:	2200      	movs	r2, #0
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	fa00 f009 	lsl.w	r0, r0, r9
 800e52c:	4310      	orrs	r0, r2
 800e52e:	f84a 0b04 	str.w	r0, [sl], #4
 800e532:	f853 2b04 	ldr.w	r2, [r3], #4
 800e536:	459c      	cmp	ip, r3
 800e538:	fa22 f20e 	lsr.w	r2, r2, lr
 800e53c:	d8f3      	bhi.n	800e526 <__lshift+0x6e>
 800e53e:	ebac 0304 	sub.w	r3, ip, r4
 800e542:	3b15      	subs	r3, #21
 800e544:	f023 0303 	bic.w	r3, r3, #3
 800e548:	3304      	adds	r3, #4
 800e54a:	f104 0015 	add.w	r0, r4, #21
 800e54e:	4584      	cmp	ip, r0
 800e550:	bf38      	it	cc
 800e552:	2304      	movcc	r3, #4
 800e554:	50ca      	str	r2, [r1, r3]
 800e556:	b10a      	cbz	r2, 800e55c <__lshift+0xa4>
 800e558:	f108 0602 	add.w	r6, r8, #2
 800e55c:	3e01      	subs	r6, #1
 800e55e:	4638      	mov	r0, r7
 800e560:	612e      	str	r6, [r5, #16]
 800e562:	4621      	mov	r1, r4
 800e564:	f7ff fdd8 	bl	800e118 <_Bfree>
 800e568:	4628      	mov	r0, r5
 800e56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e572:	3301      	adds	r3, #1
 800e574:	e7c5      	b.n	800e502 <__lshift+0x4a>
 800e576:	3904      	subs	r1, #4
 800e578:	f853 2b04 	ldr.w	r2, [r3], #4
 800e57c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e580:	459c      	cmp	ip, r3
 800e582:	d8f9      	bhi.n	800e578 <__lshift+0xc0>
 800e584:	e7ea      	b.n	800e55c <__lshift+0xa4>
 800e586:	bf00      	nop
 800e588:	0800f41c 	.word	0x0800f41c
 800e58c:	0800f42d 	.word	0x0800f42d

0800e590 <__mcmp>:
 800e590:	b530      	push	{r4, r5, lr}
 800e592:	6902      	ldr	r2, [r0, #16]
 800e594:	690c      	ldr	r4, [r1, #16]
 800e596:	1b12      	subs	r2, r2, r4
 800e598:	d10e      	bne.n	800e5b8 <__mcmp+0x28>
 800e59a:	f100 0314 	add.w	r3, r0, #20
 800e59e:	3114      	adds	r1, #20
 800e5a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5b0:	42a5      	cmp	r5, r4
 800e5b2:	d003      	beq.n	800e5bc <__mcmp+0x2c>
 800e5b4:	d305      	bcc.n	800e5c2 <__mcmp+0x32>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	4610      	mov	r0, r2
 800e5ba:	bd30      	pop	{r4, r5, pc}
 800e5bc:	4283      	cmp	r3, r0
 800e5be:	d3f3      	bcc.n	800e5a8 <__mcmp+0x18>
 800e5c0:	e7fa      	b.n	800e5b8 <__mcmp+0x28>
 800e5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c6:	e7f7      	b.n	800e5b8 <__mcmp+0x28>

0800e5c8 <__mdiff>:
 800e5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4690      	mov	r8, r2
 800e5d6:	f7ff ffdb 	bl	800e590 <__mcmp>
 800e5da:	1e05      	subs	r5, r0, #0
 800e5dc:	d110      	bne.n	800e600 <__mdiff+0x38>
 800e5de:	4629      	mov	r1, r5
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7ff fd59 	bl	800e098 <_Balloc>
 800e5e6:	b930      	cbnz	r0, 800e5f6 <__mdiff+0x2e>
 800e5e8:	4b3a      	ldr	r3, [pc, #232]	; (800e6d4 <__mdiff+0x10c>)
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	f240 2137 	movw	r1, #567	; 0x237
 800e5f0:	4839      	ldr	r0, [pc, #228]	; (800e6d8 <__mdiff+0x110>)
 800e5f2:	f000 fafd 	bl	800ebf0 <__assert_func>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e600:	bfa4      	itt	ge
 800e602:	4643      	movge	r3, r8
 800e604:	46a0      	movge	r8, r4
 800e606:	4630      	mov	r0, r6
 800e608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e60c:	bfa6      	itte	ge
 800e60e:	461c      	movge	r4, r3
 800e610:	2500      	movge	r5, #0
 800e612:	2501      	movlt	r5, #1
 800e614:	f7ff fd40 	bl	800e098 <_Balloc>
 800e618:	b920      	cbnz	r0, 800e624 <__mdiff+0x5c>
 800e61a:	4b2e      	ldr	r3, [pc, #184]	; (800e6d4 <__mdiff+0x10c>)
 800e61c:	4602      	mov	r2, r0
 800e61e:	f240 2145 	movw	r1, #581	; 0x245
 800e622:	e7e5      	b.n	800e5f0 <__mdiff+0x28>
 800e624:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e628:	6926      	ldr	r6, [r4, #16]
 800e62a:	60c5      	str	r5, [r0, #12]
 800e62c:	f104 0914 	add.w	r9, r4, #20
 800e630:	f108 0514 	add.w	r5, r8, #20
 800e634:	f100 0e14 	add.w	lr, r0, #20
 800e638:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e63c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e640:	f108 0210 	add.w	r2, r8, #16
 800e644:	46f2      	mov	sl, lr
 800e646:	2100      	movs	r1, #0
 800e648:	f859 3b04 	ldr.w	r3, [r9], #4
 800e64c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e650:	fa11 f88b 	uxtah	r8, r1, fp
 800e654:	b299      	uxth	r1, r3
 800e656:	0c1b      	lsrs	r3, r3, #16
 800e658:	eba8 0801 	sub.w	r8, r8, r1
 800e65c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e660:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e664:	fa1f f888 	uxth.w	r8, r8
 800e668:	1419      	asrs	r1, r3, #16
 800e66a:	454e      	cmp	r6, r9
 800e66c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e670:	f84a 3b04 	str.w	r3, [sl], #4
 800e674:	d8e8      	bhi.n	800e648 <__mdiff+0x80>
 800e676:	1b33      	subs	r3, r6, r4
 800e678:	3b15      	subs	r3, #21
 800e67a:	f023 0303 	bic.w	r3, r3, #3
 800e67e:	3304      	adds	r3, #4
 800e680:	3415      	adds	r4, #21
 800e682:	42a6      	cmp	r6, r4
 800e684:	bf38      	it	cc
 800e686:	2304      	movcc	r3, #4
 800e688:	441d      	add	r5, r3
 800e68a:	4473      	add	r3, lr
 800e68c:	469e      	mov	lr, r3
 800e68e:	462e      	mov	r6, r5
 800e690:	4566      	cmp	r6, ip
 800e692:	d30e      	bcc.n	800e6b2 <__mdiff+0xea>
 800e694:	f10c 0203 	add.w	r2, ip, #3
 800e698:	1b52      	subs	r2, r2, r5
 800e69a:	f022 0203 	bic.w	r2, r2, #3
 800e69e:	3d03      	subs	r5, #3
 800e6a0:	45ac      	cmp	ip, r5
 800e6a2:	bf38      	it	cc
 800e6a4:	2200      	movcc	r2, #0
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e6ac:	b17a      	cbz	r2, 800e6ce <__mdiff+0x106>
 800e6ae:	6107      	str	r7, [r0, #16]
 800e6b0:	e7a4      	b.n	800e5fc <__mdiff+0x34>
 800e6b2:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6b6:	fa11 f288 	uxtah	r2, r1, r8
 800e6ba:	1414      	asrs	r4, r2, #16
 800e6bc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6c0:	b292      	uxth	r2, r2
 800e6c2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6c6:	f84e 2b04 	str.w	r2, [lr], #4
 800e6ca:	1421      	asrs	r1, r4, #16
 800e6cc:	e7e0      	b.n	800e690 <__mdiff+0xc8>
 800e6ce:	3f01      	subs	r7, #1
 800e6d0:	e7ea      	b.n	800e6a8 <__mdiff+0xe0>
 800e6d2:	bf00      	nop
 800e6d4:	0800f41c 	.word	0x0800f41c
 800e6d8:	0800f42d 	.word	0x0800f42d

0800e6dc <__d2b>:
 800e6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6e0:	460f      	mov	r7, r1
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	ec59 8b10 	vmov	r8, r9, d0
 800e6e8:	4616      	mov	r6, r2
 800e6ea:	f7ff fcd5 	bl	800e098 <_Balloc>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	b930      	cbnz	r0, 800e700 <__d2b+0x24>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	4b24      	ldr	r3, [pc, #144]	; (800e788 <__d2b+0xac>)
 800e6f6:	4825      	ldr	r0, [pc, #148]	; (800e78c <__d2b+0xb0>)
 800e6f8:	f240 310f 	movw	r1, #783	; 0x30f
 800e6fc:	f000 fa78 	bl	800ebf0 <__assert_func>
 800e700:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e708:	bb2d      	cbnz	r5, 800e756 <__d2b+0x7a>
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	f1b8 0300 	subs.w	r3, r8, #0
 800e710:	d026      	beq.n	800e760 <__d2b+0x84>
 800e712:	4668      	mov	r0, sp
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	f7ff fd87 	bl	800e228 <__lo0bits>
 800e71a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e71e:	b1e8      	cbz	r0, 800e75c <__d2b+0x80>
 800e720:	f1c0 0320 	rsb	r3, r0, #32
 800e724:	fa02 f303 	lsl.w	r3, r2, r3
 800e728:	430b      	orrs	r3, r1
 800e72a:	40c2      	lsrs	r2, r0
 800e72c:	6163      	str	r3, [r4, #20]
 800e72e:	9201      	str	r2, [sp, #4]
 800e730:	9b01      	ldr	r3, [sp, #4]
 800e732:	61a3      	str	r3, [r4, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	bf14      	ite	ne
 800e738:	2202      	movne	r2, #2
 800e73a:	2201      	moveq	r2, #1
 800e73c:	6122      	str	r2, [r4, #16]
 800e73e:	b1bd      	cbz	r5, 800e770 <__d2b+0x94>
 800e740:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e744:	4405      	add	r5, r0
 800e746:	603d      	str	r5, [r7, #0]
 800e748:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e74c:	6030      	str	r0, [r6, #0]
 800e74e:	4620      	mov	r0, r4
 800e750:	b003      	add	sp, #12
 800e752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e75a:	e7d6      	b.n	800e70a <__d2b+0x2e>
 800e75c:	6161      	str	r1, [r4, #20]
 800e75e:	e7e7      	b.n	800e730 <__d2b+0x54>
 800e760:	a801      	add	r0, sp, #4
 800e762:	f7ff fd61 	bl	800e228 <__lo0bits>
 800e766:	9b01      	ldr	r3, [sp, #4]
 800e768:	6163      	str	r3, [r4, #20]
 800e76a:	3020      	adds	r0, #32
 800e76c:	2201      	movs	r2, #1
 800e76e:	e7e5      	b.n	800e73c <__d2b+0x60>
 800e770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e778:	6038      	str	r0, [r7, #0]
 800e77a:	6918      	ldr	r0, [r3, #16]
 800e77c:	f7ff fd34 	bl	800e1e8 <__hi0bits>
 800e780:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e784:	e7e2      	b.n	800e74c <__d2b+0x70>
 800e786:	bf00      	nop
 800e788:	0800f41c 	.word	0x0800f41c
 800e78c:	0800f42d 	.word	0x0800f42d

0800e790 <__ssputs_r>:
 800e790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	688e      	ldr	r6, [r1, #8]
 800e796:	461f      	mov	r7, r3
 800e798:	42be      	cmp	r6, r7
 800e79a:	680b      	ldr	r3, [r1, #0]
 800e79c:	4682      	mov	sl, r0
 800e79e:	460c      	mov	r4, r1
 800e7a0:	4690      	mov	r8, r2
 800e7a2:	d82c      	bhi.n	800e7fe <__ssputs_r+0x6e>
 800e7a4:	898a      	ldrh	r2, [r1, #12]
 800e7a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7aa:	d026      	beq.n	800e7fa <__ssputs_r+0x6a>
 800e7ac:	6965      	ldr	r5, [r4, #20]
 800e7ae:	6909      	ldr	r1, [r1, #16]
 800e7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e7b4:	eba3 0901 	sub.w	r9, r3, r1
 800e7b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e7bc:	1c7b      	adds	r3, r7, #1
 800e7be:	444b      	add	r3, r9
 800e7c0:	106d      	asrs	r5, r5, #1
 800e7c2:	429d      	cmp	r5, r3
 800e7c4:	bf38      	it	cc
 800e7c6:	461d      	movcc	r5, r3
 800e7c8:	0553      	lsls	r3, r2, #21
 800e7ca:	d527      	bpl.n	800e81c <__ssputs_r+0x8c>
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	f7ff fbd7 	bl	800df80 <_malloc_r>
 800e7d2:	4606      	mov	r6, r0
 800e7d4:	b360      	cbz	r0, 800e830 <__ssputs_r+0xa0>
 800e7d6:	6921      	ldr	r1, [r4, #16]
 800e7d8:	464a      	mov	r2, r9
 800e7da:	f7fe fd58 	bl	800d28e <memcpy>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7e8:	81a3      	strh	r3, [r4, #12]
 800e7ea:	6126      	str	r6, [r4, #16]
 800e7ec:	6165      	str	r5, [r4, #20]
 800e7ee:	444e      	add	r6, r9
 800e7f0:	eba5 0509 	sub.w	r5, r5, r9
 800e7f4:	6026      	str	r6, [r4, #0]
 800e7f6:	60a5      	str	r5, [r4, #8]
 800e7f8:	463e      	mov	r6, r7
 800e7fa:	42be      	cmp	r6, r7
 800e7fc:	d900      	bls.n	800e800 <__ssputs_r+0x70>
 800e7fe:	463e      	mov	r6, r7
 800e800:	6820      	ldr	r0, [r4, #0]
 800e802:	4632      	mov	r2, r6
 800e804:	4641      	mov	r1, r8
 800e806:	f000 f9c9 	bl	800eb9c <memmove>
 800e80a:	68a3      	ldr	r3, [r4, #8]
 800e80c:	1b9b      	subs	r3, r3, r6
 800e80e:	60a3      	str	r3, [r4, #8]
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	4433      	add	r3, r6
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	2000      	movs	r0, #0
 800e818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81c:	462a      	mov	r2, r5
 800e81e:	f000 fa2d 	bl	800ec7c <_realloc_r>
 800e822:	4606      	mov	r6, r0
 800e824:	2800      	cmp	r0, #0
 800e826:	d1e0      	bne.n	800e7ea <__ssputs_r+0x5a>
 800e828:	6921      	ldr	r1, [r4, #16]
 800e82a:	4650      	mov	r0, sl
 800e82c:	f7ff fb34 	bl	800de98 <_free_r>
 800e830:	230c      	movs	r3, #12
 800e832:	f8ca 3000 	str.w	r3, [sl]
 800e836:	89a3      	ldrh	r3, [r4, #12]
 800e838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
 800e842:	e7e9      	b.n	800e818 <__ssputs_r+0x88>

0800e844 <_svfiprintf_r>:
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	4698      	mov	r8, r3
 800e84a:	898b      	ldrh	r3, [r1, #12]
 800e84c:	061b      	lsls	r3, r3, #24
 800e84e:	b09d      	sub	sp, #116	; 0x74
 800e850:	4607      	mov	r7, r0
 800e852:	460d      	mov	r5, r1
 800e854:	4614      	mov	r4, r2
 800e856:	d50e      	bpl.n	800e876 <_svfiprintf_r+0x32>
 800e858:	690b      	ldr	r3, [r1, #16]
 800e85a:	b963      	cbnz	r3, 800e876 <_svfiprintf_r+0x32>
 800e85c:	2140      	movs	r1, #64	; 0x40
 800e85e:	f7ff fb8f 	bl	800df80 <_malloc_r>
 800e862:	6028      	str	r0, [r5, #0]
 800e864:	6128      	str	r0, [r5, #16]
 800e866:	b920      	cbnz	r0, 800e872 <_svfiprintf_r+0x2e>
 800e868:	230c      	movs	r3, #12
 800e86a:	603b      	str	r3, [r7, #0]
 800e86c:	f04f 30ff 	mov.w	r0, #4294967295
 800e870:	e0d0      	b.n	800ea14 <_svfiprintf_r+0x1d0>
 800e872:	2340      	movs	r3, #64	; 0x40
 800e874:	616b      	str	r3, [r5, #20]
 800e876:	2300      	movs	r3, #0
 800e878:	9309      	str	r3, [sp, #36]	; 0x24
 800e87a:	2320      	movs	r3, #32
 800e87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e880:	f8cd 800c 	str.w	r8, [sp, #12]
 800e884:	2330      	movs	r3, #48	; 0x30
 800e886:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ea2c <_svfiprintf_r+0x1e8>
 800e88a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e88e:	f04f 0901 	mov.w	r9, #1
 800e892:	4623      	mov	r3, r4
 800e894:	469a      	mov	sl, r3
 800e896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e89a:	b10a      	cbz	r2, 800e8a0 <_svfiprintf_r+0x5c>
 800e89c:	2a25      	cmp	r2, #37	; 0x25
 800e89e:	d1f9      	bne.n	800e894 <_svfiprintf_r+0x50>
 800e8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e8a4:	d00b      	beq.n	800e8be <_svfiprintf_r+0x7a>
 800e8a6:	465b      	mov	r3, fp
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff ff6f 	bl	800e790 <__ssputs_r>
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f000 80a9 	beq.w	800ea0a <_svfiprintf_r+0x1c6>
 800e8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ba:	445a      	add	r2, fp
 800e8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e8be:	f89a 3000 	ldrb.w	r3, [sl]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 80a1 	beq.w	800ea0a <_svfiprintf_r+0x1c6>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8d2:	f10a 0a01 	add.w	sl, sl, #1
 800e8d6:	9304      	str	r3, [sp, #16]
 800e8d8:	9307      	str	r3, [sp, #28]
 800e8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8de:	931a      	str	r3, [sp, #104]	; 0x68
 800e8e0:	4654      	mov	r4, sl
 800e8e2:	2205      	movs	r2, #5
 800e8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8e8:	4850      	ldr	r0, [pc, #320]	; (800ea2c <_svfiprintf_r+0x1e8>)
 800e8ea:	f7f1 fd11 	bl	8000310 <memchr>
 800e8ee:	9a04      	ldr	r2, [sp, #16]
 800e8f0:	b9d8      	cbnz	r0, 800e92a <_svfiprintf_r+0xe6>
 800e8f2:	06d0      	lsls	r0, r2, #27
 800e8f4:	bf44      	itt	mi
 800e8f6:	2320      	movmi	r3, #32
 800e8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8fc:	0711      	lsls	r1, r2, #28
 800e8fe:	bf44      	itt	mi
 800e900:	232b      	movmi	r3, #43	; 0x2b
 800e902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e906:	f89a 3000 	ldrb.w	r3, [sl]
 800e90a:	2b2a      	cmp	r3, #42	; 0x2a
 800e90c:	d015      	beq.n	800e93a <_svfiprintf_r+0xf6>
 800e90e:	9a07      	ldr	r2, [sp, #28]
 800e910:	4654      	mov	r4, sl
 800e912:	2000      	movs	r0, #0
 800e914:	f04f 0c0a 	mov.w	ip, #10
 800e918:	4621      	mov	r1, r4
 800e91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e91e:	3b30      	subs	r3, #48	; 0x30
 800e920:	2b09      	cmp	r3, #9
 800e922:	d94d      	bls.n	800e9c0 <_svfiprintf_r+0x17c>
 800e924:	b1b0      	cbz	r0, 800e954 <_svfiprintf_r+0x110>
 800e926:	9207      	str	r2, [sp, #28]
 800e928:	e014      	b.n	800e954 <_svfiprintf_r+0x110>
 800e92a:	eba0 0308 	sub.w	r3, r0, r8
 800e92e:	fa09 f303 	lsl.w	r3, r9, r3
 800e932:	4313      	orrs	r3, r2
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	46a2      	mov	sl, r4
 800e938:	e7d2      	b.n	800e8e0 <_svfiprintf_r+0x9c>
 800e93a:	9b03      	ldr	r3, [sp, #12]
 800e93c:	1d19      	adds	r1, r3, #4
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	9103      	str	r1, [sp, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	bfbb      	ittet	lt
 800e946:	425b      	neglt	r3, r3
 800e948:	f042 0202 	orrlt.w	r2, r2, #2
 800e94c:	9307      	strge	r3, [sp, #28]
 800e94e:	9307      	strlt	r3, [sp, #28]
 800e950:	bfb8      	it	lt
 800e952:	9204      	strlt	r2, [sp, #16]
 800e954:	7823      	ldrb	r3, [r4, #0]
 800e956:	2b2e      	cmp	r3, #46	; 0x2e
 800e958:	d10c      	bne.n	800e974 <_svfiprintf_r+0x130>
 800e95a:	7863      	ldrb	r3, [r4, #1]
 800e95c:	2b2a      	cmp	r3, #42	; 0x2a
 800e95e:	d134      	bne.n	800e9ca <_svfiprintf_r+0x186>
 800e960:	9b03      	ldr	r3, [sp, #12]
 800e962:	1d1a      	adds	r2, r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	9203      	str	r2, [sp, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	bfb8      	it	lt
 800e96c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e970:	3402      	adds	r4, #2
 800e972:	9305      	str	r3, [sp, #20]
 800e974:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ea3c <_svfiprintf_r+0x1f8>
 800e978:	7821      	ldrb	r1, [r4, #0]
 800e97a:	2203      	movs	r2, #3
 800e97c:	4650      	mov	r0, sl
 800e97e:	f7f1 fcc7 	bl	8000310 <memchr>
 800e982:	b138      	cbz	r0, 800e994 <_svfiprintf_r+0x150>
 800e984:	9b04      	ldr	r3, [sp, #16]
 800e986:	eba0 000a 	sub.w	r0, r0, sl
 800e98a:	2240      	movs	r2, #64	; 0x40
 800e98c:	4082      	lsls	r2, r0
 800e98e:	4313      	orrs	r3, r2
 800e990:	3401      	adds	r4, #1
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e998:	4825      	ldr	r0, [pc, #148]	; (800ea30 <_svfiprintf_r+0x1ec>)
 800e99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e99e:	2206      	movs	r2, #6
 800e9a0:	f7f1 fcb6 	bl	8000310 <memchr>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d038      	beq.n	800ea1a <_svfiprintf_r+0x1d6>
 800e9a8:	4b22      	ldr	r3, [pc, #136]	; (800ea34 <_svfiprintf_r+0x1f0>)
 800e9aa:	bb1b      	cbnz	r3, 800e9f4 <_svfiprintf_r+0x1b0>
 800e9ac:	9b03      	ldr	r3, [sp, #12]
 800e9ae:	3307      	adds	r3, #7
 800e9b0:	f023 0307 	bic.w	r3, r3, #7
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	9303      	str	r3, [sp, #12]
 800e9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ba:	4433      	add	r3, r6
 800e9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9be:	e768      	b.n	800e892 <_svfiprintf_r+0x4e>
 800e9c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	e7a6      	b.n	800e918 <_svfiprintf_r+0xd4>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	3401      	adds	r4, #1
 800e9ce:	9305      	str	r3, [sp, #20]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	f04f 0c0a 	mov.w	ip, #10
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9dc:	3a30      	subs	r2, #48	; 0x30
 800e9de:	2a09      	cmp	r2, #9
 800e9e0:	d903      	bls.n	800e9ea <_svfiprintf_r+0x1a6>
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d0c6      	beq.n	800e974 <_svfiprintf_r+0x130>
 800e9e6:	9105      	str	r1, [sp, #20]
 800e9e8:	e7c4      	b.n	800e974 <_svfiprintf_r+0x130>
 800e9ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e7f0      	b.n	800e9d6 <_svfiprintf_r+0x192>
 800e9f4:	ab03      	add	r3, sp, #12
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4b0f      	ldr	r3, [pc, #60]	; (800ea38 <_svfiprintf_r+0x1f4>)
 800e9fc:	a904      	add	r1, sp, #16
 800e9fe:	4638      	mov	r0, r7
 800ea00:	f7fd fef6 	bl	800c7f0 <_printf_float>
 800ea04:	1c42      	adds	r2, r0, #1
 800ea06:	4606      	mov	r6, r0
 800ea08:	d1d6      	bne.n	800e9b8 <_svfiprintf_r+0x174>
 800ea0a:	89ab      	ldrh	r3, [r5, #12]
 800ea0c:	065b      	lsls	r3, r3, #25
 800ea0e:	f53f af2d 	bmi.w	800e86c <_svfiprintf_r+0x28>
 800ea12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea14:	b01d      	add	sp, #116	; 0x74
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	ab03      	add	r3, sp, #12
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	462a      	mov	r2, r5
 800ea20:	4b05      	ldr	r3, [pc, #20]	; (800ea38 <_svfiprintf_r+0x1f4>)
 800ea22:	a904      	add	r1, sp, #16
 800ea24:	4638      	mov	r0, r7
 800ea26:	f7fe f96b 	bl	800cd00 <_printf_i>
 800ea2a:	e7eb      	b.n	800ea04 <_svfiprintf_r+0x1c0>
 800ea2c:	0800f584 	.word	0x0800f584
 800ea30:	0800f58e 	.word	0x0800f58e
 800ea34:	0800c7f1 	.word	0x0800c7f1
 800ea38:	0800e791 	.word	0x0800e791
 800ea3c:	0800f58a 	.word	0x0800f58a

0800ea40 <__sflush_r>:
 800ea40:	898a      	ldrh	r2, [r1, #12]
 800ea42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea46:	4605      	mov	r5, r0
 800ea48:	0710      	lsls	r0, r2, #28
 800ea4a:	460c      	mov	r4, r1
 800ea4c:	d458      	bmi.n	800eb00 <__sflush_r+0xc0>
 800ea4e:	684b      	ldr	r3, [r1, #4]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dc05      	bgt.n	800ea60 <__sflush_r+0x20>
 800ea54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dc02      	bgt.n	800ea60 <__sflush_r+0x20>
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea62:	2e00      	cmp	r6, #0
 800ea64:	d0f9      	beq.n	800ea5a <__sflush_r+0x1a>
 800ea66:	2300      	movs	r3, #0
 800ea68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ea6c:	682f      	ldr	r7, [r5, #0]
 800ea6e:	6a21      	ldr	r1, [r4, #32]
 800ea70:	602b      	str	r3, [r5, #0]
 800ea72:	d032      	beq.n	800eada <__sflush_r+0x9a>
 800ea74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea76:	89a3      	ldrh	r3, [r4, #12]
 800ea78:	075a      	lsls	r2, r3, #29
 800ea7a:	d505      	bpl.n	800ea88 <__sflush_r+0x48>
 800ea7c:	6863      	ldr	r3, [r4, #4]
 800ea7e:	1ac0      	subs	r0, r0, r3
 800ea80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea82:	b10b      	cbz	r3, 800ea88 <__sflush_r+0x48>
 800ea84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea86:	1ac0      	subs	r0, r0, r3
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea8e:	6a21      	ldr	r1, [r4, #32]
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b0      	blx	r6
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	89a3      	ldrh	r3, [r4, #12]
 800ea98:	d106      	bne.n	800eaa8 <__sflush_r+0x68>
 800ea9a:	6829      	ldr	r1, [r5, #0]
 800ea9c:	291d      	cmp	r1, #29
 800ea9e:	d82b      	bhi.n	800eaf8 <__sflush_r+0xb8>
 800eaa0:	4a29      	ldr	r2, [pc, #164]	; (800eb48 <__sflush_r+0x108>)
 800eaa2:	410a      	asrs	r2, r1
 800eaa4:	07d6      	lsls	r6, r2, #31
 800eaa6:	d427      	bmi.n	800eaf8 <__sflush_r+0xb8>
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	6062      	str	r2, [r4, #4]
 800eaac:	04d9      	lsls	r1, r3, #19
 800eaae:	6922      	ldr	r2, [r4, #16]
 800eab0:	6022      	str	r2, [r4, #0]
 800eab2:	d504      	bpl.n	800eabe <__sflush_r+0x7e>
 800eab4:	1c42      	adds	r2, r0, #1
 800eab6:	d101      	bne.n	800eabc <__sflush_r+0x7c>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	b903      	cbnz	r3, 800eabe <__sflush_r+0x7e>
 800eabc:	6560      	str	r0, [r4, #84]	; 0x54
 800eabe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eac0:	602f      	str	r7, [r5, #0]
 800eac2:	2900      	cmp	r1, #0
 800eac4:	d0c9      	beq.n	800ea5a <__sflush_r+0x1a>
 800eac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eaca:	4299      	cmp	r1, r3
 800eacc:	d002      	beq.n	800ead4 <__sflush_r+0x94>
 800eace:	4628      	mov	r0, r5
 800ead0:	f7ff f9e2 	bl	800de98 <_free_r>
 800ead4:	2000      	movs	r0, #0
 800ead6:	6360      	str	r0, [r4, #52]	; 0x34
 800ead8:	e7c0      	b.n	800ea5c <__sflush_r+0x1c>
 800eada:	2301      	movs	r3, #1
 800eadc:	4628      	mov	r0, r5
 800eade:	47b0      	blx	r6
 800eae0:	1c41      	adds	r1, r0, #1
 800eae2:	d1c8      	bne.n	800ea76 <__sflush_r+0x36>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d0c5      	beq.n	800ea76 <__sflush_r+0x36>
 800eaea:	2b1d      	cmp	r3, #29
 800eaec:	d001      	beq.n	800eaf2 <__sflush_r+0xb2>
 800eaee:	2b16      	cmp	r3, #22
 800eaf0:	d101      	bne.n	800eaf6 <__sflush_r+0xb6>
 800eaf2:	602f      	str	r7, [r5, #0]
 800eaf4:	e7b1      	b.n	800ea5a <__sflush_r+0x1a>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eafc:	81a3      	strh	r3, [r4, #12]
 800eafe:	e7ad      	b.n	800ea5c <__sflush_r+0x1c>
 800eb00:	690f      	ldr	r7, [r1, #16]
 800eb02:	2f00      	cmp	r7, #0
 800eb04:	d0a9      	beq.n	800ea5a <__sflush_r+0x1a>
 800eb06:	0793      	lsls	r3, r2, #30
 800eb08:	680e      	ldr	r6, [r1, #0]
 800eb0a:	bf08      	it	eq
 800eb0c:	694b      	ldreq	r3, [r1, #20]
 800eb0e:	600f      	str	r7, [r1, #0]
 800eb10:	bf18      	it	ne
 800eb12:	2300      	movne	r3, #0
 800eb14:	eba6 0807 	sub.w	r8, r6, r7
 800eb18:	608b      	str	r3, [r1, #8]
 800eb1a:	f1b8 0f00 	cmp.w	r8, #0
 800eb1e:	dd9c      	ble.n	800ea5a <__sflush_r+0x1a>
 800eb20:	6a21      	ldr	r1, [r4, #32]
 800eb22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb24:	4643      	mov	r3, r8
 800eb26:	463a      	mov	r2, r7
 800eb28:	4628      	mov	r0, r5
 800eb2a:	47b0      	blx	r6
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	dc06      	bgt.n	800eb3e <__sflush_r+0xfe>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb36:	81a3      	strh	r3, [r4, #12]
 800eb38:	f04f 30ff 	mov.w	r0, #4294967295
 800eb3c:	e78e      	b.n	800ea5c <__sflush_r+0x1c>
 800eb3e:	4407      	add	r7, r0
 800eb40:	eba8 0800 	sub.w	r8, r8, r0
 800eb44:	e7e9      	b.n	800eb1a <__sflush_r+0xda>
 800eb46:	bf00      	nop
 800eb48:	dfbffffe 	.word	0xdfbffffe

0800eb4c <_fflush_r>:
 800eb4c:	b538      	push	{r3, r4, r5, lr}
 800eb4e:	690b      	ldr	r3, [r1, #16]
 800eb50:	4605      	mov	r5, r0
 800eb52:	460c      	mov	r4, r1
 800eb54:	b913      	cbnz	r3, 800eb5c <_fflush_r+0x10>
 800eb56:	2500      	movs	r5, #0
 800eb58:	4628      	mov	r0, r5
 800eb5a:	bd38      	pop	{r3, r4, r5, pc}
 800eb5c:	b118      	cbz	r0, 800eb66 <_fflush_r+0x1a>
 800eb5e:	6a03      	ldr	r3, [r0, #32]
 800eb60:	b90b      	cbnz	r3, 800eb66 <_fflush_r+0x1a>
 800eb62:	f7fe fa7b 	bl	800d05c <__sinit>
 800eb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d0f3      	beq.n	800eb56 <_fflush_r+0xa>
 800eb6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb70:	07d0      	lsls	r0, r2, #31
 800eb72:	d404      	bmi.n	800eb7e <_fflush_r+0x32>
 800eb74:	0599      	lsls	r1, r3, #22
 800eb76:	d402      	bmi.n	800eb7e <_fflush_r+0x32>
 800eb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb7a:	f7fe fb86 	bl	800d28a <__retarget_lock_acquire_recursive>
 800eb7e:	4628      	mov	r0, r5
 800eb80:	4621      	mov	r1, r4
 800eb82:	f7ff ff5d 	bl	800ea40 <__sflush_r>
 800eb86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb88:	07da      	lsls	r2, r3, #31
 800eb8a:	4605      	mov	r5, r0
 800eb8c:	d4e4      	bmi.n	800eb58 <_fflush_r+0xc>
 800eb8e:	89a3      	ldrh	r3, [r4, #12]
 800eb90:	059b      	lsls	r3, r3, #22
 800eb92:	d4e1      	bmi.n	800eb58 <_fflush_r+0xc>
 800eb94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb96:	f7fe fb79 	bl	800d28c <__retarget_lock_release_recursive>
 800eb9a:	e7dd      	b.n	800eb58 <_fflush_r+0xc>

0800eb9c <memmove>:
 800eb9c:	4288      	cmp	r0, r1
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	eb01 0402 	add.w	r4, r1, r2
 800eba4:	d902      	bls.n	800ebac <memmove+0x10>
 800eba6:	4284      	cmp	r4, r0
 800eba8:	4623      	mov	r3, r4
 800ebaa:	d807      	bhi.n	800ebbc <memmove+0x20>
 800ebac:	1e43      	subs	r3, r0, #1
 800ebae:	42a1      	cmp	r1, r4
 800ebb0:	d008      	beq.n	800ebc4 <memmove+0x28>
 800ebb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebba:	e7f8      	b.n	800ebae <memmove+0x12>
 800ebbc:	4402      	add	r2, r0
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	428a      	cmp	r2, r1
 800ebc2:	d100      	bne.n	800ebc6 <memmove+0x2a>
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebce:	e7f7      	b.n	800ebc0 <memmove+0x24>

0800ebd0 <_sbrk_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4d06      	ldr	r5, [pc, #24]	; (800ebec <_sbrk_r+0x1c>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	602b      	str	r3, [r5, #0]
 800ebdc:	f7f2 fdcc 	bl	8001778 <_sbrk>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_sbrk_r+0x1a>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_sbrk_r+0x1a>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	240006fc 	.word	0x240006fc

0800ebf0 <__assert_func>:
 800ebf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebf2:	4614      	mov	r4, r2
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4b09      	ldr	r3, [pc, #36]	; (800ec1c <__assert_func+0x2c>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	68d8      	ldr	r0, [r3, #12]
 800ebfe:	b14c      	cbz	r4, 800ec14 <__assert_func+0x24>
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <__assert_func+0x30>)
 800ec02:	9100      	str	r1, [sp, #0]
 800ec04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec08:	4906      	ldr	r1, [pc, #24]	; (800ec24 <__assert_func+0x34>)
 800ec0a:	462b      	mov	r3, r5
 800ec0c:	f000 f872 	bl	800ecf4 <fiprintf>
 800ec10:	f000 f882 	bl	800ed18 <abort>
 800ec14:	4b04      	ldr	r3, [pc, #16]	; (800ec28 <__assert_func+0x38>)
 800ec16:	461c      	mov	r4, r3
 800ec18:	e7f3      	b.n	800ec02 <__assert_func+0x12>
 800ec1a:	bf00      	nop
 800ec1c:	24000068 	.word	0x24000068
 800ec20:	0800f59f 	.word	0x0800f59f
 800ec24:	0800f5ac 	.word	0x0800f5ac
 800ec28:	0800f5da 	.word	0x0800f5da

0800ec2c <_calloc_r>:
 800ec2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec2e:	fba1 2402 	umull	r2, r4, r1, r2
 800ec32:	b94c      	cbnz	r4, 800ec48 <_calloc_r+0x1c>
 800ec34:	4611      	mov	r1, r2
 800ec36:	9201      	str	r2, [sp, #4]
 800ec38:	f7ff f9a2 	bl	800df80 <_malloc_r>
 800ec3c:	9a01      	ldr	r2, [sp, #4]
 800ec3e:	4605      	mov	r5, r0
 800ec40:	b930      	cbnz	r0, 800ec50 <_calloc_r+0x24>
 800ec42:	4628      	mov	r0, r5
 800ec44:	b003      	add	sp, #12
 800ec46:	bd30      	pop	{r4, r5, pc}
 800ec48:	220c      	movs	r2, #12
 800ec4a:	6002      	str	r2, [r0, #0]
 800ec4c:	2500      	movs	r5, #0
 800ec4e:	e7f8      	b.n	800ec42 <_calloc_r+0x16>
 800ec50:	4621      	mov	r1, r4
 800ec52:	f7fe fa9c 	bl	800d18e <memset>
 800ec56:	e7f4      	b.n	800ec42 <_calloc_r+0x16>

0800ec58 <__ascii_mbtowc>:
 800ec58:	b082      	sub	sp, #8
 800ec5a:	b901      	cbnz	r1, 800ec5e <__ascii_mbtowc+0x6>
 800ec5c:	a901      	add	r1, sp, #4
 800ec5e:	b142      	cbz	r2, 800ec72 <__ascii_mbtowc+0x1a>
 800ec60:	b14b      	cbz	r3, 800ec76 <__ascii_mbtowc+0x1e>
 800ec62:	7813      	ldrb	r3, [r2, #0]
 800ec64:	600b      	str	r3, [r1, #0]
 800ec66:	7812      	ldrb	r2, [r2, #0]
 800ec68:	1e10      	subs	r0, r2, #0
 800ec6a:	bf18      	it	ne
 800ec6c:	2001      	movne	r0, #1
 800ec6e:	b002      	add	sp, #8
 800ec70:	4770      	bx	lr
 800ec72:	4610      	mov	r0, r2
 800ec74:	e7fb      	b.n	800ec6e <__ascii_mbtowc+0x16>
 800ec76:	f06f 0001 	mvn.w	r0, #1
 800ec7a:	e7f8      	b.n	800ec6e <__ascii_mbtowc+0x16>

0800ec7c <_realloc_r>:
 800ec7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec80:	4680      	mov	r8, r0
 800ec82:	4614      	mov	r4, r2
 800ec84:	460e      	mov	r6, r1
 800ec86:	b921      	cbnz	r1, 800ec92 <_realloc_r+0x16>
 800ec88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	f7ff b977 	b.w	800df80 <_malloc_r>
 800ec92:	b92a      	cbnz	r2, 800eca0 <_realloc_r+0x24>
 800ec94:	f7ff f900 	bl	800de98 <_free_r>
 800ec98:	4625      	mov	r5, r4
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca0:	f000 f841 	bl	800ed26 <_malloc_usable_size_r>
 800eca4:	4284      	cmp	r4, r0
 800eca6:	4607      	mov	r7, r0
 800eca8:	d802      	bhi.n	800ecb0 <_realloc_r+0x34>
 800ecaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecae:	d812      	bhi.n	800ecd6 <_realloc_r+0x5a>
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	f7ff f964 	bl	800df80 <_malloc_r>
 800ecb8:	4605      	mov	r5, r0
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d0ed      	beq.n	800ec9a <_realloc_r+0x1e>
 800ecbe:	42bc      	cmp	r4, r7
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	bf28      	it	cs
 800ecc6:	463a      	movcs	r2, r7
 800ecc8:	f7fe fae1 	bl	800d28e <memcpy>
 800eccc:	4631      	mov	r1, r6
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f7ff f8e2 	bl	800de98 <_free_r>
 800ecd4:	e7e1      	b.n	800ec9a <_realloc_r+0x1e>
 800ecd6:	4635      	mov	r5, r6
 800ecd8:	e7df      	b.n	800ec9a <_realloc_r+0x1e>

0800ecda <__ascii_wctomb>:
 800ecda:	b149      	cbz	r1, 800ecf0 <__ascii_wctomb+0x16>
 800ecdc:	2aff      	cmp	r2, #255	; 0xff
 800ecde:	bf85      	ittet	hi
 800ece0:	238a      	movhi	r3, #138	; 0x8a
 800ece2:	6003      	strhi	r3, [r0, #0]
 800ece4:	700a      	strbls	r2, [r1, #0]
 800ece6:	f04f 30ff 	movhi.w	r0, #4294967295
 800ecea:	bf98      	it	ls
 800ecec:	2001      	movls	r0, #1
 800ecee:	4770      	bx	lr
 800ecf0:	4608      	mov	r0, r1
 800ecf2:	4770      	bx	lr

0800ecf4 <fiprintf>:
 800ecf4:	b40e      	push	{r1, r2, r3}
 800ecf6:	b503      	push	{r0, r1, lr}
 800ecf8:	4601      	mov	r1, r0
 800ecfa:	ab03      	add	r3, sp, #12
 800ecfc:	4805      	ldr	r0, [pc, #20]	; (800ed14 <fiprintf+0x20>)
 800ecfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed02:	6800      	ldr	r0, [r0, #0]
 800ed04:	9301      	str	r3, [sp, #4]
 800ed06:	f000 f83f 	bl	800ed88 <_vfiprintf_r>
 800ed0a:	b002      	add	sp, #8
 800ed0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed10:	b003      	add	sp, #12
 800ed12:	4770      	bx	lr
 800ed14:	24000068 	.word	0x24000068

0800ed18 <abort>:
 800ed18:	b508      	push	{r3, lr}
 800ed1a:	2006      	movs	r0, #6
 800ed1c:	f000 fa0c 	bl	800f138 <raise>
 800ed20:	2001      	movs	r0, #1
 800ed22:	f7f2 fcb1 	bl	8001688 <_exit>

0800ed26 <_malloc_usable_size_r>:
 800ed26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed2a:	1f18      	subs	r0, r3, #4
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	bfbc      	itt	lt
 800ed30:	580b      	ldrlt	r3, [r1, r0]
 800ed32:	18c0      	addlt	r0, r0, r3
 800ed34:	4770      	bx	lr

0800ed36 <__sfputc_r>:
 800ed36:	6893      	ldr	r3, [r2, #8]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	b410      	push	{r4}
 800ed3e:	6093      	str	r3, [r2, #8]
 800ed40:	da08      	bge.n	800ed54 <__sfputc_r+0x1e>
 800ed42:	6994      	ldr	r4, [r2, #24]
 800ed44:	42a3      	cmp	r3, r4
 800ed46:	db01      	blt.n	800ed4c <__sfputc_r+0x16>
 800ed48:	290a      	cmp	r1, #10
 800ed4a:	d103      	bne.n	800ed54 <__sfputc_r+0x1e>
 800ed4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed50:	f000 b934 	b.w	800efbc <__swbuf_r>
 800ed54:	6813      	ldr	r3, [r2, #0]
 800ed56:	1c58      	adds	r0, r3, #1
 800ed58:	6010      	str	r0, [r2, #0]
 800ed5a:	7019      	strb	r1, [r3, #0]
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <__sfputs_r>:
 800ed64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed66:	4606      	mov	r6, r0
 800ed68:	460f      	mov	r7, r1
 800ed6a:	4614      	mov	r4, r2
 800ed6c:	18d5      	adds	r5, r2, r3
 800ed6e:	42ac      	cmp	r4, r5
 800ed70:	d101      	bne.n	800ed76 <__sfputs_r+0x12>
 800ed72:	2000      	movs	r0, #0
 800ed74:	e007      	b.n	800ed86 <__sfputs_r+0x22>
 800ed76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed7a:	463a      	mov	r2, r7
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f7ff ffda 	bl	800ed36 <__sfputc_r>
 800ed82:	1c43      	adds	r3, r0, #1
 800ed84:	d1f3      	bne.n	800ed6e <__sfputs_r+0xa>
 800ed86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed88 <_vfiprintf_r>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	460d      	mov	r5, r1
 800ed8e:	b09d      	sub	sp, #116	; 0x74
 800ed90:	4614      	mov	r4, r2
 800ed92:	4698      	mov	r8, r3
 800ed94:	4606      	mov	r6, r0
 800ed96:	b118      	cbz	r0, 800eda0 <_vfiprintf_r+0x18>
 800ed98:	6a03      	ldr	r3, [r0, #32]
 800ed9a:	b90b      	cbnz	r3, 800eda0 <_vfiprintf_r+0x18>
 800ed9c:	f7fe f95e 	bl	800d05c <__sinit>
 800eda0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eda2:	07d9      	lsls	r1, r3, #31
 800eda4:	d405      	bmi.n	800edb2 <_vfiprintf_r+0x2a>
 800eda6:	89ab      	ldrh	r3, [r5, #12]
 800eda8:	059a      	lsls	r2, r3, #22
 800edaa:	d402      	bmi.n	800edb2 <_vfiprintf_r+0x2a>
 800edac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edae:	f7fe fa6c 	bl	800d28a <__retarget_lock_acquire_recursive>
 800edb2:	89ab      	ldrh	r3, [r5, #12]
 800edb4:	071b      	lsls	r3, r3, #28
 800edb6:	d501      	bpl.n	800edbc <_vfiprintf_r+0x34>
 800edb8:	692b      	ldr	r3, [r5, #16]
 800edba:	b99b      	cbnz	r3, 800ede4 <_vfiprintf_r+0x5c>
 800edbc:	4629      	mov	r1, r5
 800edbe:	4630      	mov	r0, r6
 800edc0:	f000 f93a 	bl	800f038 <__swsetup_r>
 800edc4:	b170      	cbz	r0, 800ede4 <_vfiprintf_r+0x5c>
 800edc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc8:	07dc      	lsls	r4, r3, #31
 800edca:	d504      	bpl.n	800edd6 <_vfiprintf_r+0x4e>
 800edcc:	f04f 30ff 	mov.w	r0, #4294967295
 800edd0:	b01d      	add	sp, #116	; 0x74
 800edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd6:	89ab      	ldrh	r3, [r5, #12]
 800edd8:	0598      	lsls	r0, r3, #22
 800edda:	d4f7      	bmi.n	800edcc <_vfiprintf_r+0x44>
 800eddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edde:	f7fe fa55 	bl	800d28c <__retarget_lock_release_recursive>
 800ede2:	e7f3      	b.n	800edcc <_vfiprintf_r+0x44>
 800ede4:	2300      	movs	r3, #0
 800ede6:	9309      	str	r3, [sp, #36]	; 0x24
 800ede8:	2320      	movs	r3, #32
 800edea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edee:	f8cd 800c 	str.w	r8, [sp, #12]
 800edf2:	2330      	movs	r3, #48	; 0x30
 800edf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800efa8 <_vfiprintf_r+0x220>
 800edf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edfc:	f04f 0901 	mov.w	r9, #1
 800ee00:	4623      	mov	r3, r4
 800ee02:	469a      	mov	sl, r3
 800ee04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee08:	b10a      	cbz	r2, 800ee0e <_vfiprintf_r+0x86>
 800ee0a:	2a25      	cmp	r2, #37	; 0x25
 800ee0c:	d1f9      	bne.n	800ee02 <_vfiprintf_r+0x7a>
 800ee0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ee12:	d00b      	beq.n	800ee2c <_vfiprintf_r+0xa4>
 800ee14:	465b      	mov	r3, fp
 800ee16:	4622      	mov	r2, r4
 800ee18:	4629      	mov	r1, r5
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7ff ffa2 	bl	800ed64 <__sfputs_r>
 800ee20:	3001      	adds	r0, #1
 800ee22:	f000 80a9 	beq.w	800ef78 <_vfiprintf_r+0x1f0>
 800ee26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee28:	445a      	add	r2, fp
 800ee2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ee2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	f000 80a1 	beq.w	800ef78 <_vfiprintf_r+0x1f0>
 800ee36:	2300      	movs	r3, #0
 800ee38:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee40:	f10a 0a01 	add.w	sl, sl, #1
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	9307      	str	r3, [sp, #28]
 800ee48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ee4e:	4654      	mov	r4, sl
 800ee50:	2205      	movs	r2, #5
 800ee52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee56:	4854      	ldr	r0, [pc, #336]	; (800efa8 <_vfiprintf_r+0x220>)
 800ee58:	f7f1 fa5a 	bl	8000310 <memchr>
 800ee5c:	9a04      	ldr	r2, [sp, #16]
 800ee5e:	b9d8      	cbnz	r0, 800ee98 <_vfiprintf_r+0x110>
 800ee60:	06d1      	lsls	r1, r2, #27
 800ee62:	bf44      	itt	mi
 800ee64:	2320      	movmi	r3, #32
 800ee66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee6a:	0713      	lsls	r3, r2, #28
 800ee6c:	bf44      	itt	mi
 800ee6e:	232b      	movmi	r3, #43	; 0x2b
 800ee70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee74:	f89a 3000 	ldrb.w	r3, [sl]
 800ee78:	2b2a      	cmp	r3, #42	; 0x2a
 800ee7a:	d015      	beq.n	800eea8 <_vfiprintf_r+0x120>
 800ee7c:	9a07      	ldr	r2, [sp, #28]
 800ee7e:	4654      	mov	r4, sl
 800ee80:	2000      	movs	r0, #0
 800ee82:	f04f 0c0a 	mov.w	ip, #10
 800ee86:	4621      	mov	r1, r4
 800ee88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee8c:	3b30      	subs	r3, #48	; 0x30
 800ee8e:	2b09      	cmp	r3, #9
 800ee90:	d94d      	bls.n	800ef2e <_vfiprintf_r+0x1a6>
 800ee92:	b1b0      	cbz	r0, 800eec2 <_vfiprintf_r+0x13a>
 800ee94:	9207      	str	r2, [sp, #28]
 800ee96:	e014      	b.n	800eec2 <_vfiprintf_r+0x13a>
 800ee98:	eba0 0308 	sub.w	r3, r0, r8
 800ee9c:	fa09 f303 	lsl.w	r3, r9, r3
 800eea0:	4313      	orrs	r3, r2
 800eea2:	9304      	str	r3, [sp, #16]
 800eea4:	46a2      	mov	sl, r4
 800eea6:	e7d2      	b.n	800ee4e <_vfiprintf_r+0xc6>
 800eea8:	9b03      	ldr	r3, [sp, #12]
 800eeaa:	1d19      	adds	r1, r3, #4
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	9103      	str	r1, [sp, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bfbb      	ittet	lt
 800eeb4:	425b      	neglt	r3, r3
 800eeb6:	f042 0202 	orrlt.w	r2, r2, #2
 800eeba:	9307      	strge	r3, [sp, #28]
 800eebc:	9307      	strlt	r3, [sp, #28]
 800eebe:	bfb8      	it	lt
 800eec0:	9204      	strlt	r2, [sp, #16]
 800eec2:	7823      	ldrb	r3, [r4, #0]
 800eec4:	2b2e      	cmp	r3, #46	; 0x2e
 800eec6:	d10c      	bne.n	800eee2 <_vfiprintf_r+0x15a>
 800eec8:	7863      	ldrb	r3, [r4, #1]
 800eeca:	2b2a      	cmp	r3, #42	; 0x2a
 800eecc:	d134      	bne.n	800ef38 <_vfiprintf_r+0x1b0>
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	1d1a      	adds	r2, r3, #4
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	9203      	str	r2, [sp, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	bfb8      	it	lt
 800eeda:	f04f 33ff 	movlt.w	r3, #4294967295
 800eede:	3402      	adds	r4, #2
 800eee0:	9305      	str	r3, [sp, #20]
 800eee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800efb8 <_vfiprintf_r+0x230>
 800eee6:	7821      	ldrb	r1, [r4, #0]
 800eee8:	2203      	movs	r2, #3
 800eeea:	4650      	mov	r0, sl
 800eeec:	f7f1 fa10 	bl	8000310 <memchr>
 800eef0:	b138      	cbz	r0, 800ef02 <_vfiprintf_r+0x17a>
 800eef2:	9b04      	ldr	r3, [sp, #16]
 800eef4:	eba0 000a 	sub.w	r0, r0, sl
 800eef8:	2240      	movs	r2, #64	; 0x40
 800eefa:	4082      	lsls	r2, r0
 800eefc:	4313      	orrs	r3, r2
 800eefe:	3401      	adds	r4, #1
 800ef00:	9304      	str	r3, [sp, #16]
 800ef02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef06:	4829      	ldr	r0, [pc, #164]	; (800efac <_vfiprintf_r+0x224>)
 800ef08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef0c:	2206      	movs	r2, #6
 800ef0e:	f7f1 f9ff 	bl	8000310 <memchr>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d03f      	beq.n	800ef96 <_vfiprintf_r+0x20e>
 800ef16:	4b26      	ldr	r3, [pc, #152]	; (800efb0 <_vfiprintf_r+0x228>)
 800ef18:	bb1b      	cbnz	r3, 800ef62 <_vfiprintf_r+0x1da>
 800ef1a:	9b03      	ldr	r3, [sp, #12]
 800ef1c:	3307      	adds	r3, #7
 800ef1e:	f023 0307 	bic.w	r3, r3, #7
 800ef22:	3308      	adds	r3, #8
 800ef24:	9303      	str	r3, [sp, #12]
 800ef26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef28:	443b      	add	r3, r7
 800ef2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef2c:	e768      	b.n	800ee00 <_vfiprintf_r+0x78>
 800ef2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef32:	460c      	mov	r4, r1
 800ef34:	2001      	movs	r0, #1
 800ef36:	e7a6      	b.n	800ee86 <_vfiprintf_r+0xfe>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	3401      	adds	r4, #1
 800ef3c:	9305      	str	r3, [sp, #20]
 800ef3e:	4619      	mov	r1, r3
 800ef40:	f04f 0c0a 	mov.w	ip, #10
 800ef44:	4620      	mov	r0, r4
 800ef46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef4a:	3a30      	subs	r2, #48	; 0x30
 800ef4c:	2a09      	cmp	r2, #9
 800ef4e:	d903      	bls.n	800ef58 <_vfiprintf_r+0x1d0>
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d0c6      	beq.n	800eee2 <_vfiprintf_r+0x15a>
 800ef54:	9105      	str	r1, [sp, #20]
 800ef56:	e7c4      	b.n	800eee2 <_vfiprintf_r+0x15a>
 800ef58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e7f0      	b.n	800ef44 <_vfiprintf_r+0x1bc>
 800ef62:	ab03      	add	r3, sp, #12
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	462a      	mov	r2, r5
 800ef68:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <_vfiprintf_r+0x22c>)
 800ef6a:	a904      	add	r1, sp, #16
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	f7fd fc3f 	bl	800c7f0 <_printf_float>
 800ef72:	4607      	mov	r7, r0
 800ef74:	1c78      	adds	r0, r7, #1
 800ef76:	d1d6      	bne.n	800ef26 <_vfiprintf_r+0x19e>
 800ef78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef7a:	07d9      	lsls	r1, r3, #31
 800ef7c:	d405      	bmi.n	800ef8a <_vfiprintf_r+0x202>
 800ef7e:	89ab      	ldrh	r3, [r5, #12]
 800ef80:	059a      	lsls	r2, r3, #22
 800ef82:	d402      	bmi.n	800ef8a <_vfiprintf_r+0x202>
 800ef84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef86:	f7fe f981 	bl	800d28c <__retarget_lock_release_recursive>
 800ef8a:	89ab      	ldrh	r3, [r5, #12]
 800ef8c:	065b      	lsls	r3, r3, #25
 800ef8e:	f53f af1d 	bmi.w	800edcc <_vfiprintf_r+0x44>
 800ef92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef94:	e71c      	b.n	800edd0 <_vfiprintf_r+0x48>
 800ef96:	ab03      	add	r3, sp, #12
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	462a      	mov	r2, r5
 800ef9c:	4b05      	ldr	r3, [pc, #20]	; (800efb4 <_vfiprintf_r+0x22c>)
 800ef9e:	a904      	add	r1, sp, #16
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7fd fead 	bl	800cd00 <_printf_i>
 800efa6:	e7e4      	b.n	800ef72 <_vfiprintf_r+0x1ea>
 800efa8:	0800f584 	.word	0x0800f584
 800efac:	0800f58e 	.word	0x0800f58e
 800efb0:	0800c7f1 	.word	0x0800c7f1
 800efb4:	0800ed65 	.word	0x0800ed65
 800efb8:	0800f58a 	.word	0x0800f58a

0800efbc <__swbuf_r>:
 800efbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efbe:	460e      	mov	r6, r1
 800efc0:	4614      	mov	r4, r2
 800efc2:	4605      	mov	r5, r0
 800efc4:	b118      	cbz	r0, 800efce <__swbuf_r+0x12>
 800efc6:	6a03      	ldr	r3, [r0, #32]
 800efc8:	b90b      	cbnz	r3, 800efce <__swbuf_r+0x12>
 800efca:	f7fe f847 	bl	800d05c <__sinit>
 800efce:	69a3      	ldr	r3, [r4, #24]
 800efd0:	60a3      	str	r3, [r4, #8]
 800efd2:	89a3      	ldrh	r3, [r4, #12]
 800efd4:	071a      	lsls	r2, r3, #28
 800efd6:	d525      	bpl.n	800f024 <__swbuf_r+0x68>
 800efd8:	6923      	ldr	r3, [r4, #16]
 800efda:	b31b      	cbz	r3, 800f024 <__swbuf_r+0x68>
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	6922      	ldr	r2, [r4, #16]
 800efe0:	1a98      	subs	r0, r3, r2
 800efe2:	6963      	ldr	r3, [r4, #20]
 800efe4:	b2f6      	uxtb	r6, r6
 800efe6:	4283      	cmp	r3, r0
 800efe8:	4637      	mov	r7, r6
 800efea:	dc04      	bgt.n	800eff6 <__swbuf_r+0x3a>
 800efec:	4621      	mov	r1, r4
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff fdac 	bl	800eb4c <_fflush_r>
 800eff4:	b9e0      	cbnz	r0, 800f030 <__swbuf_r+0x74>
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	3b01      	subs	r3, #1
 800effa:	60a3      	str	r3, [r4, #8]
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	1c5a      	adds	r2, r3, #1
 800f000:	6022      	str	r2, [r4, #0]
 800f002:	701e      	strb	r6, [r3, #0]
 800f004:	6962      	ldr	r2, [r4, #20]
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	429a      	cmp	r2, r3
 800f00a:	d004      	beq.n	800f016 <__swbuf_r+0x5a>
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	07db      	lsls	r3, r3, #31
 800f010:	d506      	bpl.n	800f020 <__swbuf_r+0x64>
 800f012:	2e0a      	cmp	r6, #10
 800f014:	d104      	bne.n	800f020 <__swbuf_r+0x64>
 800f016:	4621      	mov	r1, r4
 800f018:	4628      	mov	r0, r5
 800f01a:	f7ff fd97 	bl	800eb4c <_fflush_r>
 800f01e:	b938      	cbnz	r0, 800f030 <__swbuf_r+0x74>
 800f020:	4638      	mov	r0, r7
 800f022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f024:	4621      	mov	r1, r4
 800f026:	4628      	mov	r0, r5
 800f028:	f000 f806 	bl	800f038 <__swsetup_r>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	d0d5      	beq.n	800efdc <__swbuf_r+0x20>
 800f030:	f04f 37ff 	mov.w	r7, #4294967295
 800f034:	e7f4      	b.n	800f020 <__swbuf_r+0x64>
	...

0800f038 <__swsetup_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4b2a      	ldr	r3, [pc, #168]	; (800f0e4 <__swsetup_r+0xac>)
 800f03c:	4605      	mov	r5, r0
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	460c      	mov	r4, r1
 800f042:	b118      	cbz	r0, 800f04c <__swsetup_r+0x14>
 800f044:	6a03      	ldr	r3, [r0, #32]
 800f046:	b90b      	cbnz	r3, 800f04c <__swsetup_r+0x14>
 800f048:	f7fe f808 	bl	800d05c <__sinit>
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f052:	0718      	lsls	r0, r3, #28
 800f054:	d422      	bmi.n	800f09c <__swsetup_r+0x64>
 800f056:	06d9      	lsls	r1, r3, #27
 800f058:	d407      	bmi.n	800f06a <__swsetup_r+0x32>
 800f05a:	2309      	movs	r3, #9
 800f05c:	602b      	str	r3, [r5, #0]
 800f05e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f062:	81a3      	strh	r3, [r4, #12]
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	e034      	b.n	800f0d4 <__swsetup_r+0x9c>
 800f06a:	0758      	lsls	r0, r3, #29
 800f06c:	d512      	bpl.n	800f094 <__swsetup_r+0x5c>
 800f06e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f070:	b141      	cbz	r1, 800f084 <__swsetup_r+0x4c>
 800f072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f076:	4299      	cmp	r1, r3
 800f078:	d002      	beq.n	800f080 <__swsetup_r+0x48>
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7fe ff0c 	bl	800de98 <_free_r>
 800f080:	2300      	movs	r3, #0
 800f082:	6363      	str	r3, [r4, #52]	; 0x34
 800f084:	89a3      	ldrh	r3, [r4, #12]
 800f086:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f08a:	81a3      	strh	r3, [r4, #12]
 800f08c:	2300      	movs	r3, #0
 800f08e:	6063      	str	r3, [r4, #4]
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	6023      	str	r3, [r4, #0]
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	f043 0308 	orr.w	r3, r3, #8
 800f09a:	81a3      	strh	r3, [r4, #12]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	b94b      	cbnz	r3, 800f0b4 <__swsetup_r+0x7c>
 800f0a0:	89a3      	ldrh	r3, [r4, #12]
 800f0a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0aa:	d003      	beq.n	800f0b4 <__swsetup_r+0x7c>
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f000 f884 	bl	800f1bc <__smakebuf_r>
 800f0b4:	89a0      	ldrh	r0, [r4, #12]
 800f0b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0ba:	f010 0301 	ands.w	r3, r0, #1
 800f0be:	d00a      	beq.n	800f0d6 <__swsetup_r+0x9e>
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60a3      	str	r3, [r4, #8]
 800f0c4:	6963      	ldr	r3, [r4, #20]
 800f0c6:	425b      	negs	r3, r3
 800f0c8:	61a3      	str	r3, [r4, #24]
 800f0ca:	6923      	ldr	r3, [r4, #16]
 800f0cc:	b943      	cbnz	r3, 800f0e0 <__swsetup_r+0xa8>
 800f0ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0d2:	d1c4      	bne.n	800f05e <__swsetup_r+0x26>
 800f0d4:	bd38      	pop	{r3, r4, r5, pc}
 800f0d6:	0781      	lsls	r1, r0, #30
 800f0d8:	bf58      	it	pl
 800f0da:	6963      	ldrpl	r3, [r4, #20]
 800f0dc:	60a3      	str	r3, [r4, #8]
 800f0de:	e7f4      	b.n	800f0ca <__swsetup_r+0x92>
 800f0e0:	2000      	movs	r0, #0
 800f0e2:	e7f7      	b.n	800f0d4 <__swsetup_r+0x9c>
 800f0e4:	24000068 	.word	0x24000068

0800f0e8 <_raise_r>:
 800f0e8:	291f      	cmp	r1, #31
 800f0ea:	b538      	push	{r3, r4, r5, lr}
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	460d      	mov	r5, r1
 800f0f0:	d904      	bls.n	800f0fc <_raise_r+0x14>
 800f0f2:	2316      	movs	r3, #22
 800f0f4:	6003      	str	r3, [r0, #0]
 800f0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fa:	bd38      	pop	{r3, r4, r5, pc}
 800f0fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f0fe:	b112      	cbz	r2, 800f106 <_raise_r+0x1e>
 800f100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f104:	b94b      	cbnz	r3, 800f11a <_raise_r+0x32>
 800f106:	4620      	mov	r0, r4
 800f108:	f000 f830 	bl	800f16c <_getpid_r>
 800f10c:	462a      	mov	r2, r5
 800f10e:	4601      	mov	r1, r0
 800f110:	4620      	mov	r0, r4
 800f112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f116:	f000 b817 	b.w	800f148 <_kill_r>
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d00a      	beq.n	800f134 <_raise_r+0x4c>
 800f11e:	1c59      	adds	r1, r3, #1
 800f120:	d103      	bne.n	800f12a <_raise_r+0x42>
 800f122:	2316      	movs	r3, #22
 800f124:	6003      	str	r3, [r0, #0]
 800f126:	2001      	movs	r0, #1
 800f128:	e7e7      	b.n	800f0fa <_raise_r+0x12>
 800f12a:	2400      	movs	r4, #0
 800f12c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f130:	4628      	mov	r0, r5
 800f132:	4798      	blx	r3
 800f134:	2000      	movs	r0, #0
 800f136:	e7e0      	b.n	800f0fa <_raise_r+0x12>

0800f138 <raise>:
 800f138:	4b02      	ldr	r3, [pc, #8]	; (800f144 <raise+0xc>)
 800f13a:	4601      	mov	r1, r0
 800f13c:	6818      	ldr	r0, [r3, #0]
 800f13e:	f7ff bfd3 	b.w	800f0e8 <_raise_r>
 800f142:	bf00      	nop
 800f144:	24000068 	.word	0x24000068

0800f148 <_kill_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	4d07      	ldr	r5, [pc, #28]	; (800f168 <_kill_r+0x20>)
 800f14c:	2300      	movs	r3, #0
 800f14e:	4604      	mov	r4, r0
 800f150:	4608      	mov	r0, r1
 800f152:	4611      	mov	r1, r2
 800f154:	602b      	str	r3, [r5, #0]
 800f156:	f7f2 fa87 	bl	8001668 <_kill>
 800f15a:	1c43      	adds	r3, r0, #1
 800f15c:	d102      	bne.n	800f164 <_kill_r+0x1c>
 800f15e:	682b      	ldr	r3, [r5, #0]
 800f160:	b103      	cbz	r3, 800f164 <_kill_r+0x1c>
 800f162:	6023      	str	r3, [r4, #0]
 800f164:	bd38      	pop	{r3, r4, r5, pc}
 800f166:	bf00      	nop
 800f168:	240006fc 	.word	0x240006fc

0800f16c <_getpid_r>:
 800f16c:	f7f2 ba74 	b.w	8001658 <_getpid>

0800f170 <__swhatbuf_r>:
 800f170:	b570      	push	{r4, r5, r6, lr}
 800f172:	460c      	mov	r4, r1
 800f174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f178:	2900      	cmp	r1, #0
 800f17a:	b096      	sub	sp, #88	; 0x58
 800f17c:	4615      	mov	r5, r2
 800f17e:	461e      	mov	r6, r3
 800f180:	da0d      	bge.n	800f19e <__swhatbuf_r+0x2e>
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f188:	f04f 0100 	mov.w	r1, #0
 800f18c:	bf0c      	ite	eq
 800f18e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f192:	2340      	movne	r3, #64	; 0x40
 800f194:	2000      	movs	r0, #0
 800f196:	6031      	str	r1, [r6, #0]
 800f198:	602b      	str	r3, [r5, #0]
 800f19a:	b016      	add	sp, #88	; 0x58
 800f19c:	bd70      	pop	{r4, r5, r6, pc}
 800f19e:	466a      	mov	r2, sp
 800f1a0:	f000 f848 	bl	800f234 <_fstat_r>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	dbec      	blt.n	800f182 <__swhatbuf_r+0x12>
 800f1a8:	9901      	ldr	r1, [sp, #4]
 800f1aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f1ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f1b2:	4259      	negs	r1, r3
 800f1b4:	4159      	adcs	r1, r3
 800f1b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ba:	e7eb      	b.n	800f194 <__swhatbuf_r+0x24>

0800f1bc <__smakebuf_r>:
 800f1bc:	898b      	ldrh	r3, [r1, #12]
 800f1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1c0:	079d      	lsls	r5, r3, #30
 800f1c2:	4606      	mov	r6, r0
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	d507      	bpl.n	800f1d8 <__smakebuf_r+0x1c>
 800f1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1cc:	6023      	str	r3, [r4, #0]
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	6163      	str	r3, [r4, #20]
 800f1d4:	b002      	add	sp, #8
 800f1d6:	bd70      	pop	{r4, r5, r6, pc}
 800f1d8:	ab01      	add	r3, sp, #4
 800f1da:	466a      	mov	r2, sp
 800f1dc:	f7ff ffc8 	bl	800f170 <__swhatbuf_r>
 800f1e0:	9900      	ldr	r1, [sp, #0]
 800f1e2:	4605      	mov	r5, r0
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	f7fe fecb 	bl	800df80 <_malloc_r>
 800f1ea:	b948      	cbnz	r0, 800f200 <__smakebuf_r+0x44>
 800f1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f0:	059a      	lsls	r2, r3, #22
 800f1f2:	d4ef      	bmi.n	800f1d4 <__smakebuf_r+0x18>
 800f1f4:	f023 0303 	bic.w	r3, r3, #3
 800f1f8:	f043 0302 	orr.w	r3, r3, #2
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	e7e3      	b.n	800f1c8 <__smakebuf_r+0xc>
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	6020      	str	r0, [r4, #0]
 800f204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f208:	81a3      	strh	r3, [r4, #12]
 800f20a:	9b00      	ldr	r3, [sp, #0]
 800f20c:	6163      	str	r3, [r4, #20]
 800f20e:	9b01      	ldr	r3, [sp, #4]
 800f210:	6120      	str	r0, [r4, #16]
 800f212:	b15b      	cbz	r3, 800f22c <__smakebuf_r+0x70>
 800f214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f218:	4630      	mov	r0, r6
 800f21a:	f000 f81d 	bl	800f258 <_isatty_r>
 800f21e:	b128      	cbz	r0, 800f22c <__smakebuf_r+0x70>
 800f220:	89a3      	ldrh	r3, [r4, #12]
 800f222:	f023 0303 	bic.w	r3, r3, #3
 800f226:	f043 0301 	orr.w	r3, r3, #1
 800f22a:	81a3      	strh	r3, [r4, #12]
 800f22c:	89a3      	ldrh	r3, [r4, #12]
 800f22e:	431d      	orrs	r5, r3
 800f230:	81a5      	strh	r5, [r4, #12]
 800f232:	e7cf      	b.n	800f1d4 <__smakebuf_r+0x18>

0800f234 <_fstat_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d07      	ldr	r5, [pc, #28]	; (800f254 <_fstat_r+0x20>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	4611      	mov	r1, r2
 800f240:	602b      	str	r3, [r5, #0]
 800f242:	f7f2 fa70 	bl	8001726 <_fstat>
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	d102      	bne.n	800f250 <_fstat_r+0x1c>
 800f24a:	682b      	ldr	r3, [r5, #0]
 800f24c:	b103      	cbz	r3, 800f250 <_fstat_r+0x1c>
 800f24e:	6023      	str	r3, [r4, #0]
 800f250:	bd38      	pop	{r3, r4, r5, pc}
 800f252:	bf00      	nop
 800f254:	240006fc 	.word	0x240006fc

0800f258 <_isatty_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d06      	ldr	r5, [pc, #24]	; (800f274 <_isatty_r+0x1c>)
 800f25c:	2300      	movs	r3, #0
 800f25e:	4604      	mov	r4, r0
 800f260:	4608      	mov	r0, r1
 800f262:	602b      	str	r3, [r5, #0]
 800f264:	f7f2 fa6f 	bl	8001746 <_isatty>
 800f268:	1c43      	adds	r3, r0, #1
 800f26a:	d102      	bne.n	800f272 <_isatty_r+0x1a>
 800f26c:	682b      	ldr	r3, [r5, #0]
 800f26e:	b103      	cbz	r3, 800f272 <_isatty_r+0x1a>
 800f270:	6023      	str	r3, [r4, #0]
 800f272:	bd38      	pop	{r3, r4, r5, pc}
 800f274:	240006fc 	.word	0x240006fc

0800f278 <_init>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr

0800f284 <_fini>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr
